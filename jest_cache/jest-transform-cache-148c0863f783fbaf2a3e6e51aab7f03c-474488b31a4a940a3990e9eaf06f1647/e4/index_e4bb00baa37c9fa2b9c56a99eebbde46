8adcdf210e860fb718182c1ee529e1a8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typesBundleForPolkadot = exports.typesBundle = exports.typesAlias = exports.rpc = exports.types = void 0;
const orml_type_definitions_1 = require("@open-web3/orml-type-definitions");
const utils_1 = require("@open-web3/orml-type-definitions/utils");
const rootnet_1 = __importDefault(require("./spec/rootnet"));
const porcini_1 = __importDefault(require("./spec/porcini"));
const dex_1 = __importDefault(require("./dex"));
const ethy_1 = __importDefault(require("./ethy"));
const ethWallet_1 = __importDefault(require("./ethWallet"));
const xrplBridge_1 = __importDefault(require("./xrplBridge"));
const nft_1 = __importDefault(require("./nft"));
const runtime_1 = __importDefault(require("./runtime"));
const rootDefs = {
    dex: dex_1.default,
    ethy: ethy_1.default,
    ethWallet: ethWallet_1.default,
    xrplBridge: xrplBridge_1.default,
    nft: nft_1.default,
    runtime: runtime_1.default,
};
exports.types = {
    ...orml_type_definitions_1.types,
    ...(0, utils_1.typesFromDefs)(rootDefs),
};
exports.rpc = (0, utils_1.jsonrpcFromDefs)(rootDefs, { ...orml_type_definitions_1.rpc });
exports.typesAlias = (0, utils_1.typesAliasFromDefs)(rootDefs, { ...orml_type_definitions_1.typesAlias });
function getBundle(versioned) {
    return {
        rpc: exports.rpc,
        instances: { council: ['generalCouncil'] },
        types: [...versioned].map((version) => {
            return {
                minmax: version.minmax,
                types: {
                    ...exports.types,
                    ...version.types
                }
            };
        }),
        alias: exports.typesAlias
    };
}
exports.typesBundle = {
    spec: {
        root: getBundle(rootnet_1.default),
        porcini: getBundle(porcini_1.default),
    }
};
// Type overrides have priority issues
exports.typesBundleForPolkadot = {
    spec: {
        root: getBundle(rootnet_1.default),
        porcini: getBundle(porcini_1.default),
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL3R5cGUtZGVmaW5pdGlvbnMvc3JjL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDRFQUErRztBQUMvRyxrRUFBNEc7QUFFNUcsNkRBQThDO0FBQzlDLDZEQUE4QztBQUM5QyxnREFBd0I7QUFDeEIsa0RBQTBCO0FBQzFCLDREQUFvQztBQUNwQyw4REFBc0M7QUFDdEMsZ0RBQXdCO0FBQ3hCLHdEQUFnQztBQUVoQyxNQUFNLFFBQVEsR0FBRztJQUNmLEdBQUcsRUFBSCxhQUFHO0lBQ0gsSUFBSSxFQUFKLGNBQUk7SUFDSixTQUFTLEVBQVQsbUJBQVM7SUFDVCxVQUFVLEVBQVYsb0JBQVU7SUFDVixHQUFHLEVBQUgsYUFBRztJQUNILE9BQU8sRUFBUCxpQkFBTztDQUNSLENBQUM7QUFFVyxRQUFBLEtBQUssR0FBRztJQUNuQixHQUFHLDZCQUFTO0lBQ1osR0FBRyxJQUFBLHFCQUFhLEVBQUMsUUFBUSxDQUFDO0NBQzNCLENBQUM7QUFFVyxRQUFBLEdBQUcsR0FBRyxJQUFBLHVCQUFlLEVBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRywyQkFBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxRQUFBLFVBQVUsR0FBRyxJQUFBLDBCQUFrQixFQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsa0NBQVMsRUFBRSxDQUFDLENBQUM7QUFFekUsU0FBUyxTQUFTLENBQUUsU0FBa0M7SUFDcEQsT0FBTztRQUNMLEdBQUcsRUFBSCxXQUFHO1FBQ0gsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUMxQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BDLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEVBQUU7b0JBQ0wsR0FBRyxhQUFLO29CQUNSLEdBQUcsT0FBTyxDQUFDLEtBQUs7aUJBQ2pCO2FBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQztRQUNGLEtBQUssRUFBRSxrQkFBVTtLQUNsQixDQUFDO0FBQ0osQ0FBQztBQUVZLFFBQUEsV0FBVyxHQUFHO0lBQ3pCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxTQUFTLENBQUMsaUJBQWdCLENBQUM7UUFDakMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxpQkFBZ0IsQ0FBQztLQUNyQztDQUNGLENBQUM7QUFFRixzQ0FBc0M7QUFDekIsUUFBQSxzQkFBc0IsR0FBRztJQUNwQyxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsU0FBUyxDQUFDLGlCQUFnQixDQUFDO1FBQ2pDLE9BQU8sRUFBRSxTQUFTLENBQUMsaUJBQWdCLENBQUM7S0FDckM7Q0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJpc2htYS93b3JrL2Z1dHVyZXZlcnNlL3Rybi1yb290bmV0LWFwaS9wYWNrYWdlcy90eXBlLWRlZmluaXRpb25zL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQgKi9cbmltcG9ydCB0eXBlIHsgT3ZlcnJpZGVWZXJzaW9uZWRUeXBlIH0gZnJvbSAnQHBvbGthZG90L3R5cGVzL3R5cGVzJztcblxuaW1wb3J0IHsgcnBjIGFzIG9ybWxScGMsIHR5cGVzIGFzIG9ybWxUeXBlcywgdHlwZXNBbGlhcyBhcyBvcm1sQWxpYXMgfSBmcm9tICdAb3Blbi13ZWIzL29ybWwtdHlwZS1kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBqc29ucnBjRnJvbURlZnMsIHR5cGVzQWxpYXNGcm9tRGVmcywgdHlwZXNGcm9tRGVmcyB9IGZyb20gJ0BvcGVuLXdlYjMvb3JtbC10eXBlLWRlZmluaXRpb25zL3V0aWxzJztcblxuaW1wb3J0IHJvb3RuZXRWZXJzaW9uZWQgZnJvbSAnLi9zcGVjL3Jvb3RuZXQnO1xuaW1wb3J0IHBvcmNpbmlWZXJzaW9uZWQgZnJvbSAnLi9zcGVjL3BvcmNpbmknO1xuaW1wb3J0IGRleCBmcm9tICcuL2RleCc7XG5pbXBvcnQgZXRoeSBmcm9tICcuL2V0aHknO1xuaW1wb3J0IGV0aFdhbGxldCBmcm9tICcuL2V0aFdhbGxldCc7XG5pbXBvcnQgeHJwbEJyaWRnZSBmcm9tICcuL3hycGxCcmlkZ2UnO1xuaW1wb3J0IG5mdCBmcm9tICcuL25mdCc7XG5pbXBvcnQgcnVudGltZSBmcm9tICcuL3J1bnRpbWUnO1xuXG5jb25zdCByb290RGVmcyA9IHtcbiAgZGV4LFxuICBldGh5LFxuICBldGhXYWxsZXQsXG4gIHhycGxCcmlkZ2UsXG4gIG5mdCxcbiAgcnVudGltZSxcbn07XG5cbmV4cG9ydCBjb25zdCB0eXBlcyA9IHtcbiAgLi4ub3JtbFR5cGVzLFxuICAuLi50eXBlc0Zyb21EZWZzKHJvb3REZWZzKSxcbn07XG5cbmV4cG9ydCBjb25zdCBycGMgPSBqc29ucnBjRnJvbURlZnMocm9vdERlZnMsIHsgLi4ub3JtbFJwYyB9KTtcbmV4cG9ydCBjb25zdCB0eXBlc0FsaWFzID0gdHlwZXNBbGlhc0Zyb21EZWZzKHJvb3REZWZzLCB7IC4uLm9ybWxBbGlhcyB9KTtcblxuZnVuY3Rpb24gZ2V0QnVuZGxlICh2ZXJzaW9uZWQ6IE92ZXJyaWRlVmVyc2lvbmVkVHlwZVtdKSB7XG4gIHJldHVybiB7XG4gICAgcnBjLFxuICAgIGluc3RhbmNlczogeyBjb3VuY2lsOiBbJ2dlbmVyYWxDb3VuY2lsJ10gfSxcbiAgICB0eXBlczogWy4uLnZlcnNpb25lZF0ubWFwKCh2ZXJzaW9uKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtaW5tYXg6IHZlcnNpb24ubWlubWF4LFxuICAgICAgICB0eXBlczoge1xuICAgICAgICAgIC4uLnR5cGVzLFxuICAgICAgICAgIC4uLnZlcnNpb24udHlwZXNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSxcbiAgICBhbGlhczogdHlwZXNBbGlhc1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgdHlwZXNCdW5kbGUgPSB7XG4gIHNwZWM6IHtcbiAgICByb290OiBnZXRCdW5kbGUocm9vdG5ldFZlcnNpb25lZCksXG4gICAgcG9yY2luaTogZ2V0QnVuZGxlKHBvcmNpbmlWZXJzaW9uZWQpLFxuICB9XG59O1xuXG4vLyBUeXBlIG92ZXJyaWRlcyBoYXZlIHByaW9yaXR5IGlzc3Vlc1xuZXhwb3J0IGNvbnN0IHR5cGVzQnVuZGxlRm9yUG9sa2Fkb3QgPSB7XG4gIHNwZWM6IHtcbiAgICByb290OiBnZXRCdW5kbGUocm9vdG5ldFZlcnNpb25lZCksXG4gICAgcG9yY2luaTogZ2V0QnVuZGxlKHBvcmNpbmlWZXJzaW9uZWQpLFxuICB9XG59O1xuXG4iXSwidmVyc2lvbiI6M30=