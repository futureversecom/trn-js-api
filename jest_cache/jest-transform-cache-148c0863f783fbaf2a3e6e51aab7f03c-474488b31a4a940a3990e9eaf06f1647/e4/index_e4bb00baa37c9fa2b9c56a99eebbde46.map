{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/src/index.ts","mappings":";;;;;;AAGA,4EAA+G;AAC/G,kEAA4G;AAE5G,6DAA8C;AAC9C,6DAA8C;AAC9C,gDAAwB;AACxB,kDAA0B;AAC1B,4DAAoC;AACpC,8DAAsC;AACtC,gDAAwB;AACxB,wDAAgC;AAEhC,MAAM,QAAQ,GAAG;IACf,GAAG,EAAH,aAAG;IACH,IAAI,EAAJ,cAAI;IACJ,SAAS,EAAT,mBAAS;IACT,UAAU,EAAV,oBAAU;IACV,GAAG,EAAH,aAAG;IACH,OAAO,EAAP,iBAAO;CACR,CAAC;AAEW,QAAA,KAAK,GAAG;IACnB,GAAG,6BAAS;IACZ,GAAG,IAAA,qBAAa,EAAC,QAAQ,CAAC;CAC3B,CAAC;AAEW,QAAA,GAAG,GAAG,IAAA,uBAAe,EAAC,QAAQ,EAAE,EAAE,GAAG,2BAAO,EAAE,CAAC,CAAC;AAChD,QAAA,UAAU,GAAG,IAAA,0BAAkB,EAAC,QAAQ,EAAE,EAAE,GAAG,kCAAS,EAAE,CAAC,CAAC;AAEzE,SAAS,SAAS,CAAE,SAAkC;IACpD,OAAO;QACL,GAAG,EAAH,WAAG;QACH,SAAS,EAAE,EAAE,OAAO,EAAE,CAAC,gBAAgB,CAAC,EAAE;QAC1C,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YACpC,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,KAAK,EAAE;oBACL,GAAG,aAAK;oBACR,GAAG,OAAO,CAAC,KAAK;iBACjB;aACF,CAAC;QACJ,CAAC,CAAC;QACF,KAAK,EAAE,kBAAU;KAClB,CAAC;AACJ,CAAC;AAEY,QAAA,WAAW,GAAG;IACzB,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS,CAAC,iBAAgB,CAAC;QACjC,OAAO,EAAE,SAAS,CAAC,iBAAgB,CAAC;KACrC;CACF,CAAC;AAEF,sCAAsC;AACzB,QAAA,sBAAsB,GAAG;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS,CAAC,iBAAgB,CAAC;QACjC,OAAO,EAAE,SAAS,CAAC,iBAAgB,CAAC;KACrC;CACF,CAAC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport type { OverrideVersionedType } from '@polkadot/types/types';\n\nimport { rpc as ormlRpc, types as ormlTypes, typesAlias as ormlAlias } from '@open-web3/orml-type-definitions';\nimport { jsonrpcFromDefs, typesAliasFromDefs, typesFromDefs } from '@open-web3/orml-type-definitions/utils';\n\nimport rootnetVersioned from './spec/rootnet';\nimport porciniVersioned from './spec/porcini';\nimport dex from './dex';\nimport ethy from './ethy';\nimport ethWallet from './ethWallet';\nimport xrplBridge from './xrplBridge';\nimport nft from './nft';\nimport runtime from './runtime';\n\nconst rootDefs = {\n  dex,\n  ethy,\n  ethWallet,\n  xrplBridge,\n  nft,\n  runtime,\n};\n\nexport const types = {\n  ...ormlTypes,\n  ...typesFromDefs(rootDefs),\n};\n\nexport const rpc = jsonrpcFromDefs(rootDefs, { ...ormlRpc });\nexport const typesAlias = typesAliasFromDefs(rootDefs, { ...ormlAlias });\n\nfunction getBundle (versioned: OverrideVersionedType[]) {\n  return {\n    rpc,\n    instances: { council: ['generalCouncil'] },\n    types: [...versioned].map((version) => {\n      return {\n        minmax: version.minmax,\n        types: {\n          ...types,\n          ...version.types\n        }\n      };\n    }),\n    alias: typesAlias\n  };\n}\n\nexport const typesBundle = {\n  spec: {\n    root: getBundle(rootnetVersioned),\n    porcini: getBundle(porciniVersioned),\n  }\n};\n\n// Type overrides have priority issues\nexport const typesBundleForPolkadot = {\n  spec: {\n    root: getBundle(rootnetVersioned),\n    porcini: getBundle(porciniVersioned),\n  }\n};\n\n"],"version":3}