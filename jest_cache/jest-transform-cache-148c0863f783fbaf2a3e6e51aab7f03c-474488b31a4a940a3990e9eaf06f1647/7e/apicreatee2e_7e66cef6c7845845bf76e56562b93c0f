80c80a148e69a9d1d357754dbaf9ed87
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
describe('e2e api create', () => {
    it('Find lock balance for rootnet validator', async () => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const rootAssetId = 1;
        const validator = "0x0Fa787f51333D9cA66a4A6563b56EececDA49a06";
        const lockBalance = await api.query.balances.locks(rootAssetId, validator);
        expect((lockBalance.toJSON())[0].amount).toBeGreaterThanOrEqual(0);
        await api.disconnect();
    });
    it('Should get rejected if the connection fails', async (done) => {
        const incorrectEndPoint = 'wss://unknow.chain.io/ws';
        const autoConnect = false;
        const provider = new api_1.WsProvider(incorrectEndPoint);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider: provider }));
        await expect(api.isReady).rejects.toThrow('Timed out in 10000 ms.');
        done();
    });
    it('subscription test', async (done) => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {
            console.log(`Chain is at block: #${header.number}`);
            expect(header.number).toBeDefined();
            unsubscribe();
            api.disconnect();
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1RDtBQUN2RCw2Q0FBOEM7QUFDOUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUU5QixFQUFFLENBQUMseUNBQXlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckQsTUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDbEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLDRDQUE0QyxDQUFDO1FBQy9ELE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMzRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxNQUFNLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLEVBQUMsSUFBSSxFQUFDLEVBQUU7UUFDN0QsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztRQUNyRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxnQkFBVSxDQUFDLElBQUEsYUFBTyxFQUFDLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3BFLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxFQUFDLElBQUksRUFBQyxFQUFFO1FBQ2pDLE1BQU0sV0FBVyxHQUFHLDRCQUE0QixDQUFDO1FBQ2pELE1BQU0sUUFBUSxHQUFHLElBQUksZ0JBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLGdCQUFVLENBQUMsSUFBQSxhQUFPLEVBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQ3BCLE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLFdBQVcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2pCLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJpc2htYS93b3JrL2Z1dHVyZXZlcnNlL3Rybi1yb290bmV0LWFwaS9wYWNrYWdlcy9hcGkvdGVzdC9lMmUvYXBpLmNyZWF0ZS5lMmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvbWlzZSwgV3NQcm92aWRlciB9IGZyb20gJ0Bwb2xrYWRvdC9hcGknO1xuaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gJ0B0aGVyb290bmV0d29yay9hcGknO1xuZGVzY3JpYmUoJ2UyZSBhcGkgY3JlYXRlJywgKCkgPT4ge1xuXG4gIGl0KCdGaW5kIGxvY2sgYmFsYW5jZSBmb3Igcm9vdG5ldCB2YWxpZGF0b3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm92aWRlclVybCA9ICd3c3M6Ly9yb290LnJvb3RuZXQubGl2ZS93cyc7XG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBXc1Byb3ZpZGVyKHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdwcm92aWRlclVybCcsIHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoeyBwcm92aWRlciB9KSk7XG4gICAgICBhd2FpdCBhcGkuaXNSZWFkeTtcbiAgICAgIGNvbnN0IHJvb3RBc3NldElkID0gMTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBcIjB4MEZhNzg3ZjUxMzMzRDljQTY2YTRBNjU2M2I1NkVlY2VjREE0OWEwNlwiO1xuICAgIGNvbnN0IGxvY2tCYWxhbmNlID0gYXdhaXQgYXBpLnF1ZXJ5LmJhbGFuY2VzLmxvY2tzKHJvb3RBc3NldElkLCB2YWxpZGF0b3IpO1xuICAgIGV4cGVjdCgobG9ja0JhbGFuY2UudG9KU09OKCkpWzBdLmFtb3VudCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICBhd2FpdCBhcGkuZGlzY29ubmVjdCgpO1xuICB9KTtcblxuICBpdCgnU2hvdWxkIGdldCByZWplY3RlZCBpZiB0aGUgY29ubmVjdGlvbiBmYWlscycsIGFzeW5jIGRvbmUgPT4ge1xuICAgIGNvbnN0IGluY29ycmVjdEVuZFBvaW50ID0gJ3dzczovL3Vua25vdy5jaGFpbi5pby93cyc7XG4gICAgY29uc3QgYXV0b0Nvbm5lY3QgPSBmYWxzZTtcbiAgICBjb25zdCBwcm92aWRlciA9IG5ldyBXc1Byb3ZpZGVyKGluY29ycmVjdEVuZFBvaW50KTtcbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpUHJvbWlzZShvcHRpb25zKHtwcm92aWRlcjogcHJvdmlkZXJ9KSk7XG4gICAgYXdhaXQgZXhwZWN0KGFwaS5pc1JlYWR5KS5yZWplY3RzLnRvVGhyb3coJ1RpbWVkIG91dCBpbiAxMDAwMCBtcy4nKTtcbiAgICBkb25lKCk7XG4gIH0pO1xuXG4gIGl0KCdzdWJzY3JpcHRpb24gdGVzdCcsIGFzeW5jIGRvbmUgPT4ge1xuICAgICAgY29uc3QgcHJvdmlkZXJVcmwgPSAnd3NzOi8vcm9vdC5yb290bmV0LmxpdmUvd3MnO1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgV3NQcm92aWRlcihwcm92aWRlclVybCk7XG4gICAgICBjb25zb2xlLmxvZygncHJvdmlkZXJVcmwnLCBwcm92aWRlclVybCk7XG4gICAgICBjb25zdCBhcGkgPSBuZXcgQXBpUHJvbWlzZShvcHRpb25zKHsgcHJvdmlkZXIgfSkpO1xuICAgICAgYXdhaXQgYXBpLmlzUmVhZHk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBhd2FpdCBhcGkucnBjLmNoYWluLnN1YnNjcmliZU5ld0hlYWRzKChoZWFkZXIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBDaGFpbiBpcyBhdCBibG9jazogIyR7aGVhZGVyLm51bWJlcn1gKTtcbiAgICAgIGV4cGVjdChoZWFkZXIubnVtYmVyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIGFwaS5kaXNjb25uZWN0KCk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=