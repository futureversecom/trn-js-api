{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/api.create.e2e.ts","mappings":";;AAAA,uCAAuD;AACvD,6CAA8C;AAC9C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAE9B,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,WAAW,GAAG,4BAA4B,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,gBAAU,CAAC,WAAW,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,gBAAU,CAAC,IAAA,aAAO,EAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,GAAG,CAAC,OAAO,CAAC;QAClB,MAAM,WAAW,GAAG,CAAC,CAAC;QACxB,MAAM,SAAS,GAAG,4CAA4C,CAAC;QAC/D,MAAM,WAAW,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC3E,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,GAAG,CAAC,UAAU,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;QAC7D,MAAM,iBAAiB,GAAG,0BAA0B,CAAC;QACrD,MAAM,WAAW,GAAG,KAAK,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAI,gBAAU,CAAC,iBAAiB,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG,IAAI,gBAAU,CAAC,IAAA,aAAO,EAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACpE,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;QACjC,MAAM,WAAW,GAAG,4BAA4B,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,gBAAU,CAAC,WAAW,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,gBAAU,CAAC,IAAA,aAAO,EAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,GAAG,CAAC,OAAO,CAAC;QACpB,MAAM,WAAW,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,MAAM,EAAE,EAAE;YACnE,OAAO,CAAC,GAAG,CAAC,uBAAuB,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,WAAW,EAAE,CAAC;YACd,GAAG,CAAC,UAAU,EAAE,CAAC;YACjB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/api.create.e2e.ts"],"sourcesContent":["import { ApiPromise, WsProvider } from '@polkadot/api';\nimport { options } from '@therootnetwork/api';\ndescribe('e2e api create', () => {\n\n  it('Find lock balance for rootnet validator', async () => {\n      const providerUrl = 'wss://root.rootnet.live/ws';\n      const provider = new WsProvider(providerUrl);\n      console.log('providerUrl', providerUrl);\n      const api = new ApiPromise(options({ provider }));\n      await api.isReady;\n      const rootAssetId = 1;\n    const validator = \"0x0Fa787f51333D9cA66a4A6563b56EececDA49a06\";\n    const lockBalance = await api.query.balances.locks(rootAssetId, validator);\n    expect((lockBalance.toJSON())[0].amount).toBeGreaterThanOrEqual(0);\n    await api.disconnect();\n  });\n\n  it('Should get rejected if the connection fails', async done => {\n    const incorrectEndPoint = 'wss://unknow.chain.io/ws';\n    const autoConnect = false;\n    const provider = new WsProvider(incorrectEndPoint);\n    const api = new ApiPromise(options({provider: provider}));\n    await expect(api.isReady).rejects.toThrow('Timed out in 10000 ms.');\n    done();\n  });\n\n  it('subscription test', async done => {\n      const providerUrl = 'wss://root.rootnet.live/ws';\n      const provider = new WsProvider(providerUrl);\n      console.log('providerUrl', providerUrl);\n      const api = new ApiPromise(options({ provider }));\n      await api.isReady;\n    const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\n      console.log(`Chain is at block: #${header.number}`);\n      expect(header.number).toBeDefined();\n      unsubscribe();\n      api.disconnect();\n      done();\n    });\n  });\n});\n"],"version":3}