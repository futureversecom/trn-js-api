{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/getMetadata.e2e.ts","mappings":";AAAA,wDAAwD;AACxD,KAAK;AACL,qEAAqE;AACrE,sEAAsE;AACtE,6CAA6C;AAC7C,KAAK;AACL,oDAAoD;AACpD,KAAK;AACL,yEAAyE;AACzE,uEAAuE;AACvE,8EAA8E;AAC9E,yEAAyE;AACzE,oCAAoC;AACpC,EAAE;AACF,qEAAqE;AACrE,uDAAuD;AACvD,gFAAgF;AAChF,EAAE;AACF,qCAAqC;AACrC,0DAA0D;AAC1D,qEAAqE;AACrE,yEAAyE;AACzE,gEAAgE;AAChE,4CAA4C;AAC5C,2CAA2C;AAC3C,6EAA6E;AAC7E,iEAAiE;AACjE,iEAAiE;AACjE,4DAA4D;AAC5D,yFAAyF;AACzF,4DAA4D;AAC5D,cAAc;AACd,QAAQ;AACR,EAAE;AACF,gGAAgG;AAChG,sCAAsC;AACtC,kFAAkF;AAClF,yEAAyE;AACzE,gEAAgE;AAChE,4CAA4C;AAC5C,2CAA2C;AAC3C,6EAA6E;AAC7E,iEAAiE;AACjE,iEAAiE;AACjE,iFAAiF;AACjF,iGAAiG;AACjG,mGAAmG;AACnG,8EAA8E;AAC9E,cAAc;AACd,QAAQ;AACR,MAAM","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/getMetadata.e2e.ts"],"sourcesContent":["// // Copyright 2019-2021 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import {getMetadata, essential} from \"../../src/util/getMetadata\";\n// import {TypeRegistry} from \"@polkadot/types/create\";\n// import {MetadataVersioned} from \"@polkadot/types/metadata/MetadataVersioned\";\n//\n// describe('getMetadata()',  () => {\n//   it('get slim metadata for endpoint', async (done)=> {\n//     const slimMetadata = await getMetadata('ws://localhost:9944');\n//     const metadataKey = Object.entries(slimMetadata)[0][0].split('-');\n//     const metadataValue = Object.entries(slimMetadata)[0][1];\n//     expect(metadataKey[1]).toEqual(\"58\");\n//     const registry = new TypeRegistry();\n//     const mVersionedSlim = new MetadataVersioned(registry, metadataValue);\n//     const modules = mVersionedSlim.asLatest.pallets.toArray();\n//     const storageData = modules.filter(m => m.storage.isSome);\n//     expect(storageData.length).toEqual(essential.length);\n//     const modulesName = storageData.map(value => value.name.toString().toLowerCase());\n//     expect(modulesName.sort()).toEqual(essential.sort());\n//     done();\n//   });\n//\n//   it('get custom metadata for endpoint, with the list of metadata expected', async (done)=> {\n//     const keepMetaFor = ['Staking']\n//     const slimMetadata = await getMetadata('ws://localhost:9944', keepMetaFor);\n//     const metadataKey = Object.entries(slimMetadata)[0][0].split('-');\n//     const metadataValue = Object.entries(slimMetadata)[0][1];\n//     expect(metadataKey[1]).toEqual(\"58\");\n//     const registry = new TypeRegistry();\n//     const mVersionedSlim = new MetadataVersioned(registry, metadataValue);\n//     const modules = mVersionedSlim.asLatest.pallets.toArray();\n//     const storageData = modules.filter(m => m.storage.isSome);\n//     expect(storageData.length).toEqual(keepMetaFor.length + essential.length);\n//     const modulesNameRecieved = storageData.map(value => value.name.toString().toLowerCase());\n//     const modulesNameExpected = keepMetaFor.concat(essential).map(value => value.toLowerCase());\n//     expect(modulesNameRecieved.sort()).toEqual(modulesNameExpected.sort());\n//     done();\n//   });\n// });\n"],"version":3}