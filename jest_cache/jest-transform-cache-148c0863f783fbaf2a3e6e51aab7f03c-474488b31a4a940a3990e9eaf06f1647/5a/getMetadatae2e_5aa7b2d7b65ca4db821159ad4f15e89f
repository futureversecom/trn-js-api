524a4cc05290ff9545cdcbc923471360
"use strict";
// // Copyright 2019-2021 Centrality Investments Limited
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//
// import {getMetadata, essential} from "../../src/util/getMetadata";
// import {TypeRegistry} from "@polkadot/types/create";
// import {MetadataVersioned} from "@polkadot/types/metadata/MetadataVersioned";
//
// describe('getMetadata()',  () => {
//   it('get slim metadata for endpoint', async (done)=> {
//     const slimMetadata = await getMetadata('ws://localhost:9944');
//     const metadataKey = Object.entries(slimMetadata)[0][0].split('-');
//     const metadataValue = Object.entries(slimMetadata)[0][1];
//     expect(metadataKey[1]).toEqual("58");
//     const registry = new TypeRegistry();
//     const mVersionedSlim = new MetadataVersioned(registry, metadataValue);
//     const modules = mVersionedSlim.asLatest.pallets.toArray();
//     const storageData = modules.filter(m => m.storage.isSome);
//     expect(storageData.length).toEqual(essential.length);
//     const modulesName = storageData.map(value => value.name.toString().toLowerCase());
//     expect(modulesName.sort()).toEqual(essential.sort());
//     done();
//   });
//
//   it('get custom metadata for endpoint, with the list of metadata expected', async (done)=> {
//     const keepMetaFor = ['Staking']
//     const slimMetadata = await getMetadata('ws://localhost:9944', keepMetaFor);
//     const metadataKey = Object.entries(slimMetadata)[0][0].split('-');
//     const metadataValue = Object.entries(slimMetadata)[0][1];
//     expect(metadataKey[1]).toEqual("58");
//     const registry = new TypeRegistry();
//     const mVersionedSlim = new MetadataVersioned(registry, metadataValue);
//     const modules = mVersionedSlim.asLatest.pallets.toArray();
//     const storageData = modules.filter(m => m.storage.isSome);
//     expect(storageData.length).toEqual(keepMetaFor.length + essential.length);
//     const modulesNameRecieved = storageData.map(value => value.name.toString().toLowerCase());
//     const modulesNameExpected = keepMetaFor.concat(essential).map(value => value.toLowerCase());
//     expect(modulesNameRecieved.sort()).toEqual(modulesNameExpected.sort());
//     done();
//   });
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9nZXRNZXRhZGF0YS5lMmUudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHdEQUF3RDtBQUN4RCxLQUFLO0FBQ0wscUVBQXFFO0FBQ3JFLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDN0MsS0FBSztBQUNMLG9EQUFvRDtBQUNwRCxLQUFLO0FBQ0wseUVBQXlFO0FBQ3pFLHVFQUF1RTtBQUN2RSw4RUFBOEU7QUFDOUUseUVBQXlFO0FBQ3pFLG9DQUFvQztBQUNwQyxFQUFFO0FBQ0YscUVBQXFFO0FBQ3JFLHVEQUF1RDtBQUN2RCxnRkFBZ0Y7QUFDaEYsRUFBRTtBQUNGLHFDQUFxQztBQUNyQywwREFBMEQ7QUFDMUQscUVBQXFFO0FBQ3JFLHlFQUF5RTtBQUN6RSxnRUFBZ0U7QUFDaEUsNENBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyw2RUFBNkU7QUFDN0UsaUVBQWlFO0FBQ2pFLGlFQUFpRTtBQUNqRSw0REFBNEQ7QUFDNUQseUZBQXlGO0FBQ3pGLDREQUE0RDtBQUM1RCxjQUFjO0FBQ2QsUUFBUTtBQUNSLEVBQUU7QUFDRixnR0FBZ0c7QUFDaEcsc0NBQXNDO0FBQ3RDLGtGQUFrRjtBQUNsRix5RUFBeUU7QUFDekUsZ0VBQWdFO0FBQ2hFLDRDQUE0QztBQUM1QywyQ0FBMkM7QUFDM0MsNkVBQTZFO0FBQzdFLGlFQUFpRTtBQUNqRSxpRUFBaUU7QUFDakUsaUZBQWlGO0FBQ2pGLGlHQUFpRztBQUNqRyxtR0FBbUc7QUFDbkcsOEVBQThFO0FBQzlFLGNBQWM7QUFDZCxRQUFRO0FBQ1IsTUFBTSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2FyaXNobWEvd29yay9mdXR1cmV2ZXJzZS90cm4tcm9vdG5ldC1hcGkvcGFja2FnZXMvYXBpL3Rlc3QvZTJlL2dldE1ldGFkYXRhLmUyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvLyBDb3B5cmlnaHQgMjAxOS0yMDIxIENlbnRyYWxpdHkgSW52ZXN0bWVudHMgTGltaXRlZFxuLy8gLy9cbi8vIC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyAvLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyAvLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vIC8vXG4vLyAvLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLyAvL1xuLy8gLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyAvLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyAvLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG4vLyBpbXBvcnQge2dldE1ldGFkYXRhLCBlc3NlbnRpYWx9IGZyb20gXCIuLi8uLi9zcmMvdXRpbC9nZXRNZXRhZGF0YVwiO1xuLy8gaW1wb3J0IHtUeXBlUmVnaXN0cnl9IGZyb20gXCJAcG9sa2Fkb3QvdHlwZXMvY3JlYXRlXCI7XG4vLyBpbXBvcnQge01ldGFkYXRhVmVyc2lvbmVkfSBmcm9tIFwiQHBvbGthZG90L3R5cGVzL21ldGFkYXRhL01ldGFkYXRhVmVyc2lvbmVkXCI7XG4vL1xuLy8gZGVzY3JpYmUoJ2dldE1ldGFkYXRhKCknLCAgKCkgPT4ge1xuLy8gICBpdCgnZ2V0IHNsaW0gbWV0YWRhdGEgZm9yIGVuZHBvaW50JywgYXN5bmMgKGRvbmUpPT4ge1xuLy8gICAgIGNvbnN0IHNsaW1NZXRhZGF0YSA9IGF3YWl0IGdldE1ldGFkYXRhKCd3czovL2xvY2FsaG9zdDo5OTQ0Jyk7XG4vLyAgICAgY29uc3QgbWV0YWRhdGFLZXkgPSBPYmplY3QuZW50cmllcyhzbGltTWV0YWRhdGEpWzBdWzBdLnNwbGl0KCctJyk7XG4vLyAgICAgY29uc3QgbWV0YWRhdGFWYWx1ZSA9IE9iamVjdC5lbnRyaWVzKHNsaW1NZXRhZGF0YSlbMF1bMV07XG4vLyAgICAgZXhwZWN0KG1ldGFkYXRhS2V5WzFdKS50b0VxdWFsKFwiNThcIik7XG4vLyAgICAgY29uc3QgcmVnaXN0cnkgPSBuZXcgVHlwZVJlZ2lzdHJ5KCk7XG4vLyAgICAgY29uc3QgbVZlcnNpb25lZFNsaW0gPSBuZXcgTWV0YWRhdGFWZXJzaW9uZWQocmVnaXN0cnksIG1ldGFkYXRhVmFsdWUpO1xuLy8gICAgIGNvbnN0IG1vZHVsZXMgPSBtVmVyc2lvbmVkU2xpbS5hc0xhdGVzdC5wYWxsZXRzLnRvQXJyYXkoKTtcbi8vICAgICBjb25zdCBzdG9yYWdlRGF0YSA9IG1vZHVsZXMuZmlsdGVyKG0gPT4gbS5zdG9yYWdlLmlzU29tZSk7XG4vLyAgICAgZXhwZWN0KHN0b3JhZ2VEYXRhLmxlbmd0aCkudG9FcXVhbChlc3NlbnRpYWwubGVuZ3RoKTtcbi8vICAgICBjb25zdCBtb2R1bGVzTmFtZSA9IHN0b3JhZ2VEYXRhLm1hcCh2YWx1ZSA9PiB2YWx1ZS5uYW1lLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSk7XG4vLyAgICAgZXhwZWN0KG1vZHVsZXNOYW1lLnNvcnQoKSkudG9FcXVhbChlc3NlbnRpYWwuc29ydCgpKTtcbi8vICAgICBkb25lKCk7XG4vLyAgIH0pO1xuLy9cbi8vICAgaXQoJ2dldCBjdXN0b20gbWV0YWRhdGEgZm9yIGVuZHBvaW50LCB3aXRoIHRoZSBsaXN0IG9mIG1ldGFkYXRhIGV4cGVjdGVkJywgYXN5bmMgKGRvbmUpPT4ge1xuLy8gICAgIGNvbnN0IGtlZXBNZXRhRm9yID0gWydTdGFraW5nJ11cbi8vICAgICBjb25zdCBzbGltTWV0YWRhdGEgPSBhd2FpdCBnZXRNZXRhZGF0YSgnd3M6Ly9sb2NhbGhvc3Q6OTk0NCcsIGtlZXBNZXRhRm9yKTtcbi8vICAgICBjb25zdCBtZXRhZGF0YUtleSA9IE9iamVjdC5lbnRyaWVzKHNsaW1NZXRhZGF0YSlbMF1bMF0uc3BsaXQoJy0nKTtcbi8vICAgICBjb25zdCBtZXRhZGF0YVZhbHVlID0gT2JqZWN0LmVudHJpZXMoc2xpbU1ldGFkYXRhKVswXVsxXTtcbi8vICAgICBleHBlY3QobWV0YWRhdGFLZXlbMV0pLnRvRXF1YWwoXCI1OFwiKTtcbi8vICAgICBjb25zdCByZWdpc3RyeSA9IG5ldyBUeXBlUmVnaXN0cnkoKTtcbi8vICAgICBjb25zdCBtVmVyc2lvbmVkU2xpbSA9IG5ldyBNZXRhZGF0YVZlcnNpb25lZChyZWdpc3RyeSwgbWV0YWRhdGFWYWx1ZSk7XG4vLyAgICAgY29uc3QgbW9kdWxlcyA9IG1WZXJzaW9uZWRTbGltLmFzTGF0ZXN0LnBhbGxldHMudG9BcnJheSgpO1xuLy8gICAgIGNvbnN0IHN0b3JhZ2VEYXRhID0gbW9kdWxlcy5maWx0ZXIobSA9PiBtLnN0b3JhZ2UuaXNTb21lKTtcbi8vICAgICBleHBlY3Qoc3RvcmFnZURhdGEubGVuZ3RoKS50b0VxdWFsKGtlZXBNZXRhRm9yLmxlbmd0aCArIGVzc2VudGlhbC5sZW5ndGgpO1xuLy8gICAgIGNvbnN0IG1vZHVsZXNOYW1lUmVjaWV2ZWQgPSBzdG9yYWdlRGF0YS5tYXAodmFsdWUgPT4gdmFsdWUubmFtZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpO1xuLy8gICAgIGNvbnN0IG1vZHVsZXNOYW1lRXhwZWN0ZWQgPSBrZWVwTWV0YUZvci5jb25jYXQoZXNzZW50aWFsKS5tYXAodmFsdWUgPT4gdmFsdWUudG9Mb3dlckNhc2UoKSk7XG4vLyAgICAgZXhwZWN0KG1vZHVsZXNOYW1lUmVjaWV2ZWQuc29ydCgpKS50b0VxdWFsKG1vZHVsZXNOYW1lRXhwZWN0ZWQuc29ydCgpKTtcbi8vICAgICBkb25lKCk7XG4vLyAgIH0pO1xuLy8gfSk7XG4iXSwidmVyc2lvbiI6M30=