2904a9df2547ac647fcf01c61824aeb4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import { Api } from '../../src/Api';
// import staticMetadata from '../../src/staticMetadata';
// import config from '../../../../config';
// import { Metadata } from '@polkadot/types/metadata';
// import {SubmittableResult} from "@polkadot/api";
const keyring_1 = require("@polkadot/keyring");
// import { cryptoWaitReady } from '@polkadot/util-crypto';
// import {WsProvider} from "@polkadot/rpc-provider";
// import ExtrinsicPayload from "@cennznet/types/interfaces/extrinsic/v1/ExtrinsicPayload";
//
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
const keyring = new keyring_1.Keyring({ type: "ethereum" });
//
describe('e2e api create', () => {
    let alice, bob;
    beforeAll(async () => {
        alice = keyring.addFromUri('//Alice');
        bob = keyring.addFromUri('//Bob');
    });
    it('Find lock balance for rootnet validator', async () => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const rootAssetId = 1;
        const validator = "0x0Fa787f51333D9cA66a4A6563b56EececDA49a06";
        const lockBalance = await api.query.balances.locks(rootAssetId, validator);
        expect((lockBalance.toJSON())[0].amount).toBeGreaterThanOrEqual(0);
        await api.disconnect();
    });
    it('Should get rejected if the connection fails', async (done) => {
        const incorrectEndPoint = 'wss://unknow.chain.io/ws';
        const autoConnect = false;
        const provider = new api_1.WsProvider(incorrectEndPoint);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider: provider }));
        await expect(api.isReady).rejects.toThrow('Timed out in 10000 ms.');
        done();
    });
    it('subscription test', async (done) => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {
            console.log(`Chain is at block: #${header.number}`);
            expect(header.number).toBeDefined();
            unsubscribe();
            api.disconnect();
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyIsIm1hcHBpbmdzIjoiOztBQWVBLHVDQUF1QztBQUN2Qyx5REFBeUQ7QUFDekQsMkNBQTJDO0FBQzNDLHVEQUF1RDtBQUN2RCxtREFBbUQ7QUFDbkQsK0NBQXlEO0FBQ3pELDJEQUEyRDtBQUMzRCxxREFBcUQ7QUFDckQsMkZBQTJGO0FBQzNGLEVBQUU7QUFDRix1Q0FBdUQ7QUFDdkQsNkNBQThDO0FBQzlDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELEVBQUU7QUFDRixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksS0FBSyxFQUFFLEdBQUcsQ0FBQztJQUVmLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyRCxNQUFNLFdBQVcsR0FBRyw0QkFBNEIsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxnQkFBVSxDQUFDLElBQUEsYUFBTyxFQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUNsQixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDeEIsTUFBTSxTQUFTLEdBQUcsNENBQTRDLENBQUM7UUFDL0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssRUFBQyxJQUFJLEVBQUMsRUFBRTtRQUM3RCxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO1FBQ3JELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLGdCQUFVLENBQUMsSUFBQSxhQUFPLEVBQUMsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEUsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUMsSUFBSSxFQUFDLEVBQUU7UUFDakMsTUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ25FLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEMsV0FBVyxFQUFFLENBQUM7WUFDZCxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDakIsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvLyBDb3B5cmlnaHQgMjAxOS0yMDIwIENlbnRyYWxpdHkgSW52ZXN0bWVudHMgTGltaXRlZFxuLy8gLy9cbi8vIC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyAvLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyAvLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vIC8vXG4vLyAvLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLyAvL1xuLy8gLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyAvLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyAvLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5pbXBvcnQge2hleFRvVThhLCBzdHJpbmdUb1U4YSwgdThhQ29uY2F0fSBmcm9tIFwiQHBvbGthZG90L3V0aWxcIjtcbi8vIGltcG9ydCB7IEFwaSB9IGZyb20gJy4uLy4uL3NyYy9BcGknO1xuLy8gaW1wb3J0IHN0YXRpY01ldGFkYXRhIGZyb20gJy4uLy4uL3NyYy9zdGF0aWNNZXRhZGF0YSc7XG4vLyBpbXBvcnQgY29uZmlnIGZyb20gJy4uLy4uLy4uLy4uL2NvbmZpZyc7XG4vLyBpbXBvcnQgeyBNZXRhZGF0YSB9IGZyb20gJ0Bwb2xrYWRvdC90eXBlcy9tZXRhZGF0YSc7XG4vLyBpbXBvcnQge1N1Ym1pdHRhYmxlUmVzdWx0fSBmcm9tIFwiQHBvbGthZG90L2FwaVwiO1xuaW1wb3J0IHtlbmNvZGVBZGRyZXNzLCBLZXlyaW5nfSBmcm9tICdAcG9sa2Fkb3Qva2V5cmluZyc7XG4vLyBpbXBvcnQgeyBjcnlwdG9XYWl0UmVhZHkgfSBmcm9tICdAcG9sa2Fkb3QvdXRpbC1jcnlwdG8nO1xuLy8gaW1wb3J0IHtXc1Byb3ZpZGVyfSBmcm9tIFwiQHBvbGthZG90L3JwYy1wcm92aWRlclwiO1xuLy8gaW1wb3J0IEV4dHJpbnNpY1BheWxvYWQgZnJvbSBcIkBjZW5uem5ldC90eXBlcy9pbnRlcmZhY2VzL2V4dHJpbnNpYy92MS9FeHRyaW5zaWNQYXlsb2FkXCI7XG4vL1xuaW1wb3J0IHsgQXBpUHJvbWlzZSwgV3NQcm92aWRlciB9IGZyb20gJ0Bwb2xrYWRvdC9hcGknO1xuaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gJ0B0aGVyb290bmV0d29yay9hcGknO1xuY29uc3Qga2V5cmluZyA9IG5ldyBLZXlyaW5nKHsgdHlwZTogXCJldGhlcmV1bVwiIH0pO1xuLy9cbmRlc2NyaWJlKCdlMmUgYXBpIGNyZWF0ZScsICgpID0+IHtcbiAgbGV0IGFsaWNlLCBib2I7XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhbGljZSA9IGtleXJpbmcuYWRkRnJvbVVyaSgnLy9BbGljZScpO1xuICAgIGJvYiA9IGtleXJpbmcuYWRkRnJvbVVyaSgnLy9Cb2InKTtcbiAgfSk7XG5cbiAgaXQoJ0ZpbmQgbG9jayBiYWxhbmNlIGZvciByb290bmV0IHZhbGlkYXRvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyVXJsID0gJ3dzczovL3Jvb3Qucm9vdG5ldC5saXZlL3dzJztcbiAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFdzUHJvdmlkZXIocHJvdmlkZXJVcmwpO1xuICAgICAgY29uc29sZS5sb2coJ3Byb3ZpZGVyVXJsJywgcHJvdmlkZXJVcmwpO1xuICAgICAgY29uc3QgYXBpID0gbmV3IEFwaVByb21pc2Uob3B0aW9ucyh7IHByb3ZpZGVyIH0pKTtcbiAgICAgIGF3YWl0IGFwaS5pc1JlYWR5O1xuICAgICAgY29uc3Qgcm9vdEFzc2V0SWQgPSAxO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IFwiMHgwRmE3ODdmNTEzMzNEOWNBNjZhNEE2NTYzYjU2RWVjZWNEQTQ5YTA2XCI7XG4gICAgY29uc3QgbG9ja0JhbGFuY2UgPSBhd2FpdCBhcGkucXVlcnkuYmFsYW5jZXMubG9ja3Mocm9vdEFzc2V0SWQsIHZhbGlkYXRvcik7XG4gICAgZXhwZWN0KChsb2NrQmFsYW5jZS50b0pTT04oKSlbMF0uYW1vdW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgIGF3YWl0IGFwaS5kaXNjb25uZWN0KCk7XG4gIH0pO1xuXG4gIGl0KCdTaG91bGQgZ2V0IHJlamVjdGVkIGlmIHRoZSBjb25uZWN0aW9uIGZhaWxzJywgYXN5bmMgZG9uZSA9PiB7XG4gICAgY29uc3QgaW5jb3JyZWN0RW5kUG9pbnQgPSAnd3NzOi8vdW5rbm93LmNoYWluLmlvL3dzJztcbiAgICBjb25zdCBhdXRvQ29ubmVjdCA9IGZhbHNlO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFdzUHJvdmlkZXIoaW5jb3JyZWN0RW5kUG9pbnQpO1xuICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoe3Byb3ZpZGVyOiBwcm92aWRlcn0pKTtcbiAgICBhd2FpdCBleHBlY3QoYXBpLmlzUmVhZHkpLnJlamVjdHMudG9UaHJvdygnVGltZWQgb3V0IGluIDEwMDAwIG1zLicpO1xuICAgIGRvbmUoKTtcbiAgfSk7XG5cbiAgaXQoJ3N1YnNjcmlwdGlvbiB0ZXN0JywgYXN5bmMgZG9uZSA9PiB7XG4gICAgICBjb25zdCBwcm92aWRlclVybCA9ICd3c3M6Ly9yb290LnJvb3RuZXQubGl2ZS93cyc7XG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBXc1Byb3ZpZGVyKHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdwcm92aWRlclVybCcsIHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoeyBwcm92aWRlciB9KSk7XG4gICAgICBhd2FpdCBhcGkuaXNSZWFkeTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGF3YWl0IGFwaS5ycGMuY2hhaW4uc3Vic2NyaWJlTmV3SGVhZHMoKGhlYWRlcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coYENoYWluIGlzIGF0IGJsb2NrOiAjJHtoZWFkZXIubnVtYmVyfWApO1xuICAgICAgZXhwZWN0KGhlYWRlci5udW1iZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgYXBpLmRpc2Nvbm5lY3QoKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==