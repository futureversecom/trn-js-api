8eae65fd1c44407cc4c89f156e21360b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import type { FrameSystemEventRecord } from '@therootnetwork/types/lookup';
const api_1 = require("@polkadot/api");
// import { WsProvider } from '@polkadot/rpc-provider';
const api_2 = require("@therootnetwork/api");
// import { Api as ApiPromise } from '../packages/api/src/Api';
describe('e2e api calls', () => {
    let api;
    let blockHash;
    beforeAll(async () => {
        const providerUrl = 'wss://porcini.rootnet.app/archive/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        blockHash = await api.rpc.chain.getBlockHash();
    });
    afterAll(async (done) => {
        if (api) {
            return await api.disconnect();
        }
        api = null;
        done();
    });
    it('Get correct block', async () => {
        const block = await api.rpc.chain.getBlock(blockHash).then((r) => r.block);
        expect(block.header.hash.toString()).toEqual(blockHash.toString());
    });
    it('Get correct validators', async () => {
        const validators = (await api.query.session.validators.at(blockHash));
        expect(validators.length).toBeGreaterThan(0);
    });
    it('Expect author is in validators', async () => {
        const block = await api.rpc.chain.getBlock(blockHash).then((r) => r.block);
        const header = block.header;
        const validators = (await api.query.session.validators.at(blockHash));
        console.log('validators:', validators);
        // const extHeader = createHeaderExtended(api.registry, header, validators);
        // const author: AccountId = extHeader.author;
        // expect(validators).toEqual(expect.arrayContaining([expect.objectContaining(author)]));
    });
    it('Expect at least one event', async () => {
        const events = (await api.query.system.events.at(blockHash));
        expect(events.length).toBeGreaterThan(0);
    });
    describe('Get session info', () => {
        it('Get correct session information (length, last length, era, current index, session per era', async () => {
            const currentSession = await api.derive.session.info();
            expect(currentSession.currentEra.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.currentIndex.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.eraLength.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.isEpoch).toBe(true);
            expect(currentSession.sessionLength.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.sessionsPerEra.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.validatorCount.toNumber()).toBeGreaterThanOrEqual(0);
        });
    });
    describe('Get core asset id', () => {
        it('Get correct spending asset id', async () => {
            const spendingAssetId = (await api.query.genericAsset.spendingAssetId.at(blockHash));
            expect(spendingAssetId.gtn(0)).toBeTruthy();
        });
        it('Get correct staking asset id', async () => {
            const stakingAssetId = (await api.query.genericAsset.stakingAssetId.at(blockHash));
            expect(stakingAssetId.gtn(0)).toBeTruthy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,