{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rxapi.queries.e2e.ts","mappings":";AAAA,wDAAwD;AACxD,KAAK;AACL,qEAAqE;AACrE,sEAAsE;AACtE,6CAA6C;AAC7C,KAAK;AACL,oDAAoD;AACpD,KAAK;AACL,yEAAyE;AACzE,uEAAuE;AACvE,8EAA8E;AAC9E,yEAAyE;AACzE,oCAAoC;AACpC,EAAE;AACF,0CAA0C;AAC1C,wCAAwC;AACxC,8CAA8C;AAC9C,sDAAsD;AACtD,EAAE;AACF,kCAAkC;AAClC,eAAe;AACf,aAAa;AACb,EAAE;AACF,4BAA4B;AAC5B,iCAAiC;AACjC,qCAAqC;AACrC,QAAQ;AACR,EAAE;AACF,6BAA6B;AAC7B,kBAAkB;AAClB,cAAc;AACd,QAAQ;AACR,EAAE;AACF,+CAA+C;AAC/C,oDAAoD;AACpD,2CAA2C;AAC3C,0BAA0B;AAC1B,mGAAmG;AACnG,wHAAwH;AACxH,4EAA4E;AAC5E,kBAAkB;AAClB,YAAY;AACZ,UAAU;AACV,QAAQ;AACR,MAAM","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rxapi.queries.e2e.ts"],"sourcesContent":["// // Copyright 2019-2020 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import { Hash } from '@cennznet/types';\n// import { combineLatest } from 'rxjs';\n// import { switchMap } from 'rxjs/operators';\n// import initApiRx from '../../../../jest/initApiRx';\n//\n// describe('e2e queries', () => {\n//   let apiRx;\n//   let api;\n//\n//   beforeAll(async () => {\n//     apiRx = await initApiRx();\n//     api = await apiRx.toPromise();\n//   });\n//\n//   afterAll(async done => {\n//     api = null;\n//     done();\n//   });\n//\n//   describe('Query storage using at', () => {\n//     it('Queries correct balance', async done => {\n//       const nextAssetId$ = api.rpc.chain\n//         .getBlockHash()\n//         .pipe(switchMap(blockHash => api.query.genericAsset.nextAssetId.at(blockHash as Hash)));\n//       combineLatest(api.query.genericAsset.nextAssetId(), nextAssetId$).subscribe(([nextAssetId, nextAssetIdAt]) => {\n//         expect(nextAssetId.toString()).toEqual(nextAssetIdAt.toString());\n//         done();\n//       });\n//     });\n//   });\n// });\n"],"version":3}