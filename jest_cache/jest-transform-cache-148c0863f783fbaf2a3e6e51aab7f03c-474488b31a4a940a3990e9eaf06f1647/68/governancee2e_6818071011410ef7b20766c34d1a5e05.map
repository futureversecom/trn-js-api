{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/governance.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/governance.e2e.ts"],"sourcesContent":["// // Copyright 2020-2021 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import { Keyring } from '@polkadot/keyring';\n// import { cryptoWaitReady } from '@polkadot/util-crypto';\n// import { u8aToString } from '@polkadot/util'\n//\n// import initApiPromise from '../../../../jest/initApiPromise';\n// import { AccountId, Vec } from '@cennznet/types';\n// import {DeriveProposalInfo} from \"@cennznet/api/derives/governance/types\";\n//\n// let api;\n// const keyring = new Keyring({ type: 'sr25519' });\n// let councilMemberAlice, councilMemberBob, councilMemberCharlie, councilMemberDave;\n//\n// beforeAll(async done => {\n//   await cryptoWaitReady();\n//   api = await initApiPromise();\n//   const sudoKey = await api.query.sudo.key();\n//   // alice is sudo\n//   councilMemberAlice = keyring.addFromUri('//Alice');\n//   councilMemberDave = keyring.addFromUri('//Dave');\n//   councilMemberBob = keyring.addFromUri('//Bob');\n//   councilMemberCharlie = keyring.addFromUri('//Charlie');\n//   // Lookup from keyring (assuming we have added all, on --dev this would be `//Alice`)\n//   const sudoPair = keyring.getPair(sudoKey.toString());\n//\n//   const transaction1 = api.tx.governance.addCouncilMember(councilMemberAlice.address);\n//   const transaction2 = api.tx.governance.addCouncilMember(councilMemberBob.address);\n//   const transaction3 = api.tx.governance.addCouncilMember(councilMemberCharlie.address);\n//   const transaction4 = api.tx.governance.addCouncilMember(councilMemberDave.address);\n//\n//   const batchCouncilEx = api.tx.utility.batch([\n//     transaction1,\n//     transaction2,\n//     transaction3,\n//     transaction4\n//   ]);\n//\n//   await api.tx.sudo\n//     .sudo(batchCouncilEx)\n//     .signAndSend(sudoPair, async ({ events, status }) => {\n//       if (status.isInBlock) {\n//         for (const {event: {method, section, data}} of events) {\n//           console.log('Method:', method.toString());\n//           console.log('section:', section.toString());\n//         }\n//         console.log(`Transaction included at blockHash ${status.asInBlock}`);\n//         done();\n//       }\n//     });\n//\n// });\n//\n// afterAll(async () => {\n//   await api.disconnect();\n// });\n//\n// describe.skip('Governance', () => {\n//\n//   it('List all council members', async done => {\n//     const councilMembers: Vec<AccountId> = await api.query.governance.council();\n//     console.log('Councilmemmbers::....', councilMembers.toJSON());\n//     const members: string[] = councilMembers.toJSON() as unknown as string[];\n//     expect(members.includes(councilMemberBob.address)).toBeTruthy();\n//     expect(members.includes(councilMemberAlice.address)).toBeTruthy();\n//     expect(members.includes(councilMemberCharlie.address)).toBeTruthy();\n//     expect(members.includes(councilMemberDave.address)).toBeTruthy();\n//     done();\n//   });\n//\n//   it('creates a proposal to add new council member', async done => {\n//     const newCouncilMember = '5FWEHQqYMN8YCg8yJxKHnon7Dtx4Psp2xnjvKfQqGC6kUwgv';\n//     const call = api.tx.governance.addCouncilMember(newCouncilMember);\n//     const proposalCall = api.registry.createType('Call', call).toHex();\n//     const justificationUri = 'https://example.com/nft/metadata'\n//     const enactmentDelay = 26; // execute after 26 blocks once sufficient votes criteria is met\n//     await api.tx.governance.submitProposal(\n//       proposalCall,\n//       justificationUri,\n//       enactmentDelay, // execute after 2\n//     ).signAndSend(councilMemberBob, async ({ status, events }) => {\n//       if (status.isInBlock) {\n//         events.forEach(({phase, event: {data, method, section}}) => {\n//           console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n//         });\n//         expect((await api.query.governance.proposalCalls(0)).toString()).toBe(proposalCall);\n//         const proposalOpt = await api.query.governance.proposals(0);\n//         const proposal = proposalOpt.unwrap();\n//         expect(proposal.sponsor.toString()).toEqual(councilMemberBob.address);\n//         expect(u8aToString(proposal.justificationUri)).toEqual(justificationUri);\n//         expect(proposal.enactmentDelay.toString()).toEqual(enactmentDelay.toString());\n//         done();\n//       }\n//     });\n//   });\n//\n//   it('vote for proposal 0 to add new council member by a valid council member', async done => {\n//     const proposalId = 0;\n//     const vote = true;\n//     await api.tx.governance.voteOnProposal(\n//       proposalId,\n//       vote\n//     ).signAndSend(councilMemberCharlie, async ({ status, events }) => {\n//       if (status.isInBlock) {\n//         events.forEach(({phase, event: {data, method, section}}) => {\n//           console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n//         });\n//         const votesFetched = await api.rpc.governance.getProposalVotes();\n//         console.log('votes fetched::')\n//         const votes = votesFetched.toJSON().find((vote: { proposalId: number; }) => vote.proposalId === proposalId)?.votes;\n//         const charlieVoted = votes.find(vote => vote[0] === councilMemberCharlie.address && vote[1] === true);\n//         console.log('Charlie voted::',charlieVoted);\n//         expect(charlieVoted).toBeDefined();\n//         done();\n//       }\n//     });\n//   });\n//\n//   it('vote for proposal 0 to add new council member by a non council member should fail', async done => {\n//     const nonCouncilMember = keyring.addFromUri('//Ferdie');\n//     const proposalId = 0;\n//     const vote = true;\n//     await api.tx.governance.voteOnProposal(\n//       proposalId,\n//       vote\n//     ).signAndSend(nonCouncilMember, async ({ status, events }) => {\n//       if (status.isInBlock) {\n//         events.forEach(({phase, event: {data, method, section}}) => {\n//           expect(section).toEqual('system');\n//           expect(method).toEqual('ExtrinsicFailed')\n//           console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n//           done();\n//         });\n//       }\n//     });\n//   });\n//\n//   it('List all the proposals and its details', async done => {\n//     const proposalId = 0;\n//     const proposals: DeriveProposalInfo[] = await api.derive.governance.proposals();\n//     const proposal = proposals.find(proposal => proposal.id === proposalId);\n//     const newCouncilMember = '5FWEHQqYMN8YCg8yJxKHnon7Dtx4Psp2xnjvKfQqGC6kUwgv';\n//     const call = api.tx.governance.addCouncilMember(newCouncilMember);\n//     const proposalCall = api.registry.createType('Call', call).toHex();\n//     expect(proposal.id).toEqual(proposalId);\n//     expect(proposal.proposal.call.toString()).toEqual(proposalCall.toString());\n//     expect(proposal.proposal.enactmentDelay).toEqual(26);\n//     expect(proposal.proposal.justificationCid).toEqual('https://example.com/nft/metadata')\n//     const charlieVoted = proposal.votes.find(vote => vote[0] === councilMemberCharlie.address && vote[1] === true);\n//     const bobProposed = proposal.votes.find(vote => vote[0] === councilMemberBob.address && vote[1] === true);\n//     expect(charlieVoted).toBeDefined();\n//     expect(bobProposed).toBeDefined();\n//     done();\n//   });\n//\n// });\n"],"version":3}