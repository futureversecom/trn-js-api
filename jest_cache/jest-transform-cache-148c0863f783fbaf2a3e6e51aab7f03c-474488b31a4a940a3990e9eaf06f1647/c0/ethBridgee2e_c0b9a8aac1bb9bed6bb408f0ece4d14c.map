{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/ethBridge.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/ethBridge.e2e.ts"],"sourcesContent":["// import { awaitDepositClaim, ClaimDeposited, extractEthereumSignature } from \"@cennznet/api/util/helper\";\n// import { encodeAddress } from \"@polkadot/util-crypto\";\n// import { Keyring } from '@polkadot/keyring';\n// import { cryptoWaitReady } from '@polkadot/util-crypto';\n// import {AssetId, Balance, EventClaimId} from \"@cennznet/types\";\n// import initApiPromise from '../../../../jest/initApiPromise';\n// import {Api} from \"@cennznet/api\";\n//\ndescribe('Eth bridge test', () => {});\n//   let api, alice, aliceStash, bob, testTokenId1, testTokenId2;\n//\n//   beforeAll(async done => {\n//     await cryptoWaitReady();\n//     const keyring = new Keyring({type: 'sr25519'});\n//     alice = keyring.addFromUri('//Alice');\n//     aliceStash = keyring.addFromUri('//Alice//stash')\n//     bob = keyring.addFromUri('//Bob');\n//     api = await initApiPromise();\n//     const transaction1 = api.tx.erc20Peg.activateDeposits(true);\n//     const transaction2 = api.tx.erc20Peg.activateWithdrawals(true);\n//     const transaction3 = api.tx.erc20Peg.setContractAddress('0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512');\n//     const transaction4 = api.tx.ethBridge.setEventConfirmations(0); // Hardhat only makes blocks when txs are sent\n//     const batchBridgeActivationEx = api.tx.utility.batch([\n//       transaction1,\n//       transaction2,\n//       transaction3,\n//       transaction4\n//     ]);\n//\n//     await api.tx.sudo.sudo(batchBridgeActivationEx).signAndSend(alice, async ({status, events}) => {\n//       if (status.isInBlock) {\n//         events.forEach(({phase, event: {data, method, section}}) => {\n//           console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n//         });\n//         done();\n//       }\n//     });\n//   });\n//\n//   afterAll(async () => {\n//     await api.disconnect();\n//   });\n//\n//   describe('Eth bridge claims', () => {\n//\n//     it('Submit claim for test token 1 from BridgeTest account', async done => {\n//       const depositTxHash = \"0xcac398ef5a9ae1e3217954212b1059e9bbe788897ba714950ab4d63a2434137f\";\n//       testTokenId1 = await api.query.genericAsset.nextAssetId();\n//       const depositAmount = \"1423\";\n//       const beneficiaryAcc = \"0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10\";\n//       const claim = {\n//         tokenAddress: \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\",\n//         amount: depositAmount,\n//         beneficiary: beneficiaryAcc\n//       };\n//       console.log('New token generated will be::',testTokenId1.toString());\n//       const depositClaimEvent: ClaimDeposited = await awaitDepositClaim(api, depositTxHash, claim, alice) as ClaimDeposited;\n//\n//       const beneficiaryAddress = encodeAddress(beneficiaryAcc, 42); // convert public key to address\n//\n//       const {claimId, assetId, amount, beneficiary} = depositClaimEvent;\n//       expect(claimId).toBeGreaterThanOrEqual(0);\n//       expect(assetId).toEqual(testTokenId1.toString());\n//       expect(amount).toEqual(depositAmount);\n//       expect(beneficiary).toEqual(beneficiaryAddress);\n//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId1.toNumber(), beneficiaryAddress);\n//       expect(assetBalance.toString()).toBe(depositAmount);\n//       done();\n//   });\n//\n//   it('Submit a wrong claim ', async done => {\n//       const depositTxHash = \"0x028a721fcfd6ffa48e1095294bc26570f61a1866a57b7e6162ddaebe22871608\";\n//       testTokenId1 = await api.query.genericAsset.nextAssetId();\n//       const depositAmount = \"1423\";\n//       const beneficiaryAcc = \"0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10\";\n//       const claim = {\n//         tokenAddress: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\",\n//         amount: depositAmount,\n//         beneficiary: beneficiaryAcc\n//       };\n//       await expect(awaitDepositClaim(api, depositTxHash, claim, alice)).rejects.toEqual(\n//         'Claim deposition failed');\n//       done();\n//     });\n//\n//     it('Submitting same claim again show fail', async done => {\n//       const depositTxHash = \"0xcac398ef5a9ae1e3217954212b1059e9bbe788897ba714950ab4d63a2434137f\";\n//       testTokenId1 = await api.query.genericAsset.nextAssetId();\n//       const depositAmount = \"1423\";\n//       const beneficiaryAcc = \"0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10\";\n//       const claim = {\n//         tokenAddress: \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\",\n//         amount: depositAmount,\n//         beneficiary: beneficiaryAcc\n//       };\n//       await expect(awaitDepositClaim(api, depositTxHash, claim, alice)).rejects.toEqual(\n//         'Claim already notarized');\n//       done();\n//     });\n//\n//   it('Submit claim for test token 2 from Alice', async done => {\n//     const depositTxHash = \"0x3ff83f651dfd1b9c5958fbd908b02faa5867ce9ee36e669c5e1ee35a524f5ef4\";\n//     const claim = {\n//       tokenAddress: \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\",\n//       amount: \"5644\",\n//         beneficiary: \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\"\n//     };\n//     let nonce = await api.rpc.system.accountNextIndex(alice.address);\n//     await api.tx.erc20Peg.depositClaim(depositTxHash, claim).signAndSend(alice, {nonce}, async ({status, events}) => {\n//       if (status.isInBlock) {\n//         for (const {event: {method, section, data}} of events) {\n//           console.log('\\t', `: ${section}.${method}`, data.toString());\n//           if (section === 'erc20Peg' && method == 'Erc20Claim') {\n//             const [claimId, claimer] = data;\n//             expect((claimId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);\n//             expect(claimer.toString()).toEqual(alice.address);\n//             done();\n//           }\n//         }\n//       }\n//     });\n//   });\n//\n//   it('Submit claim for test token 2 from Bob', async done => {\n//     const depositTxHash = \"0x205193beee5dff848085faaa5b1ef72a9816e1e5020d1c3b616107639313bc9d\";\n//     const claim = {\n//       tokenAddress: \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\",\n//       amount: \"11644\",\n//       beneficiary: \"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48\"\n//     };\n//     let nonce = await api.rpc.system.accountNextIndex(alice.address);\n//     testTokenId2 = await api.query.genericAsset.nextAssetId();\n//     console.log('testTokenId2::',testTokenId2.toString());\n//     await api.tx.erc20Peg.depositClaim(depositTxHash, claim).signAndSend(alice, {nonce}, async ({status, events}) => {\n//       if (status.isInBlock) {\n//         for (const {event: {method, section, data}} of events) {\n//           console.log('\\t', `: ${section}.${method}`, data.toString());\n//           if (section === 'erc20Peg' && method == 'Erc20Claim') {\n//             const [claimId, claimer] = data;\n//             expect((claimId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);\n//             expect(claimer.toString()).toEqual(bob.address);\n//             done();\n//           }\n//         }\n//       }\n//     });\n//   });\n//\n// });\n//\n//   describe('Query storage check claimed tokens', () => {\n//\n//     beforeAll(async done => {\n//\n//     // wait for 4 blocks before checking the storage\n//       let count = 0;\n//\n//       const unsubHeads = await api.rpc.chain.subscribeNewHeads((lastHeader) => {\n//         console.log(`chain: last block #${lastHeader.number} has hash ${lastHeader.hash}`);\n//\n//         api.query.system.events((events) => {\n//           console.log(`\\nReceived ${events.length} events:`);\n//\n//           // loop through the Vec<EventRecord>\n//           events.forEach((record) => {\n//             // extract the phase, event and the event types\n//             const { event, phase } = record;\n//             const types = event.typeDef;\n//\n//             // show what we are busy with\n//             console.log(`\\t${event.section}:${event.method}:: (phase=${phase.toString()})`);\n//             console.log('event.meta::', event.meta);\n//             // console.log(`\\t\\t${event.meta.documentation.toString()}`);\n//\n//             // loop through each of the parameters, displaying the type and data\n//             event.data.forEach((data, index) => {\n//               console.log(`\\t\\t\\t${types[index].type}: ${data.toString()}`);\n//             });\n//           });\n//         });\n//         if (++count === 4) {\n//           unsubHeads();\n//           done();\n//         }\n//       });\n//     });\n//\n//     it('Queries registered assets', async done => {\n//\n//       const registeredAsset = await api.rpc.genericAsset.registeredAssets();\n//       console.log(registeredAsset.toJSON());\n//       const hasTestToken1Asset = ([assetId, meta]) => assetId.toString() === testTokenId1.toString() && meta.decimalPlaces.toString() === '18';\n//       const hasTestToken2Asset = ([assetId, meta]) => assetId.toString() === testTokenId2.toString() && meta.decimalPlaces.toString() === '18';\n//       expect(registeredAsset.some(hasTestToken1Asset)).toBe(true);\n//       expect(registeredAsset.some(hasTestToken2Asset)).toBe(true);\n//       done();\n//     });\n//\n//     it('Queries generic asset balance for test token 2 for Alices account', async done => {\n//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId2.toNumber(), alice.address);\n//       expect(assetBalance.toString()).toBe(\"5644\");\n//       done();\n//     });\n//\n//     it('Queries generic asset balance for test token 2 for Bobs account', async done => {\n//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId2.toNumber(), bob.address);\n//       expect(assetBalance.toString()).toBe(\"11644\");\n//       done();\n//     });\n//\n//     it('Queries totalIssuance for test token 2', async done => {\n//       const totalIssuance = await api.query.genericAsset.totalIssuance(testTokenId2.toNumber());\n//       expect(totalIssuance.toString()).toBe((11644 + 5644).toString());\n//       done();\n//     });\n//\n//   });\n//\n//\n//   describe('Test RPC subscribe to new clain', () => {\n//     it.skip('Subscribe event proof after mock withdraw', async done => {\n//       let nonce = await api.rpc.system.accountNextIndex(alice.address);\n//       await api.tx.erc20Peg.mockWithdraw().signAndSend(alice, {nonce});\n//       await api.tx.erc20Peg.mockWithdraw().signAndSend(aliceStash);\n//       let count = 0;\n//       const unsubHeads = await api.rpc.ethy.subscribeEventProofs((result: any) => {\n//         console.log('data::', result.toHuman());\n//         expect(result.eventId.toNumber()).toBeGreaterThanOrEqual(0);\n//         if (++count === 1) {\n//           unsubHeads();\n//           done();\n//         }\n//       });\n//     });\n//\n//     it('Withdraw claim for test token 2 from Alice', async done => {\n//       let nonce = await api.rpc.system.accountNextIndex(alice.address);\n//       let amount = 5644;\n//       const ethBeneficiary = '0x70997970c51812dc3a010c7d01b50e0d17dc79c8';\n//       await api.tx.erc20Peg.withdraw(testTokenId2, amount, ethBeneficiary,).signAndSend(alice, {nonce}, async ({status, events}) => {\n//         if (status.isInBlock) {\n//           for (const {event: {method, section, data}} of events) {\n//             console.log('\\t', `: ${section}.${method}`, data.toString());\n//             if (section === 'erc20Peg' && method == 'Erc20Withdraw') {\n//               const [withdrawalId, assetId, amountt, beneficiary] = data;\n//               expect((withdrawalId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);\n//               // expect(assetId.toNumber()).toEqual(testTokenId2.toNumber());\n//               expect((amountt as Balance).toNumber()).toEqual(amount);\n//               expect(beneficiary.toString()).toEqual(ethBeneficiary);\n//               done();\n//             }\n//           }\n//         }\n//       });\n//     });\n//\n//     it('Withdraw claim for test token 2 from Bob', async done => {\n//       let nonce = await api.rpc.system.accountNextIndex(bob.address);\n//       let amount = 11644;\n//       const ethBeneficiary = '0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc';\n//       await api.tx.erc20Peg.withdraw(testTokenId2, amount, ethBeneficiary,).signAndSend(bob, {nonce}, async ({status, events}) => {\n//         if (status.isInBlock) {\n//           for (const {event: {method, section, data}} of events) {\n//             console.log('\\t', `: ${section}.${method}`, data.toString());\n//             if (section === 'erc20Peg' && method == 'Erc20Withdraw') {\n//               let count = 0;\n//               const unsubHeads = await api.rpc.ethy.subscribeEventProofs((result: any) => {\n//                 console.log('data::', result.toHuman());\n//                 if (count++ == 1) {\n//                   unsubHeads();\n//                   done();\n//                 }\n//               });\n//               const [withdrawalId, assetId, amountt, beneficiary] = data;\n//               expect((withdrawalId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);\n//               expect((assetId as AssetId).toNumber()).toEqual(testTokenId2.toNumber());\n//               expect((amountt as Balance).toNumber()).toEqual(amount);\n//               expect(beneficiary.toString()).toEqual(ethBeneficiary);\n//             }\n//           }\n//         }\n//       });\n//     });\n//\n//     it( 'Get event id from rpc call', async done => {\n//       api = await Api.create({network: 'rata'});\n//       const versionedEventProof = (await api.rpc.ethy.getEventProof('1')).toJSON();\n//       expect(versionedEventProof.eventProof.eventId.toString()).toEqual('1');\n//\n//       const eventProof = await api.derive.ethBridge.eventProof('2');\n//       console.log('Proof::',eventProof);\n//       expect(eventProof.eventId).toEqual('2');\n//       done();\n//     })\n//\n//     it( 'Get r,s,v from signature', async done => {\n//       const sign = api.registry.createType('EthereumSignature', '0x5e0a108f836af7c7aeb832382f0a237709da037abdac72cc16a8a54b77d2bb946bb8e78fd63af7594650b8d1a033046e3d08ad15a0b648a0473263e51fe70e1b01');\n//       const signatures = [sign];\n//       const { r, s, v } = extractEthereumSignature(signatures);\n//\n//       expect(r[0]).toEqual('0x5e0a108f836af7c7aeb832382f0a237709da037abdac72cc16a8a54b77d2bb94');\n//       expect(s[0]).toEqual('0x6bb8e78fd63af7594650b8d1a033046e3d08ad15a0b648a0473263e51fe70e1b');\n//       expect(v[0]).toEqual(28);\n//\n//       done();\n//     })\n//\n//     it(   'Get r,s,v from invalid signature', async done => {\n//       const sign = api.registry.createType('EthereumSignature', '');\n//       const signatures = [sign];\n//       const { r, s, v } = extractEthereumSignature(signatures);\n//       expect(r).toEqual(['0x0000000000000000000000000000000000000000000000000000000000000000']);\n//       expect(s).toEqual(['0x0000000000000000000000000000000000000000000000000000000000000000']);\n//       expect(v[0]).toEqual(27);\n//\n//       done();\n//     })\n//\n//     // this requires migration\n//     it.skip(   'For rata chain get series metadata URI at collection id 29', async done => {\n//       const provider = 'wss://rata.centrality.me/public/ws';\n//\n//       const apiRata = await Api.create({provider});\n//\n//       const metadataPath = (await apiRata.query.nft.seriesMetadataURI(\n//         29,\n//         0\n//       )).toHuman();\n//       // const tokenId = apiRata.registry.createType('TokenId', [29,0,0]);\n//       //\n//       // const uri = await apiRata.rpc.nft.tokenUri(tokenId);\n//       // console.log('metadataPath::',uri.toHuman());\n//       expect(metadataPath).toEqual(\"ipfs://QmWGYnnapNUT9voEx8gyZBXKsSgmWWQXdkCqRrucQ8qdmx\");\n//       await apiRata.disconnect();\n//       done();\n//     })\n//\n//   })\n// });\n"],"version":3}