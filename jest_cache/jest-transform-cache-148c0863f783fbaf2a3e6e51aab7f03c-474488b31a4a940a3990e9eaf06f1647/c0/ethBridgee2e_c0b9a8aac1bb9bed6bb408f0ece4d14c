a73cad46e953bfd74876443ec4438359
"use strict";
// import { awaitDepositClaim, ClaimDeposited, extractEthereumSignature } from "@cennznet/api/util/helper";
// import { encodeAddress } from "@polkadot/util-crypto";
// import { Keyring } from '@polkadot/keyring';
// import { cryptoWaitReady } from '@polkadot/util-crypto';
// import {AssetId, Balance, EventClaimId} from "@cennznet/types";
// import initApiPromise from '../../../../jest/initApiPromise';
// import {Api} from "@cennznet/api";
//
describe('Eth bridge test', () => { });
//   let api, alice, aliceStash, bob, testTokenId1, testTokenId2;
//
//   beforeAll(async done => {
//     await cryptoWaitReady();
//     const keyring = new Keyring({type: 'sr25519'});
//     alice = keyring.addFromUri('//Alice');
//     aliceStash = keyring.addFromUri('//Alice//stash')
//     bob = keyring.addFromUri('//Bob');
//     api = await initApiPromise();
//     const transaction1 = api.tx.erc20Peg.activateDeposits(true);
//     const transaction2 = api.tx.erc20Peg.activateWithdrawals(true);
//     const transaction3 = api.tx.erc20Peg.setContractAddress('0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512');
//     const transaction4 = api.tx.ethBridge.setEventConfirmations(0); // Hardhat only makes blocks when txs are sent
//     const batchBridgeActivationEx = api.tx.utility.batch([
//       transaction1,
//       transaction2,
//       transaction3,
//       transaction4
//     ]);
//
//     await api.tx.sudo.sudo(batchBridgeActivationEx).signAndSend(alice, async ({status, events}) => {
//       if (status.isInBlock) {
//         events.forEach(({phase, event: {data, method, section}}) => {
//           console.log('\t', phase.toString(), `: ${section}.${method}`, data.toString());
//         });
//         done();
//       }
//     });
//   });
//
//   afterAll(async () => {
//     await api.disconnect();
//   });
//
//   describe('Eth bridge claims', () => {
//
//     it('Submit claim for test token 1 from BridgeTest account', async done => {
//       const depositTxHash = "0xcac398ef5a9ae1e3217954212b1059e9bbe788897ba714950ab4d63a2434137f";
//       testTokenId1 = await api.query.genericAsset.nextAssetId();
//       const depositAmount = "1423";
//       const beneficiaryAcc = "0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10";
//       const claim = {
//         tokenAddress: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
//         amount: depositAmount,
//         beneficiary: beneficiaryAcc
//       };
//       console.log('New token generated will be::',testTokenId1.toString());
//       const depositClaimEvent: ClaimDeposited = await awaitDepositClaim(api, depositTxHash, claim, alice) as ClaimDeposited;
//
//       const beneficiaryAddress = encodeAddress(beneficiaryAcc, 42); // convert public key to address
//
//       const {claimId, assetId, amount, beneficiary} = depositClaimEvent;
//       expect(claimId).toBeGreaterThanOrEqual(0);
//       expect(assetId).toEqual(testTokenId1.toString());
//       expect(amount).toEqual(depositAmount);
//       expect(beneficiary).toEqual(beneficiaryAddress);
//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId1.toNumber(), beneficiaryAddress);
//       expect(assetBalance.toString()).toBe(depositAmount);
//       done();
//   });
//
//   it('Submit a wrong claim ', async done => {
//       const depositTxHash = "0x028a721fcfd6ffa48e1095294bc26570f61a1866a57b7e6162ddaebe22871608";
//       testTokenId1 = await api.query.genericAsset.nextAssetId();
//       const depositAmount = "1423";
//       const beneficiaryAcc = "0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10";
//       const claim = {
//         tokenAddress: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
//         amount: depositAmount,
//         beneficiary: beneficiaryAcc
//       };
//       await expect(awaitDepositClaim(api, depositTxHash, claim, alice)).rejects.toEqual(
//         'Claim deposition failed');
//       done();
//     });
//
//     it('Submitting same claim again show fail', async done => {
//       const depositTxHash = "0xcac398ef5a9ae1e3217954212b1059e9bbe788897ba714950ab4d63a2434137f";
//       testTokenId1 = await api.query.genericAsset.nextAssetId();
//       const depositAmount = "1423";
//       const beneficiaryAcc = "0xacd6118e217e552ba801f7aa8a934ea6a300a5b394e7c3f42cd9d6dd9a457c10";
//       const claim = {
//         tokenAddress: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
//         amount: depositAmount,
//         beneficiary: beneficiaryAcc
//       };
//       await expect(awaitDepositClaim(api, depositTxHash, claim, alice)).rejects.toEqual(
//         'Claim already notarized');
//       done();
//     });
//
//   it('Submit claim for test token 2 from Alice', async done => {
//     const depositTxHash = "0x3ff83f651dfd1b9c5958fbd908b02faa5867ce9ee36e669c5e1ee35a524f5ef4";
//     const claim = {
//       tokenAddress: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
//       amount: "5644",
//         beneficiary: "0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d"
//     };
//     let nonce = await api.rpc.system.accountNextIndex(alice.address);
//     await api.tx.erc20Peg.depositClaim(depositTxHash, claim).signAndSend(alice, {nonce}, async ({status, events}) => {
//       if (status.isInBlock) {
//         for (const {event: {method, section, data}} of events) {
//           console.log('\t', `: ${section}.${method}`, data.toString());
//           if (section === 'erc20Peg' && method == 'Erc20Claim') {
//             const [claimId, claimer] = data;
//             expect((claimId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);
//             expect(claimer.toString()).toEqual(alice.address);
//             done();
//           }
//         }
//       }
//     });
//   });
//
//   it('Submit claim for test token 2 from Bob', async done => {
//     const depositTxHash = "0x205193beee5dff848085faaa5b1ef72a9816e1e5020d1c3b616107639313bc9d";
//     const claim = {
//       tokenAddress: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
//       amount: "11644",
//       beneficiary: "0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48"
//     };
//     let nonce = await api.rpc.system.accountNextIndex(alice.address);
//     testTokenId2 = await api.query.genericAsset.nextAssetId();
//     console.log('testTokenId2::',testTokenId2.toString());
//     await api.tx.erc20Peg.depositClaim(depositTxHash, claim).signAndSend(alice, {nonce}, async ({status, events}) => {
//       if (status.isInBlock) {
//         for (const {event: {method, section, data}} of events) {
//           console.log('\t', `: ${section}.${method}`, data.toString());
//           if (section === 'erc20Peg' && method == 'Erc20Claim') {
//             const [claimId, claimer] = data;
//             expect((claimId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);
//             expect(claimer.toString()).toEqual(bob.address);
//             done();
//           }
//         }
//       }
//     });
//   });
//
// });
//
//   describe('Query storage check claimed tokens', () => {
//
//     beforeAll(async done => {
//
//     // wait for 4 blocks before checking the storage
//       let count = 0;
//
//       const unsubHeads = await api.rpc.chain.subscribeNewHeads((lastHeader) => {
//         console.log(`chain: last block #${lastHeader.number} has hash ${lastHeader.hash}`);
//
//         api.query.system.events((events) => {
//           console.log(`\nReceived ${events.length} events:`);
//
//           // loop through the Vec<EventRecord>
//           events.forEach((record) => {
//             // extract the phase, event and the event types
//             const { event, phase } = record;
//             const types = event.typeDef;
//
//             // show what we are busy with
//             console.log(`\t${event.section}:${event.method}:: (phase=${phase.toString()})`);
//             console.log('event.meta::', event.meta);
//             // console.log(`\t\t${event.meta.documentation.toString()}`);
//
//             // loop through each of the parameters, displaying the type and data
//             event.data.forEach((data, index) => {
//               console.log(`\t\t\t${types[index].type}: ${data.toString()}`);
//             });
//           });
//         });
//         if (++count === 4) {
//           unsubHeads();
//           done();
//         }
//       });
//     });
//
//     it('Queries registered assets', async done => {
//
//       const registeredAsset = await api.rpc.genericAsset.registeredAssets();
//       console.log(registeredAsset.toJSON());
//       const hasTestToken1Asset = ([assetId, meta]) => assetId.toString() === testTokenId1.toString() && meta.decimalPlaces.toString() === '18';
//       const hasTestToken2Asset = ([assetId, meta]) => assetId.toString() === testTokenId2.toString() && meta.decimalPlaces.toString() === '18';
//       expect(registeredAsset.some(hasTestToken1Asset)).toBe(true);
//       expect(registeredAsset.some(hasTestToken2Asset)).toBe(true);
//       done();
//     });
//
//     it('Queries generic asset balance for test token 2 for Alices account', async done => {
//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId2.toNumber(), alice.address);
//       expect(assetBalance.toString()).toBe("5644");
//       done();
//     });
//
//     it('Queries generic asset balance for test token 2 for Bobs account', async done => {
//       const assetBalance = await api.query.genericAsset.freeBalance(testTokenId2.toNumber(), bob.address);
//       expect(assetBalance.toString()).toBe("11644");
//       done();
//     });
//
//     it('Queries totalIssuance for test token 2', async done => {
//       const totalIssuance = await api.query.genericAsset.totalIssuance(testTokenId2.toNumber());
//       expect(totalIssuance.toString()).toBe((11644 + 5644).toString());
//       done();
//     });
//
//   });
//
//
//   describe('Test RPC subscribe to new clain', () => {
//     it.skip('Subscribe event proof after mock withdraw', async done => {
//       let nonce = await api.rpc.system.accountNextIndex(alice.address);
//       await api.tx.erc20Peg.mockWithdraw().signAndSend(alice, {nonce});
//       await api.tx.erc20Peg.mockWithdraw().signAndSend(aliceStash);
//       let count = 0;
//       const unsubHeads = await api.rpc.ethy.subscribeEventProofs((result: any) => {
//         console.log('data::', result.toHuman());
//         expect(result.eventId.toNumber()).toBeGreaterThanOrEqual(0);
//         if (++count === 1) {
//           unsubHeads();
//           done();
//         }
//       });
//     });
//
//     it('Withdraw claim for test token 2 from Alice', async done => {
//       let nonce = await api.rpc.system.accountNextIndex(alice.address);
//       let amount = 5644;
//       const ethBeneficiary = '0x70997970c51812dc3a010c7d01b50e0d17dc79c8';
//       await api.tx.erc20Peg.withdraw(testTokenId2, amount, ethBeneficiary,).signAndSend(alice, {nonce}, async ({status, events}) => {
//         if (status.isInBlock) {
//           for (const {event: {method, section, data}} of events) {
//             console.log('\t', `: ${section}.${method}`, data.toString());
//             if (section === 'erc20Peg' && method == 'Erc20Withdraw') {
//               const [withdrawalId, assetId, amountt, beneficiary] = data;
//               expect((withdrawalId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);
//               // expect(assetId.toNumber()).toEqual(testTokenId2.toNumber());
//               expect((amountt as Balance).toNumber()).toEqual(amount);
//               expect(beneficiary.toString()).toEqual(ethBeneficiary);
//               done();
//             }
//           }
//         }
//       });
//     });
//
//     it('Withdraw claim for test token 2 from Bob', async done => {
//       let nonce = await api.rpc.system.accountNextIndex(bob.address);
//       let amount = 11644;
//       const ethBeneficiary = '0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc';
//       await api.tx.erc20Peg.withdraw(testTokenId2, amount, ethBeneficiary,).signAndSend(bob, {nonce}, async ({status, events}) => {
//         if (status.isInBlock) {
//           for (const {event: {method, section, data}} of events) {
//             console.log('\t', `: ${section}.${method}`, data.toString());
//             if (section === 'erc20Peg' && method == 'Erc20Withdraw') {
//               let count = 0;
//               const unsubHeads = await api.rpc.ethy.subscribeEventProofs((result: any) => {
//                 console.log('data::', result.toHuman());
//                 if (count++ == 1) {
//                   unsubHeads();
//                   done();
//                 }
//               });
//               const [withdrawalId, assetId, amountt, beneficiary] = data;
//               expect((withdrawalId as EventClaimId).toNumber()).toBeGreaterThanOrEqual(0);
//               expect((assetId as AssetId).toNumber()).toEqual(testTokenId2.toNumber());
//               expect((amountt as Balance).toNumber()).toEqual(amount);
//               expect(beneficiary.toString()).toEqual(ethBeneficiary);
//             }
//           }
//         }
//       });
//     });
//
//     it( 'Get event id from rpc call', async done => {
//       api = await Api.create({network: 'rata'});
//       const versionedEventProof = (await api.rpc.ethy.getEventProof('1')).toJSON();
//       expect(versionedEventProof.eventProof.eventId.toString()).toEqual('1');
//
//       const eventProof = await api.derive.ethBridge.eventProof('2');
//       console.log('Proof::',eventProof);
//       expect(eventProof.eventId).toEqual('2');
//       done();
//     })
//
//     it( 'Get r,s,v from signature', async done => {
//       const sign = api.registry.createType('EthereumSignature', '0x5e0a108f836af7c7aeb832382f0a237709da037abdac72cc16a8a54b77d2bb946bb8e78fd63af7594650b8d1a033046e3d08ad15a0b648a0473263e51fe70e1b01');
//       const signatures = [sign];
//       const { r, s, v } = extractEthereumSignature(signatures);
//
//       expect(r[0]).toEqual('0x5e0a108f836af7c7aeb832382f0a237709da037abdac72cc16a8a54b77d2bb94');
//       expect(s[0]).toEqual('0x6bb8e78fd63af7594650b8d1a033046e3d08ad15a0b648a0473263e51fe70e1b');
//       expect(v[0]).toEqual(28);
//
//       done();
//     })
//
//     it(   'Get r,s,v from invalid signature', async done => {
//       const sign = api.registry.createType('EthereumSignature', '');
//       const signatures = [sign];
//       const { r, s, v } = extractEthereumSignature(signatures);
//       expect(r).toEqual(['0x0000000000000000000000000000000000000000000000000000000000000000']);
//       expect(s).toEqual(['0x0000000000000000000000000000000000000000000000000000000000000000']);
//       expect(v[0]).toEqual(27);
//
//       done();
//     })
//
//     // this requires migration
//     it.skip(   'For rata chain get series metadata URI at collection id 29', async done => {
//       const provider = 'wss://rata.centrality.me/public/ws';
//
//       const apiRata = await Api.create({provider});
//
//       const metadataPath = (await apiRata.query.nft.seriesMetadataURI(
//         29,
//         0
//       )).toHuman();
//       // const tokenId = apiRata.registry.createType('TokenId', [29,0,0]);
//       //
//       // const uri = await apiRata.rpc.nft.tokenUri(tokenId);
//       // console.log('metadataPath::',uri.toHuman());
//       expect(metadataPath).toEqual("ipfs://QmWGYnnapNUT9voEx8gyZBXKsSgmWWQXdkCqRrucQ8qdmx");
//       await apiRata.disconnect();
//       done();
//     })
//
//   })
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9ldGhCcmlkZ2UuZTJlLnRzIiwibWFwcGluZ3MiOiI7QUFBQSwyR0FBMkc7QUFDM0cseURBQXlEO0FBQ3pELCtDQUErQztBQUMvQywyREFBMkQ7QUFDM0Qsa0VBQWtFO0FBQ2xFLGdFQUFnRTtBQUNoRSxxQ0FBcUM7QUFDckMsRUFBRTtBQUNGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztBQUN0QyxpRUFBaUU7QUFDakUsRUFBRTtBQUNGLDhCQUE4QjtBQUM5QiwrQkFBK0I7QUFDL0Isc0RBQXNEO0FBQ3RELDZDQUE2QztBQUM3Qyx3REFBd0Q7QUFDeEQseUNBQXlDO0FBQ3pDLG9DQUFvQztBQUNwQyxtRUFBbUU7QUFDbkUsc0VBQXNFO0FBQ3RFLDZHQUE2RztBQUM3RyxxSEFBcUg7QUFDckgsNkRBQTZEO0FBQzdELHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixVQUFVO0FBQ1YsRUFBRTtBQUNGLHVHQUF1RztBQUN2RyxnQ0FBZ0M7QUFDaEMsd0VBQXdFO0FBQ3hFLDRGQUE0RjtBQUM1RixjQUFjO0FBQ2Qsa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLEVBQUU7QUFDRiwyQkFBMkI7QUFDM0IsOEJBQThCO0FBQzlCLFFBQVE7QUFDUixFQUFFO0FBQ0YsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRkFBa0Y7QUFDbEYsb0dBQW9HO0FBQ3BHLG1FQUFtRTtBQUNuRSxzQ0FBc0M7QUFDdEMscUdBQXFHO0FBQ3JHLHdCQUF3QjtBQUN4QixzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDLHNDQUFzQztBQUN0QyxXQUFXO0FBQ1gsOEVBQThFO0FBQzlFLCtIQUErSDtBQUMvSCxFQUFFO0FBQ0YsdUdBQXVHO0FBQ3ZHLEVBQUU7QUFDRiwyRUFB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WixVQUFVO0FBQ1YsRUFBRTtBQUNGLHdEQUF3RDtBQUN4RCxtREFBbUQ7QUFDbkQsc0ZBQXNGO0FBQ3RGLGdGQUFnRjtBQUNoRixFQUFFO0FBQ0YsdUVBQXVFO0FBQ3ZFLDJDQUEyQztBQUMzQyxpREFBaUQ7QUFDakQsZ0JBQWdCO0FBQ2hCLFNBQVM7QUFDVCxFQUFFO0FBQ0Ysc0RBQXNEO0FBQ3RELDJNQUEyTTtBQUMzTSxtQ0FBbUM7QUFDbkMsa0VBQWtFO0FBQ2xFLEVBQUU7QUFDRixvR0FBb0c7QUFDcEcsb0dBQW9HO0FBQ3BHLGtDQUFrQztBQUNsQyxFQUFFO0FBQ0YsZ0JBQWdCO0FBQ2hCLFNBQVM7QUFDVCxFQUFFO0FBQ0YsZ0VBQWdFO0FBQ2hFLHVFQUF1RTtBQUN2RSxtQ0FBbUM7QUFDbkMsa0VBQWtFO0FBQ2xFLG1HQUFtRztBQUNuRyxtR0FBbUc7QUFDbkcsa0NBQWtDO0FBQ2xDLEVBQUU7QUFDRixnQkFBZ0I7QUFDaEIsU0FBUztBQUNULEVBQUU7QUFDRixpQ0FBaUM7QUFDakMsK0ZBQStGO0FBQy9GLCtEQUErRDtBQUMvRCxFQUFFO0FBQ0Ysc0RBQXNEO0FBQ3RELEVBQUU7QUFDRix5RUFBeUU7QUFDekUsY0FBYztBQUNkLFlBQVk7QUFDWixzQkFBc0I7QUFDdEIsNkVBQTZFO0FBQzdFLFdBQVc7QUFDWCxnRUFBZ0U7QUFDaEUsd0RBQXdEO0FBQ3hELCtGQUErRjtBQUMvRixvQ0FBb0M7QUFDcEMsZ0JBQWdCO0FBQ2hCLFNBQVM7QUFDVCxFQUFFO0FBQ0YsT0FBTztBQUNQLE1BQU0iLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9ldGhCcmlkZ2UuZTJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGF3YWl0RGVwb3NpdENsYWltLCBDbGFpbURlcG9zaXRlZCwgZXh0cmFjdEV0aGVyZXVtU2lnbmF0dXJlIH0gZnJvbSBcIkBjZW5uem5ldC9hcGkvdXRpbC9oZWxwZXJcIjtcbi8vIGltcG9ydCB7IGVuY29kZUFkZHJlc3MgfSBmcm9tIFwiQHBvbGthZG90L3V0aWwtY3J5cHRvXCI7XG4vLyBpbXBvcnQgeyBLZXlyaW5nIH0gZnJvbSAnQHBvbGthZG90L2tleXJpbmcnO1xuLy8gaW1wb3J0IHsgY3J5cHRvV2FpdFJlYWR5IH0gZnJvbSAnQHBvbGthZG90L3V0aWwtY3J5cHRvJztcbi8vIGltcG9ydCB7QXNzZXRJZCwgQmFsYW5jZSwgRXZlbnRDbGFpbUlkfSBmcm9tIFwiQGNlbm56bmV0L3R5cGVzXCI7XG4vLyBpbXBvcnQgaW5pdEFwaVByb21pc2UgZnJvbSAnLi4vLi4vLi4vLi4vamVzdC9pbml0QXBpUHJvbWlzZSc7XG4vLyBpbXBvcnQge0FwaX0gZnJvbSBcIkBjZW5uem5ldC9hcGlcIjtcbi8vXG5kZXNjcmliZSgnRXRoIGJyaWRnZSB0ZXN0JywgKCkgPT4ge30pO1xuLy8gICBsZXQgYXBpLCBhbGljZSwgYWxpY2VTdGFzaCwgYm9iLCB0ZXN0VG9rZW5JZDEsIHRlc3RUb2tlbklkMjtcbi8vXG4vLyAgIGJlZm9yZUFsbChhc3luYyBkb25lID0+IHtcbi8vICAgICBhd2FpdCBjcnlwdG9XYWl0UmVhZHkoKTtcbi8vICAgICBjb25zdCBrZXlyaW5nID0gbmV3IEtleXJpbmcoe3R5cGU6ICdzcjI1NTE5J30pO1xuLy8gICAgIGFsaWNlID0ga2V5cmluZy5hZGRGcm9tVXJpKCcvL0FsaWNlJyk7XG4vLyAgICAgYWxpY2VTdGFzaCA9IGtleXJpbmcuYWRkRnJvbVVyaSgnLy9BbGljZS8vc3Rhc2gnKVxuLy8gICAgIGJvYiA9IGtleXJpbmcuYWRkRnJvbVVyaSgnLy9Cb2InKTtcbi8vICAgICBhcGkgPSBhd2FpdCBpbml0QXBpUHJvbWlzZSgpO1xuLy8gICAgIGNvbnN0IHRyYW5zYWN0aW9uMSA9IGFwaS50eC5lcmMyMFBlZy5hY3RpdmF0ZURlcG9zaXRzKHRydWUpO1xuLy8gICAgIGNvbnN0IHRyYW5zYWN0aW9uMiA9IGFwaS50eC5lcmMyMFBlZy5hY3RpdmF0ZVdpdGhkcmF3YWxzKHRydWUpO1xuLy8gICAgIGNvbnN0IHRyYW5zYWN0aW9uMyA9IGFwaS50eC5lcmMyMFBlZy5zZXRDb250cmFjdEFkZHJlc3MoJzB4ZTdmMTcyNUU3NzM0Q0UyODhGODM2N2UxQmIxNDNFOTBiYjNGMDUxMicpO1xuLy8gICAgIGNvbnN0IHRyYW5zYWN0aW9uNCA9IGFwaS50eC5ldGhCcmlkZ2Uuc2V0RXZlbnRDb25maXJtYXRpb25zKDApOyAvLyBIYXJkaGF0IG9ubHkgbWFrZXMgYmxvY2tzIHdoZW4gdHhzIGFyZSBzZW50XG4vLyAgICAgY29uc3QgYmF0Y2hCcmlkZ2VBY3RpdmF0aW9uRXggPSBhcGkudHgudXRpbGl0eS5iYXRjaChbXG4vLyAgICAgICB0cmFuc2FjdGlvbjEsXG4vLyAgICAgICB0cmFuc2FjdGlvbjIsXG4vLyAgICAgICB0cmFuc2FjdGlvbjMsXG4vLyAgICAgICB0cmFuc2FjdGlvbjRcbi8vICAgICBdKTtcbi8vXG4vLyAgICAgYXdhaXQgYXBpLnR4LnN1ZG8uc3VkbyhiYXRjaEJyaWRnZUFjdGl2YXRpb25FeCkuc2lnbkFuZFNlbmQoYWxpY2UsIGFzeW5jICh7c3RhdHVzLCBldmVudHN9KSA9PiB7XG4vLyAgICAgICBpZiAoc3RhdHVzLmlzSW5CbG9jaykge1xuLy8gICAgICAgICBldmVudHMuZm9yRWFjaCgoe3BoYXNlLCBldmVudDoge2RhdGEsIG1ldGhvZCwgc2VjdGlvbn19KSA9PiB7XG4vLyAgICAgICAgICAgY29uc29sZS5sb2coJ1xcdCcsIHBoYXNlLnRvU3RyaW5nKCksIGA6ICR7c2VjdGlvbn0uJHttZXRob2R9YCwgZGF0YS50b1N0cmluZygpKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICAgIGRvbmUoKTtcbi8vICAgICAgIH1cbi8vICAgICB9KTtcbi8vICAgfSk7XG4vL1xuLy8gICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4vLyAgICAgYXdhaXQgYXBpLmRpc2Nvbm5lY3QoKTtcbi8vICAgfSk7XG4vL1xuLy8gICBkZXNjcmliZSgnRXRoIGJyaWRnZSBjbGFpbXMnLCAoKSA9PiB7XG4vL1xuLy8gICAgIGl0KCdTdWJtaXQgY2xhaW0gZm9yIHRlc3QgdG9rZW4gMSBmcm9tIEJyaWRnZVRlc3QgYWNjb3VudCcsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgY29uc3QgZGVwb3NpdFR4SGFzaCA9IFwiMHhjYWMzOThlZjVhOWFlMWUzMjE3OTU0MjEyYjEwNTllOWJiZTc4ODg5N2JhNzE0OTUwYWI0ZDYzYTI0MzQxMzdmXCI7XG4vLyAgICAgICB0ZXN0VG9rZW5JZDEgPSBhd2FpdCBhcGkucXVlcnkuZ2VuZXJpY0Fzc2V0Lm5leHRBc3NldElkKCk7XG4vLyAgICAgICBjb25zdCBkZXBvc2l0QW1vdW50ID0gXCIxNDIzXCI7XG4vLyAgICAgICBjb25zdCBiZW5lZmljaWFyeUFjYyA9IFwiMHhhY2Q2MTE4ZTIxN2U1NTJiYTgwMWY3YWE4YTkzNGVhNmEzMDBhNWIzOTRlN2MzZjQyY2Q5ZDZkZDlhNDU3YzEwXCI7XG4vLyAgICAgICBjb25zdCBjbGFpbSA9IHtcbi8vICAgICAgICAgdG9rZW5BZGRyZXNzOiBcIjB4Q2Y3RWQzQWNjQTVhNDY3ZTllNzA0QzcwM0U4RDg3RjYzNGZCMEZjOVwiLFxuLy8gICAgICAgICBhbW91bnQ6IGRlcG9zaXRBbW91bnQsXG4vLyAgICAgICAgIGJlbmVmaWNpYXJ5OiBiZW5lZmljaWFyeUFjY1xuLy8gICAgICAgfTtcbi8vICAgICAgIGNvbnNvbGUubG9nKCdOZXcgdG9rZW4gZ2VuZXJhdGVkIHdpbGwgYmU6OicsdGVzdFRva2VuSWQxLnRvU3RyaW5nKCkpO1xuLy8gICAgICAgY29uc3QgZGVwb3NpdENsYWltRXZlbnQ6IENsYWltRGVwb3NpdGVkID0gYXdhaXQgYXdhaXREZXBvc2l0Q2xhaW0oYXBpLCBkZXBvc2l0VHhIYXNoLCBjbGFpbSwgYWxpY2UpIGFzIENsYWltRGVwb3NpdGVkO1xuLy9cbi8vICAgICAgIGNvbnN0IGJlbmVmaWNpYXJ5QWRkcmVzcyA9IGVuY29kZUFkZHJlc3MoYmVuZWZpY2lhcnlBY2MsIDQyKTsgLy8gY29udmVydCBwdWJsaWMga2V5IHRvIGFkZHJlc3Ncbi8vXG4vLyAgICAgICBjb25zdCB7Y2xhaW1JZCwgYXNzZXRJZCwgYW1vdW50LCBiZW5lZmljaWFyeX0gPSBkZXBvc2l0Q2xhaW1FdmVudDtcbi8vICAgICAgIGV4cGVjdChjbGFpbUlkKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuLy8gICAgICAgZXhwZWN0KGFzc2V0SWQpLnRvRXF1YWwodGVzdFRva2VuSWQxLnRvU3RyaW5nKCkpO1xuLy8gICAgICAgZXhwZWN0KGFtb3VudCkudG9FcXVhbChkZXBvc2l0QW1vdW50KTtcbi8vICAgICAgIGV4cGVjdChiZW5lZmljaWFyeSkudG9FcXVhbChiZW5lZmljaWFyeUFkZHJlc3MpO1xuLy8gICAgICAgY29uc3QgYXNzZXRCYWxhbmNlID0gYXdhaXQgYXBpLnF1ZXJ5LmdlbmVyaWNBc3NldC5mcmVlQmFsYW5jZSh0ZXN0VG9rZW5JZDEudG9OdW1iZXIoKSwgYmVuZWZpY2lhcnlBZGRyZXNzKTtcbi8vICAgICAgIGV4cGVjdChhc3NldEJhbGFuY2UudG9TdHJpbmcoKSkudG9CZShkZXBvc2l0QW1vdW50KTtcbi8vICAgICAgIGRvbmUoKTtcbi8vICAgfSk7XG4vL1xuLy8gICBpdCgnU3VibWl0IGEgd3JvbmcgY2xhaW0gJywgYXN5bmMgZG9uZSA9PiB7XG4vLyAgICAgICBjb25zdCBkZXBvc2l0VHhIYXNoID0gXCIweDAyOGE3MjFmY2ZkNmZmYTQ4ZTEwOTUyOTRiYzI2NTcwZjYxYTE4NjZhNTdiN2U2MTYyZGRhZWJlMjI4NzE2MDhcIjtcbi8vICAgICAgIHRlc3RUb2tlbklkMSA9IGF3YWl0IGFwaS5xdWVyeS5nZW5lcmljQXNzZXQubmV4dEFzc2V0SWQoKTtcbi8vICAgICAgIGNvbnN0IGRlcG9zaXRBbW91bnQgPSBcIjE0MjNcIjtcbi8vICAgICAgIGNvbnN0IGJlbmVmaWNpYXJ5QWNjID0gXCIweGFjZDYxMThlMjE3ZTU1MmJhODAxZjdhYThhOTM0ZWE2YTMwMGE1YjM5NGU3YzNmNDJjZDlkNmRkOWE0NTdjMTBcIjtcbi8vICAgICAgIGNvbnN0IGNsYWltID0ge1xuLy8gICAgICAgICB0b2tlbkFkZHJlc3M6IFwiMHg5ZkU0NjczNjY3OWQyRDlhNjVGMDk5MkYyMjcyZEU5ZjNjN2ZhNmUwXCIsXG4vLyAgICAgICAgIGFtb3VudDogZGVwb3NpdEFtb3VudCxcbi8vICAgICAgICAgYmVuZWZpY2lhcnk6IGJlbmVmaWNpYXJ5QWNjXG4vLyAgICAgICB9O1xuLy8gICAgICAgYXdhaXQgZXhwZWN0KGF3YWl0RGVwb3NpdENsYWltKGFwaSwgZGVwb3NpdFR4SGFzaCwgY2xhaW0sIGFsaWNlKSkucmVqZWN0cy50b0VxdWFsKFxuLy8gICAgICAgICAnQ2xhaW0gZGVwb3NpdGlvbiBmYWlsZWQnKTtcbi8vICAgICAgIGRvbmUoKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ1N1Ym1pdHRpbmcgc2FtZSBjbGFpbSBhZ2FpbiBzaG93IGZhaWwnLCBhc3luYyBkb25lID0+IHtcbi8vICAgICAgIGNvbnN0IGRlcG9zaXRUeEhhc2ggPSBcIjB4Y2FjMzk4ZWY1YTlhZTFlMzIxNzk1NDIxMmIxMDU5ZTliYmU3ODg4OTdiYTcxNDk1MGFiNGQ2M2EyNDM0MTM3ZlwiO1xuLy8gICAgICAgdGVzdFRva2VuSWQxID0gYXdhaXQgYXBpLnF1ZXJ5LmdlbmVyaWNBc3NldC5uZXh0QXNzZXRJZCgpO1xuLy8gICAgICAgY29uc3QgZGVwb3NpdEFtb3VudCA9IFwiMTQyM1wiO1xuLy8gICAgICAgY29uc3QgYmVuZWZpY2lhcnlBY2MgPSBcIjB4YWNkNjExOGUyMTdlNTUyYmE4MDFmN2FhOGE5MzRlYTZhMzAwYTViMzk0ZTdjM2Y0MmNkOWQ2ZGQ5YTQ1N2MxMFwiO1xuLy8gICAgICAgY29uc3QgY2xhaW0gPSB7XG4vLyAgICAgICAgIHRva2VuQWRkcmVzczogXCIweENmN0VkM0FjY0E1YTQ2N2U5ZTcwNEM3MDNFOEQ4N0Y2MzRmQjBGYzlcIixcbi8vICAgICAgICAgYW1vdW50OiBkZXBvc2l0QW1vdW50LFxuLy8gICAgICAgICBiZW5lZmljaWFyeTogYmVuZWZpY2lhcnlBY2Ncbi8vICAgICAgIH07XG4vLyAgICAgICBhd2FpdCBleHBlY3QoYXdhaXREZXBvc2l0Q2xhaW0oYXBpLCBkZXBvc2l0VHhIYXNoLCBjbGFpbSwgYWxpY2UpKS5yZWplY3RzLnRvRXF1YWwoXG4vLyAgICAgICAgICdDbGFpbSBhbHJlYWR5IG5vdGFyaXplZCcpO1xuLy8gICAgICAgZG9uZSgpO1xuLy8gICAgIH0pO1xuLy9cbi8vICAgaXQoJ1N1Ym1pdCBjbGFpbSBmb3IgdGVzdCB0b2tlbiAyIGZyb20gQWxpY2UnLCBhc3luYyBkb25lID0+IHtcbi8vICAgICBjb25zdCBkZXBvc2l0VHhIYXNoID0gXCIweDNmZjgzZjY1MWRmZDFiOWM1OTU4ZmJkOTA4YjAyZmFhNTg2N2NlOWVlMzZlNjY5YzVlMWVlMzVhNTI0ZjVlZjRcIjtcbi8vICAgICBjb25zdCBjbGFpbSA9IHtcbi8vICAgICAgIHRva2VuQWRkcmVzczogXCIweERjNjRhMTQwQWEzRTk4MTEwMGE5YmVjQTRFNjg1Zjk2MmYwY0Y2QzlcIixcbi8vICAgICAgIGFtb3VudDogXCI1NjQ0XCIsXG4vLyAgICAgICAgIGJlbmVmaWNpYXJ5OiBcIjB4ZDQzNTkzYzcxNWZkZDMxYzYxMTQxYWJkMDRhOTlmZDY4MjJjODU1ODg1NGNjZGUzOWE1Njg0ZTdhNTZkYTI3ZFwiXG4vLyAgICAgfTtcbi8vICAgICBsZXQgbm9uY2UgPSBhd2FpdCBhcGkucnBjLnN5c3RlbS5hY2NvdW50TmV4dEluZGV4KGFsaWNlLmFkZHJlc3MpO1xuLy8gICAgIGF3YWl0IGFwaS50eC5lcmMyMFBlZy5kZXBvc2l0Q2xhaW0oZGVwb3NpdFR4SGFzaCwgY2xhaW0pLnNpZ25BbmRTZW5kKGFsaWNlLCB7bm9uY2V9LCBhc3luYyAoe3N0YXR1cywgZXZlbnRzfSkgPT4ge1xuLy8gICAgICAgaWYgKHN0YXR1cy5pc0luQmxvY2spIHtcbi8vICAgICAgICAgZm9yIChjb25zdCB7ZXZlbnQ6IHttZXRob2QsIHNlY3Rpb24sIGRhdGF9fSBvZiBldmVudHMpIHtcbi8vICAgICAgICAgICBjb25zb2xlLmxvZygnXFx0JywgYDogJHtzZWN0aW9ufS4ke21ldGhvZH1gLCBkYXRhLnRvU3RyaW5nKCkpO1xuLy8gICAgICAgICAgIGlmIChzZWN0aW9uID09PSAnZXJjMjBQZWcnICYmIG1ldGhvZCA9PSAnRXJjMjBDbGFpbScpIHtcbi8vICAgICAgICAgICAgIGNvbnN0IFtjbGFpbUlkLCBjbGFpbWVyXSA9IGRhdGE7XG4vLyAgICAgICAgICAgICBleHBlY3QoKGNsYWltSWQgYXMgRXZlbnRDbGFpbUlkKS50b051bWJlcigpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuLy8gICAgICAgICAgICAgZXhwZWN0KGNsYWltZXIudG9TdHJpbmcoKSkudG9FcXVhbChhbGljZS5hZGRyZXNzKTtcbi8vICAgICAgICAgICAgIGRvbmUoKTtcbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICAgIH1cbi8vICAgICB9KTtcbi8vICAgfSk7XG4vL1xuLy8gICBpdCgnU3VibWl0IGNsYWltIGZvciB0ZXN0IHRva2VuIDIgZnJvbSBCb2InLCBhc3luYyBkb25lID0+IHtcbi8vICAgICBjb25zdCBkZXBvc2l0VHhIYXNoID0gXCIweDIwNTE5M2JlZWU1ZGZmODQ4MDg1ZmFhYTViMWVmNzJhOTgxNmUxZTUwMjBkMWMzYjYxNjEwNzYzOTMxM2JjOWRcIjtcbi8vICAgICBjb25zdCBjbGFpbSA9IHtcbi8vICAgICAgIHRva2VuQWRkcmVzczogXCIweERjNjRhMTQwQWEzRTk4MTEwMGE5YmVjQTRFNjg1Zjk2MmYwY0Y2QzlcIixcbi8vICAgICAgIGFtb3VudDogXCIxMTY0NFwiLFxuLy8gICAgICAgYmVuZWZpY2lhcnk6IFwiMHg4ZWFmMDQxNTE2ODc3MzYzMjZjOWZlYTE3ZTI1ZmM1Mjg3NjEzNjkzYzkxMjkwOWNiMjI2YWE0Nzk0ZjI2YTQ4XCJcbi8vICAgICB9O1xuLy8gICAgIGxldCBub25jZSA9IGF3YWl0IGFwaS5ycGMuc3lzdGVtLmFjY291bnROZXh0SW5kZXgoYWxpY2UuYWRkcmVzcyk7XG4vLyAgICAgdGVzdFRva2VuSWQyID0gYXdhaXQgYXBpLnF1ZXJ5LmdlbmVyaWNBc3NldC5uZXh0QXNzZXRJZCgpO1xuLy8gICAgIGNvbnNvbGUubG9nKCd0ZXN0VG9rZW5JZDI6OicsdGVzdFRva2VuSWQyLnRvU3RyaW5nKCkpO1xuLy8gICAgIGF3YWl0IGFwaS50eC5lcmMyMFBlZy5kZXBvc2l0Q2xhaW0oZGVwb3NpdFR4SGFzaCwgY2xhaW0pLnNpZ25BbmRTZW5kKGFsaWNlLCB7bm9uY2V9LCBhc3luYyAoe3N0YXR1cywgZXZlbnRzfSkgPT4ge1xuLy8gICAgICAgaWYgKHN0YXR1cy5pc0luQmxvY2spIHtcbi8vICAgICAgICAgZm9yIChjb25zdCB7ZXZlbnQ6IHttZXRob2QsIHNlY3Rpb24sIGRhdGF9fSBvZiBldmVudHMpIHtcbi8vICAgICAgICAgICBjb25zb2xlLmxvZygnXFx0JywgYDogJHtzZWN0aW9ufS4ke21ldGhvZH1gLCBkYXRhLnRvU3RyaW5nKCkpO1xuLy8gICAgICAgICAgIGlmIChzZWN0aW9uID09PSAnZXJjMjBQZWcnICYmIG1ldGhvZCA9PSAnRXJjMjBDbGFpbScpIHtcbi8vICAgICAgICAgICAgIGNvbnN0IFtjbGFpbUlkLCBjbGFpbWVyXSA9IGRhdGE7XG4vLyAgICAgICAgICAgICBleHBlY3QoKGNsYWltSWQgYXMgRXZlbnRDbGFpbUlkKS50b051bWJlcigpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuLy8gICAgICAgICAgICAgZXhwZWN0KGNsYWltZXIudG9TdHJpbmcoKSkudG9FcXVhbChib2IuYWRkcmVzcyk7XG4vLyAgICAgICAgICAgICBkb25lKCk7XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgICB9XG4vLyAgICAgfSk7XG4vLyAgIH0pO1xuLy9cbi8vIH0pO1xuLy9cbi8vICAgZGVzY3JpYmUoJ1F1ZXJ5IHN0b3JhZ2UgY2hlY2sgY2xhaW1lZCB0b2tlbnMnLCAoKSA9PiB7XG4vL1xuLy8gICAgIGJlZm9yZUFsbChhc3luYyBkb25lID0+IHtcbi8vXG4vLyAgICAgLy8gd2FpdCBmb3IgNCBibG9ja3MgYmVmb3JlIGNoZWNraW5nIHRoZSBzdG9yYWdlXG4vLyAgICAgICBsZXQgY291bnQgPSAwO1xuLy9cbi8vICAgICAgIGNvbnN0IHVuc3ViSGVhZHMgPSBhd2FpdCBhcGkucnBjLmNoYWluLnN1YnNjcmliZU5ld0hlYWRzKChsYXN0SGVhZGVyKSA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKGBjaGFpbjogbGFzdCBibG9jayAjJHtsYXN0SGVhZGVyLm51bWJlcn0gaGFzIGhhc2ggJHtsYXN0SGVhZGVyLmhhc2h9YCk7XG4vL1xuLy8gICAgICAgICBhcGkucXVlcnkuc3lzdGVtLmV2ZW50cygoZXZlbnRzKSA9PiB7XG4vLyAgICAgICAgICAgY29uc29sZS5sb2coYFxcblJlY2VpdmVkICR7ZXZlbnRzLmxlbmd0aH0gZXZlbnRzOmApO1xuLy9cbi8vICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIFZlYzxFdmVudFJlY29yZD5cbi8vICAgICAgICAgICBldmVudHMuZm9yRWFjaCgocmVjb3JkKSA9PiB7XG4vLyAgICAgICAgICAgICAvLyBleHRyYWN0IHRoZSBwaGFzZSwgZXZlbnQgYW5kIHRoZSBldmVudCB0eXBlc1xuLy8gICAgICAgICAgICAgY29uc3QgeyBldmVudCwgcGhhc2UgfSA9IHJlY29yZDtcbi8vICAgICAgICAgICAgIGNvbnN0IHR5cGVzID0gZXZlbnQudHlwZURlZjtcbi8vXG4vLyAgICAgICAgICAgICAvLyBzaG93IHdoYXQgd2UgYXJlIGJ1c3kgd2l0aFxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYFxcdCR7ZXZlbnQuc2VjdGlvbn06JHtldmVudC5tZXRob2R9OjogKHBoYXNlPSR7cGhhc2UudG9TdHJpbmcoKX0pYCk7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXZlbnQubWV0YTo6JywgZXZlbnQubWV0YSk7XG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXFx0XFx0JHtldmVudC5tZXRhLmRvY3VtZW50YXRpb24udG9TdHJpbmcoKX1gKTtcbi8vXG4vLyAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggZWFjaCBvZiB0aGUgcGFyYW1ldGVycywgZGlzcGxheWluZyB0aGUgdHlwZSBhbmQgZGF0YVxuLy8gICAgICAgICAgICAgZXZlbnQuZGF0YS5mb3JFYWNoKChkYXRhLCBpbmRleCkgPT4ge1xuLy8gICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXFx0XFx0XFx0JHt0eXBlc1tpbmRleF0udHlwZX06ICR7ZGF0YS50b1N0cmluZygpfWApO1xuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgICAgICBpZiAoKytjb3VudCA9PT0gNCkge1xuLy8gICAgICAgICAgIHVuc3ViSGVhZHMoKTtcbi8vICAgICAgICAgICBkb25lKCk7XG4vLyAgICAgICAgIH1cbi8vICAgICAgIH0pO1xuLy8gICAgIH0pO1xuLy9cbi8vICAgICBpdCgnUXVlcmllcyByZWdpc3RlcmVkIGFzc2V0cycsIGFzeW5jIGRvbmUgPT4ge1xuLy9cbi8vICAgICAgIGNvbnN0IHJlZ2lzdGVyZWRBc3NldCA9IGF3YWl0IGFwaS5ycGMuZ2VuZXJpY0Fzc2V0LnJlZ2lzdGVyZWRBc3NldHMoKTtcbi8vICAgICAgIGNvbnNvbGUubG9nKHJlZ2lzdGVyZWRBc3NldC50b0pTT04oKSk7XG4vLyAgICAgICBjb25zdCBoYXNUZXN0VG9rZW4xQXNzZXQgPSAoW2Fzc2V0SWQsIG1ldGFdKSA9PiBhc3NldElkLnRvU3RyaW5nKCkgPT09IHRlc3RUb2tlbklkMS50b1N0cmluZygpICYmIG1ldGEuZGVjaW1hbFBsYWNlcy50b1N0cmluZygpID09PSAnMTgnO1xuLy8gICAgICAgY29uc3QgaGFzVGVzdFRva2VuMkFzc2V0ID0gKFthc3NldElkLCBtZXRhXSkgPT4gYXNzZXRJZC50b1N0cmluZygpID09PSB0ZXN0VG9rZW5JZDIudG9TdHJpbmcoKSAmJiBtZXRhLmRlY2ltYWxQbGFjZXMudG9TdHJpbmcoKSA9PT0gJzE4Jztcbi8vICAgICAgIGV4cGVjdChyZWdpc3RlcmVkQXNzZXQuc29tZShoYXNUZXN0VG9rZW4xQXNzZXQpKS50b0JlKHRydWUpO1xuLy8gICAgICAgZXhwZWN0KHJlZ2lzdGVyZWRBc3NldC5zb21lKGhhc1Rlc3RUb2tlbjJBc3NldCkpLnRvQmUodHJ1ZSk7XG4vLyAgICAgICBkb25lKCk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCdRdWVyaWVzIGdlbmVyaWMgYXNzZXQgYmFsYW5jZSBmb3IgdGVzdCB0b2tlbiAyIGZvciBBbGljZXMgYWNjb3VudCcsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgY29uc3QgYXNzZXRCYWxhbmNlID0gYXdhaXQgYXBpLnF1ZXJ5LmdlbmVyaWNBc3NldC5mcmVlQmFsYW5jZSh0ZXN0VG9rZW5JZDIudG9OdW1iZXIoKSwgYWxpY2UuYWRkcmVzcyk7XG4vLyAgICAgICBleHBlY3QoYXNzZXRCYWxhbmNlLnRvU3RyaW5nKCkpLnRvQmUoXCI1NjQ0XCIpO1xuLy8gICAgICAgZG9uZSgpO1xuLy8gICAgIH0pO1xuLy9cbi8vICAgICBpdCgnUXVlcmllcyBnZW5lcmljIGFzc2V0IGJhbGFuY2UgZm9yIHRlc3QgdG9rZW4gMiBmb3IgQm9icyBhY2NvdW50JywgYXN5bmMgZG9uZSA9PiB7XG4vLyAgICAgICBjb25zdCBhc3NldEJhbGFuY2UgPSBhd2FpdCBhcGkucXVlcnkuZ2VuZXJpY0Fzc2V0LmZyZWVCYWxhbmNlKHRlc3RUb2tlbklkMi50b051bWJlcigpLCBib2IuYWRkcmVzcyk7XG4vLyAgICAgICBleHBlY3QoYXNzZXRCYWxhbmNlLnRvU3RyaW5nKCkpLnRvQmUoXCIxMTY0NFwiKTtcbi8vICAgICAgIGRvbmUoKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ1F1ZXJpZXMgdG90YWxJc3N1YW5jZSBmb3IgdGVzdCB0b2tlbiAyJywgYXN5bmMgZG9uZSA9PiB7XG4vLyAgICAgICBjb25zdCB0b3RhbElzc3VhbmNlID0gYXdhaXQgYXBpLnF1ZXJ5LmdlbmVyaWNBc3NldC50b3RhbElzc3VhbmNlKHRlc3RUb2tlbklkMi50b051bWJlcigpKTtcbi8vICAgICAgIGV4cGVjdCh0b3RhbElzc3VhbmNlLnRvU3RyaW5nKCkpLnRvQmUoKDExNjQ0ICsgNTY0NCkudG9TdHJpbmcoKSk7XG4vLyAgICAgICBkb25lKCk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICB9KTtcbi8vXG4vL1xuLy8gICBkZXNjcmliZSgnVGVzdCBSUEMgc3Vic2NyaWJlIHRvIG5ldyBjbGFpbicsICgpID0+IHtcbi8vICAgICBpdC5za2lwKCdTdWJzY3JpYmUgZXZlbnQgcHJvb2YgYWZ0ZXIgbW9jayB3aXRoZHJhdycsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgbGV0IG5vbmNlID0gYXdhaXQgYXBpLnJwYy5zeXN0ZW0uYWNjb3VudE5leHRJbmRleChhbGljZS5hZGRyZXNzKTtcbi8vICAgICAgIGF3YWl0IGFwaS50eC5lcmMyMFBlZy5tb2NrV2l0aGRyYXcoKS5zaWduQW5kU2VuZChhbGljZSwge25vbmNlfSk7XG4vLyAgICAgICBhd2FpdCBhcGkudHguZXJjMjBQZWcubW9ja1dpdGhkcmF3KCkuc2lnbkFuZFNlbmQoYWxpY2VTdGFzaCk7XG4vLyAgICAgICBsZXQgY291bnQgPSAwO1xuLy8gICAgICAgY29uc3QgdW5zdWJIZWFkcyA9IGF3YWl0IGFwaS5ycGMuZXRoeS5zdWJzY3JpYmVFdmVudFByb29mcygocmVzdWx0OiBhbnkpID0+IHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ2RhdGE6OicsIHJlc3VsdC50b0h1bWFuKCkpO1xuLy8gICAgICAgICBleHBlY3QocmVzdWx0LmV2ZW50SWQudG9OdW1iZXIoKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbi8vICAgICAgICAgaWYgKCsrY291bnQgPT09IDEpIHtcbi8vICAgICAgICAgICB1bnN1YkhlYWRzKCk7XG4vLyAgICAgICAgICAgZG9uZSgpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICB9KTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ1dpdGhkcmF3IGNsYWltIGZvciB0ZXN0IHRva2VuIDIgZnJvbSBBbGljZScsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgbGV0IG5vbmNlID0gYXdhaXQgYXBpLnJwYy5zeXN0ZW0uYWNjb3VudE5leHRJbmRleChhbGljZS5hZGRyZXNzKTtcbi8vICAgICAgIGxldCBhbW91bnQgPSA1NjQ0O1xuLy8gICAgICAgY29uc3QgZXRoQmVuZWZpY2lhcnkgPSAnMHg3MDk5Nzk3MGM1MTgxMmRjM2EwMTBjN2QwMWI1MGUwZDE3ZGM3OWM4Jztcbi8vICAgICAgIGF3YWl0IGFwaS50eC5lcmMyMFBlZy53aXRoZHJhdyh0ZXN0VG9rZW5JZDIsIGFtb3VudCwgZXRoQmVuZWZpY2lhcnksKS5zaWduQW5kU2VuZChhbGljZSwge25vbmNlfSwgYXN5bmMgKHtzdGF0dXMsIGV2ZW50c30pID0+IHtcbi8vICAgICAgICAgaWYgKHN0YXR1cy5pc0luQmxvY2spIHtcbi8vICAgICAgICAgICBmb3IgKGNvbnN0IHtldmVudDoge21ldGhvZCwgc2VjdGlvbiwgZGF0YX19IG9mIGV2ZW50cykge1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ1xcdCcsIGA6ICR7c2VjdGlvbn0uJHttZXRob2R9YCwgZGF0YS50b1N0cmluZygpKTtcbi8vICAgICAgICAgICAgIGlmIChzZWN0aW9uID09PSAnZXJjMjBQZWcnICYmIG1ldGhvZCA9PSAnRXJjMjBXaXRoZHJhdycpIHtcbi8vICAgICAgICAgICAgICAgY29uc3QgW3dpdGhkcmF3YWxJZCwgYXNzZXRJZCwgYW1vdW50dCwgYmVuZWZpY2lhcnldID0gZGF0YTtcbi8vICAgICAgICAgICAgICAgZXhwZWN0KCh3aXRoZHJhd2FsSWQgYXMgRXZlbnRDbGFpbUlkKS50b051bWJlcigpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuLy8gICAgICAgICAgICAgICAvLyBleHBlY3QoYXNzZXRJZC50b051bWJlcigpKS50b0VxdWFsKHRlc3RUb2tlbklkMi50b051bWJlcigpKTtcbi8vICAgICAgICAgICAgICAgZXhwZWN0KChhbW91bnR0IGFzIEJhbGFuY2UpLnRvTnVtYmVyKCkpLnRvRXF1YWwoYW1vdW50KTtcbi8vICAgICAgICAgICAgICAgZXhwZWN0KGJlbmVmaWNpYXJ5LnRvU3RyaW5nKCkpLnRvRXF1YWwoZXRoQmVuZWZpY2lhcnkpO1xuLy8gICAgICAgICAgICAgICBkb25lKCk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgICB9KTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ1dpdGhkcmF3IGNsYWltIGZvciB0ZXN0IHRva2VuIDIgZnJvbSBCb2InLCBhc3luYyBkb25lID0+IHtcbi8vICAgICAgIGxldCBub25jZSA9IGF3YWl0IGFwaS5ycGMuc3lzdGVtLmFjY291bnROZXh0SW5kZXgoYm9iLmFkZHJlc3MpO1xuLy8gICAgICAgbGV0IGFtb3VudCA9IDExNjQ0O1xuLy8gICAgICAgY29uc3QgZXRoQmVuZWZpY2lhcnkgPSAnMHgzYzQ0Y2RkZGI2YTkwMGZhMmI1ODVkZDI5OWUwM2QxMmZhNDI5M2JjJztcbi8vICAgICAgIGF3YWl0IGFwaS50eC5lcmMyMFBlZy53aXRoZHJhdyh0ZXN0VG9rZW5JZDIsIGFtb3VudCwgZXRoQmVuZWZpY2lhcnksKS5zaWduQW5kU2VuZChib2IsIHtub25jZX0sIGFzeW5jICh7c3RhdHVzLCBldmVudHN9KSA9PiB7XG4vLyAgICAgICAgIGlmIChzdGF0dXMuaXNJbkJsb2NrKSB7XG4vLyAgICAgICAgICAgZm9yIChjb25zdCB7ZXZlbnQ6IHttZXRob2QsIHNlY3Rpb24sIGRhdGF9fSBvZiBldmVudHMpIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcXHQnLCBgOiAke3NlY3Rpb259LiR7bWV0aG9kfWAsIGRhdGEudG9TdHJpbmcoKSk7XG4vLyAgICAgICAgICAgICBpZiAoc2VjdGlvbiA9PT0gJ2VyYzIwUGVnJyAmJiBtZXRob2QgPT0gJ0VyYzIwV2l0aGRyYXcnKSB7XG4vLyAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4vLyAgICAgICAgICAgICAgIGNvbnN0IHVuc3ViSGVhZHMgPSBhd2FpdCBhcGkucnBjLmV0aHkuc3Vic2NyaWJlRXZlbnRQcm9vZnMoKHJlc3VsdDogYW55KSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGE6OicsIHJlc3VsdC50b0h1bWFuKCkpO1xuLy8gICAgICAgICAgICAgICAgIGlmIChjb3VudCsrID09IDEpIHtcbi8vICAgICAgICAgICAgICAgICAgIHVuc3ViSGVhZHMoKTtcbi8vICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICBjb25zdCBbd2l0aGRyYXdhbElkLCBhc3NldElkLCBhbW91bnR0LCBiZW5lZmljaWFyeV0gPSBkYXRhO1xuLy8gICAgICAgICAgICAgICBleHBlY3QoKHdpdGhkcmF3YWxJZCBhcyBFdmVudENsYWltSWQpLnRvTnVtYmVyKCkpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4vLyAgICAgICAgICAgICAgIGV4cGVjdCgoYXNzZXRJZCBhcyBBc3NldElkKS50b051bWJlcigpKS50b0VxdWFsKHRlc3RUb2tlbklkMi50b051bWJlcigpKTtcbi8vICAgICAgICAgICAgICAgZXhwZWN0KChhbW91bnR0IGFzIEJhbGFuY2UpLnRvTnVtYmVyKCkpLnRvRXF1YWwoYW1vdW50KTtcbi8vICAgICAgICAgICAgICAgZXhwZWN0KGJlbmVmaWNpYXJ5LnRvU3RyaW5nKCkpLnRvRXF1YWwoZXRoQmVuZWZpY2lhcnkpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgICAgfSk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCAnR2V0IGV2ZW50IGlkIGZyb20gcnBjIGNhbGwnLCBhc3luYyBkb25lID0+IHtcbi8vICAgICAgIGFwaSA9IGF3YWl0IEFwaS5jcmVhdGUoe25ldHdvcms6ICdyYXRhJ30pO1xuLy8gICAgICAgY29uc3QgdmVyc2lvbmVkRXZlbnRQcm9vZiA9IChhd2FpdCBhcGkucnBjLmV0aHkuZ2V0RXZlbnRQcm9vZignMScpKS50b0pTT04oKTtcbi8vICAgICAgIGV4cGVjdCh2ZXJzaW9uZWRFdmVudFByb29mLmV2ZW50UHJvb2YuZXZlbnRJZC50b1N0cmluZygpKS50b0VxdWFsKCcxJyk7XG4vL1xuLy8gICAgICAgY29uc3QgZXZlbnRQcm9vZiA9IGF3YWl0IGFwaS5kZXJpdmUuZXRoQnJpZGdlLmV2ZW50UHJvb2YoJzInKTtcbi8vICAgICAgIGNvbnNvbGUubG9nKCdQcm9vZjo6JyxldmVudFByb29mKTtcbi8vICAgICAgIGV4cGVjdChldmVudFByb29mLmV2ZW50SWQpLnRvRXF1YWwoJzInKTtcbi8vICAgICAgIGRvbmUoKTtcbi8vICAgICB9KVxuLy9cbi8vICAgICBpdCggJ0dldCByLHMsdiBmcm9tIHNpZ25hdHVyZScsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgY29uc3Qgc2lnbiA9IGFwaS5yZWdpc3RyeS5jcmVhdGVUeXBlKCdFdGhlcmV1bVNpZ25hdHVyZScsICcweDVlMGExMDhmODM2YWY3YzdhZWI4MzIzODJmMGEyMzc3MDlkYTAzN2FiZGFjNzJjYzE2YThhNTRiNzdkMmJiOTQ2YmI4ZTc4ZmQ2M2FmNzU5NDY1MGI4ZDFhMDMzMDQ2ZTNkMDhhZDE1YTBiNjQ4YTA0NzMyNjNlNTFmZTcwZTFiMDEnKTtcbi8vICAgICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBbc2lnbl07XG4vLyAgICAgICBjb25zdCB7IHIsIHMsIHYgfSA9IGV4dHJhY3RFdGhlcmV1bVNpZ25hdHVyZShzaWduYXR1cmVzKTtcbi8vXG4vLyAgICAgICBleHBlY3QoclswXSkudG9FcXVhbCgnMHg1ZTBhMTA4ZjgzNmFmN2M3YWViODMyMzgyZjBhMjM3NzA5ZGEwMzdhYmRhYzcyY2MxNmE4YTU0Yjc3ZDJiYjk0Jyk7XG4vLyAgICAgICBleHBlY3Qoc1swXSkudG9FcXVhbCgnMHg2YmI4ZTc4ZmQ2M2FmNzU5NDY1MGI4ZDFhMDMzMDQ2ZTNkMDhhZDE1YTBiNjQ4YTA0NzMyNjNlNTFmZTcwZTFiJyk7XG4vLyAgICAgICBleHBlY3QodlswXSkudG9FcXVhbCgyOCk7XG4vL1xuLy8gICAgICAgZG9uZSgpO1xuLy8gICAgIH0pXG4vL1xuLy8gICAgIGl0KCAgICdHZXQgcixzLHYgZnJvbSBpbnZhbGlkIHNpZ25hdHVyZScsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgY29uc3Qgc2lnbiA9IGFwaS5yZWdpc3RyeS5jcmVhdGVUeXBlKCdFdGhlcmV1bVNpZ25hdHVyZScsICcnKTtcbi8vICAgICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBbc2lnbl07XG4vLyAgICAgICBjb25zdCB7IHIsIHMsIHYgfSA9IGV4dHJhY3RFdGhlcmV1bVNpZ25hdHVyZShzaWduYXR1cmVzKTtcbi8vICAgICAgIGV4cGVjdChyKS50b0VxdWFsKFsnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ10pO1xuLy8gICAgICAgZXhwZWN0KHMpLnRvRXF1YWwoWycweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXSk7XG4vLyAgICAgICBleHBlY3QodlswXSkudG9FcXVhbCgyNyk7XG4vL1xuLy8gICAgICAgZG9uZSgpO1xuLy8gICAgIH0pXG4vL1xuLy8gICAgIC8vIHRoaXMgcmVxdWlyZXMgbWlncmF0aW9uXG4vLyAgICAgaXQuc2tpcCggICAnRm9yIHJhdGEgY2hhaW4gZ2V0IHNlcmllcyBtZXRhZGF0YSBVUkkgYXQgY29sbGVjdGlvbiBpZCAyOScsIGFzeW5jIGRvbmUgPT4ge1xuLy8gICAgICAgY29uc3QgcHJvdmlkZXIgPSAnd3NzOi8vcmF0YS5jZW50cmFsaXR5Lm1lL3B1YmxpYy93cyc7XG4vL1xuLy8gICAgICAgY29uc3QgYXBpUmF0YSA9IGF3YWl0IEFwaS5jcmVhdGUoe3Byb3ZpZGVyfSk7XG4vL1xuLy8gICAgICAgY29uc3QgbWV0YWRhdGFQYXRoID0gKGF3YWl0IGFwaVJhdGEucXVlcnkubmZ0LnNlcmllc01ldGFkYXRhVVJJKFxuLy8gICAgICAgICAyOSxcbi8vICAgICAgICAgMFxuLy8gICAgICAgKSkudG9IdW1hbigpO1xuLy8gICAgICAgLy8gY29uc3QgdG9rZW5JZCA9IGFwaVJhdGEucmVnaXN0cnkuY3JlYXRlVHlwZSgnVG9rZW5JZCcsIFsyOSwwLDBdKTtcbi8vICAgICAgIC8vXG4vLyAgICAgICAvLyBjb25zdCB1cmkgPSBhd2FpdCBhcGlSYXRhLnJwYy5uZnQudG9rZW5VcmkodG9rZW5JZCk7XG4vLyAgICAgICAvLyBjb25zb2xlLmxvZygnbWV0YWRhdGFQYXRoOjonLHVyaS50b0h1bWFuKCkpO1xuLy8gICAgICAgZXhwZWN0KG1ldGFkYXRhUGF0aCkudG9FcXVhbChcImlwZnM6Ly9RbVdHWW5uYXBOVVQ5dm9FeDhneVpCWEtzU2dtV1dRWGRrQ3FScnVjUThxZG14XCIpO1xuLy8gICAgICAgYXdhaXQgYXBpUmF0YS5kaXNjb25uZWN0KCk7XG4vLyAgICAgICBkb25lKCk7XG4vLyAgICAgfSlcbi8vXG4vLyAgIH0pXG4vLyB9KTtcbiJdLCJ2ZXJzaW9uIjozfQ==