84e82749f2d557ba496d897e05147128
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
describe('e2e api create', () => {
    it('Find lock balance for rootnet validator', async () => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const validator = "0x0Fa787f51333D9cA66a4A6563b56EececDA49a06";
        const lockBalance = await api.query.balances.locks(validator);
        expect((lockBalance.toJSON())[0].amount).toBeGreaterThanOrEqual(0);
        await api.disconnect();
    });
    it('Should get rejected if the connection fails', async () => {
        const incorrectEndPoint = 'wss://unknow.chain.io/ws';
        const autoConnect = false;
        const provider = new api_1.WsProvider(incorrectEndPoint, autoConnect);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider: provider }));
        await expect(api.isReady).rejects.toThrow('Timed out in 10000 ms.');
    });
    it('subscription test', async (done) => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {
            console.log(`Chain is at block: #${header.number}`);
            expect(header.number).toBeDefined();
            unsubscribe();
            api.disconnect();
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1RDtBQUN2RCw2Q0FBOEM7QUFDOUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUU5QixFQUFFLENBQUMseUNBQXlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckQsTUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDcEIsTUFBTSxTQUFTLEdBQUcsNENBQTRDLENBQUM7UUFDL0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsTUFBTSxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0QsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztRQUNyRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUMsSUFBSSxFQUFDLEVBQUU7UUFDakMsTUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ25FLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEMsV0FBVyxFQUFFLENBQUM7WUFDZCxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDakIsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGlQcm9taXNlLCBXc1Byb3ZpZGVyIH0gZnJvbSAnQHBvbGthZG90L2FwaSc7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSAnQHRoZXJvb3RuZXR3b3JrL2FwaSc7XG5kZXNjcmliZSgnZTJlIGFwaSBjcmVhdGUnLCAoKSA9PiB7XG5cbiAgaXQoJ0ZpbmQgbG9jayBiYWxhbmNlIGZvciByb290bmV0IHZhbGlkYXRvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyVXJsID0gJ3dzczovL3Jvb3Qucm9vdG5ldC5saXZlL3dzJztcbiAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFdzUHJvdmlkZXIocHJvdmlkZXJVcmwpO1xuICAgICAgY29uc29sZS5sb2coJ3Byb3ZpZGVyVXJsJywgcHJvdmlkZXJVcmwpO1xuICAgICAgY29uc3QgYXBpID0gbmV3IEFwaVByb21pc2Uob3B0aW9ucyh7IHByb3ZpZGVyIH0pKTtcbiAgICAgIGF3YWl0IGFwaS5pc1JlYWR5O1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IFwiMHgwRmE3ODdmNTEzMzNEOWNBNjZhNEE2NTYzYjU2RWVjZWNEQTQ5YTA2XCI7XG4gICAgY29uc3QgbG9ja0JhbGFuY2UgPSBhd2FpdCBhcGkucXVlcnkuYmFsYW5jZXMubG9ja3ModmFsaWRhdG9yKTtcbiAgICBleHBlY3QoKGxvY2tCYWxhbmNlLnRvSlNPTigpKVswXS5hbW91bnQpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgYXdhaXQgYXBpLmRpc2Nvbm5lY3QoKTtcbiAgfSk7XG5cbiAgaXQoJ1Nob3VsZCBnZXQgcmVqZWN0ZWQgaWYgdGhlIGNvbm5lY3Rpb24gZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5jb3JyZWN0RW5kUG9pbnQgPSAnd3NzOi8vdW5rbm93LmNoYWluLmlvL3dzJztcbiAgICBjb25zdCBhdXRvQ29ubmVjdCA9IGZhbHNlO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFdzUHJvdmlkZXIoaW5jb3JyZWN0RW5kUG9pbnQsIGF1dG9Db25uZWN0KTtcbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpUHJvbWlzZShvcHRpb25zKHtwcm92aWRlcjogcHJvdmlkZXJ9KSk7XG4gICAgYXdhaXQgZXhwZWN0KGFwaS5pc1JlYWR5KS5yZWplY3RzLnRvVGhyb3coJ1RpbWVkIG91dCBpbiAxMDAwMCBtcy4nKTtcbiAgfSk7XG5cbiAgaXQoJ3N1YnNjcmlwdGlvbiB0ZXN0JywgYXN5bmMgZG9uZSA9PiB7XG4gICAgICBjb25zdCBwcm92aWRlclVybCA9ICd3c3M6Ly9yb290LnJvb3RuZXQubGl2ZS93cyc7XG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBXc1Byb3ZpZGVyKHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdwcm92aWRlclVybCcsIHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoeyBwcm92aWRlciB9KSk7XG4gICAgICBhd2FpdCBhcGkuaXNSZWFkeTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGF3YWl0IGFwaS5ycGMuY2hhaW4uc3Vic2NyaWJlTmV3SGVhZHMoKGhlYWRlcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coYENoYWluIGlzIGF0IGJsb2NrOiAjJHtoZWFkZXIubnVtYmVyfWApO1xuICAgICAgZXhwZWN0KGhlYWRlci5udW1iZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgYXBpLmRpc2Nvbm5lY3QoKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==