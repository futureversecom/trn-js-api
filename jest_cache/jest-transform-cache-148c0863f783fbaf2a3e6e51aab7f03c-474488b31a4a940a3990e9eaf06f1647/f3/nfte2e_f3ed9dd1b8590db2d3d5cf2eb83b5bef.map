{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/nft.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/nft.e2e.ts"],"sourcesContent":["import {ApiPromise, Keyring, WsProvider} from \"@polkadot/api\";\nimport {options} from \"@therootnetwork/api\";\nimport {hexToU8a, stringToHex} from \"@polkadot/util\";\n\nexport const ALITH_PRIVATE_KEY = \"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133\";\nexport const BOB_PRIVATE_KEY = \"0x79c3b7fc0b7697b9414cb87adcb37317d1cab32818ae18c0e97ad76395d1fdcf\";\nconst TOKEN_ID = 1124;\nexport const GAS_TOKEN_ID = 2;\nlet collectionOwner, tokenOwner;\nlet spendingAssetId;\nlet globalCollectionId;\nlet globalTokenIds;\n\ndescribe('DEX RPC calls testing', () => {\n    let api;\n    let alith, bob;\n    beforeAll(async () => {\n        const providerUrl = 'ws://127.0.0.1:9944/';\n        const provider = new WsProvider(providerUrl);\n        api = new ApiPromise(options({provider}));\n        await api.isReady;\n        const keyring = new Keyring({type: \"ethereum\"});\n        alith = keyring.addFromSeed(hexToU8a(ALITH_PRIVATE_KEY));\n        bob = keyring.addFromSeed(hexToU8a(BOB_PRIVATE_KEY));\n        collectionOwner = alith;\n    });\n\n    afterAll(async () => {\n        api.disconnect();\n    });\n\n    describe('NFTs', () => {\n        let collectionId: number;\n\n        beforeEach(async () => {\n            // Create collection and series for each test to use\n            const collectionName = 'global-example-collection';\n            const quantity = 3;\n            const maxIssuance = null;\n            const tokenOwner = null;\n            const royalty = null;\n            const crossChainCompatibility = {\"xrpl\": false};\n            globalTokenIds = [...Array(quantity)]\n            const metadataSchema = \"http://example.com/nft/metadata\";\n            await api.tx.nft.createCollection(\n                collectionName, quantity,\n                maxIssuance, tokenOwner, metadataSchema, royalty, crossChainCompatibility\n            ).signAndSend(collectionOwner, async ({status, events}) => {\n                if (status.isInBlock) {\n                    events.forEach(({event: {data, method}}) => {\n                        if (method == 'CreateCollection') {\n                            globalCollectionId = data[0].toNumber();\n                        }\n                    });\n\n                    await api.tx.nft.mint(globalCollectionId, quantity, tokenOwner.address)\n                        .signAndSend(collectionOwner, {nonce: -1}, async ({status, events}) => {\n                            if (status.isInBlock) {\n                                events.forEach(({event: {data, method}}) => {\n                                    if (method == 'Mint') {\n                                        const collectionId = data[0].toNumber()\n                                        let seriesId = data[1].toNumber();\n                                        globalTokenIds = globalTokenIds.map((_, serialNumber) => [collectionId, seriesId, serialNumber])\n                                    }\n                                });\n                            }\n                        });\n                }\n            });\n        });\n\n          it('creates a collection', async () => {\n              const collectionName = 'example-collection';\n              const quantity = 3;\n              const maxIssuance = null;\n              const tokenOwner = null;\n              const royalty = null;\n              const crossChainCompatibility = {\"xrpl\": false};\n              const metadataSchema = \"http://example.com/nft/metadata\";\n            await api.tx.nft.createCollection(\n              collectionName, quantity,\n                maxIssuance, tokenOwner, metadataSchema, royalty, crossChainCompatibility\n            ).signAndSend(collectionOwner, {nonce: -1},async ({ status, events }) => {\n              if (status.isInBlock) {\n                events.forEach(({phase, event: {data, method, section}}) => {\n                  console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n                  if (method == 'CreateCollection') {\n                    collectionId = data[0].toNumber();\n                    console.log(`got collection: ${collectionId}`);\n                  }\n                });\n                const info = await api.query.nft.collectionInfo(collectionId);\n                expect(info.owner).toBe(collectionOwner.address);\n                expect(info.name).toBe(stringToHex(collectionName));\n              }\n            });\n          });\n\n\n\n  it('burn second token from series', async () => {\n    const serialNumber = 1;\n    const tokenId = [globalCollectionId, serialNumber];\n    // api.registry.createType('TokenId', tokenId);\n    await api.tx.nft.burn(tokenId)\n      .signAndSend(tokenOwner, {nonce: -1}, async ({ status, events }) => {\n        if (status.isInBlock) {\n          events.forEach(({event: {data, method}}) => {\n            if (method == 'Burn') {\n              const [collId, serialNo ] = data;\n              expect(collId.toNumber()).toEqual(globalCollectionId);\n              expect(serialNo.toNumber()).toEqual(serialNumber);\n            }\n          });\n        }\n      });\n  });\n\n  it('finds collected tokens', async () => {\n     const cursor = 0;\n     const limit = 5;\n    const ownedTokens = (await api.rpc.nft.ownedTokens(globalCollectionId, collectionOwner.address, cursor , limit));\n    expect(ownedTokens[2]).toEqual([0, 1, 2]);\n  });\n});\n\n    /// TODO - add more test for listing buy/sell\n});\n\n"],"version":3}