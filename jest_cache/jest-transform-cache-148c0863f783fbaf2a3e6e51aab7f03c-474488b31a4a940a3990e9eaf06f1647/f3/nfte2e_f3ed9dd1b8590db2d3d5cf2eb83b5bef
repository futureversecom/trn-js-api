a01482faf467c54ff0c9585685788554
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GAS_TOKEN_ID = exports.BOB_PRIVATE_KEY = exports.ALITH_PRIVATE_KEY = void 0;
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
const util_1 = require("@polkadot/util");
exports.ALITH_PRIVATE_KEY = "0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133";
exports.BOB_PRIVATE_KEY = "0x79c3b7fc0b7697b9414cb87adcb37317d1cab32818ae18c0e97ad76395d1fdcf";
const TOKEN_ID = 1124;
exports.GAS_TOKEN_ID = 2;
let collectionOwner, tokenOwner;
let spendingAssetId;
let globalCollectionId;
let globalTokenIds;
describe('DEX RPC calls testing', () => {
    let api;
    let alith, bob;
    beforeAll(async () => {
        const providerUrl = 'ws://127.0.0.1:9944/';
        const provider = new api_1.WsProvider(providerUrl);
        api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const keyring = new api_1.Keyring({ type: "ethereum" });
        alith = keyring.addFromSeed((0, util_1.hexToU8a)(exports.ALITH_PRIVATE_KEY));
        bob = keyring.addFromSeed((0, util_1.hexToU8a)(exports.BOB_PRIVATE_KEY));
        collectionOwner = alith;
    });
    afterAll(async () => {
        api.disconnect();
    });
    describe('NFTs', () => {
        let collectionId;
        beforeEach(async () => {
            // Create collection and series for each test to use
            const collectionName = 'global-example-collection';
            const quantity = 3;
            const maxIssuance = null;
            const tokenOwner = null;
            const royalty = null;
            const crossChainCompatibility = { "xrpl": false };
            globalTokenIds = [...Array(quantity)];
            const metadataSchema = "http://example.com/nft/metadata";
            await api.tx.nft.createCollection(collectionName, quantity, maxIssuance, tokenOwner, metadataSchema, royalty, crossChainCompatibility).signAndSend(collectionOwner, async ({ status, events }) => {
                if (status.isInBlock) {
                    events.forEach(({ event: { data, method } }) => {
                        if (method == 'CreateCollection') {
                            globalCollectionId = data[0].toNumber();
                        }
                    });
                    await api.tx.nft.mint(globalCollectionId, quantity, tokenOwner.address)
                        .signAndSend(collectionOwner, { nonce: -1 }, async ({ status, events }) => {
                        if (status.isInBlock) {
                            events.forEach(({ event: { data, method } }) => {
                                if (method == 'Mint') {
                                    const collectionId = data[0].toNumber();
                                    let seriesId = data[1].toNumber();
                                    globalTokenIds = globalTokenIds.map((_, serialNumber) => [collectionId, seriesId, serialNumber]);
                                }
                            });
                        }
                    });
                }
            });
        });
        it('creates a collection', async () => {
            const collectionName = 'example-collection';
            const quantity = 3;
            const maxIssuance = null;
            const tokenOwner = null;
            const royalty = null;
            const crossChainCompatibility = { "xrpl": false };
            const metadataSchema = "http://example.com/nft/metadata";
            await api.tx.nft.createCollection(collectionName, quantity, maxIssuance, tokenOwner, metadataSchema, royalty, crossChainCompatibility).signAndSend(collectionOwner, { nonce: -1 }, async ({ status, events }) => {
                if (status.isInBlock) {
                    events.forEach(({ phase, event: { data, method, section } }) => {
                        console.log('\t', phase.toString(), `: ${section}.${method}`, data.toString());
                        if (method == 'CreateCollection') {
                            collectionId = data[0].toNumber();
                            console.log(`got collection: ${collectionId}`);
                        }
                    });
                    const info = await api.query.nft.collectionInfo(collectionId);
                    expect(info.owner).toBe(collectionOwner.address);
                    expect(info.name).toBe((0, util_1.stringToHex)(collectionName));
                }
            });
        });
        it('burn second token from series', async () => {
            const serialNumber = 1;
            const tokenId = [globalCollectionId, serialNumber];
            // api.registry.createType('TokenId', tokenId);
            await api.tx.nft.burn(tokenId)
                .signAndSend(tokenOwner, { nonce: -1 }, async ({ status, events }) => {
                if (status.isInBlock) {
                    events.forEach(({ event: { data, method } }) => {
                        if (method == 'Burn') {
                            const [collId, serialNo] = data;
                            expect(collId.toNumber()).toEqual(globalCollectionId);
                            expect(serialNo.toNumber()).toEqual(serialNumber);
                        }
                    });
                }
            });
        });
        it('finds collected tokens', async () => {
            const cursor = 0;
            const limit = 5;
            const ownedTokens = (await api.rpc.nft.ownedTokens(globalCollectionId, collectionOwner.address, cursor, limit));
            expect(ownedTokens[2]).toEqual([0, 1, 2]);
        });
    });
    /// TODO - add more test for listing buy/sell
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,