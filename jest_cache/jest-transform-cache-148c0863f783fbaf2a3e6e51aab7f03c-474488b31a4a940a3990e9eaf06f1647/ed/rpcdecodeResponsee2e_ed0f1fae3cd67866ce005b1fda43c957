234e10344f974b59a8e6d8eceb56bda8
"use strict";
// // Copyright 2019-2020 Centrality Investments Limited
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//
// import { RpcCoder } from "@polkadot/rpc-provider/coder";
// import { JsonRpcResponse } from "@polkadot/rpc-provider/types";
//
// describe('decodeResponse', (): void => {
//     let coder: RpcCoder;
//
//     beforeEach((): void => {
//         coder = new RpcCoder();
//     });
//
//     it('expects a non-empty input object', (): void => {
//         expect(
//             () => coder.decodeResponse(undefined as unknown as JsonRpcResponse)
//         ).toThrow(/Empty response/);
//     });
//
//     it('expects a valid jsonrpc field', (): void => {
//         expect(
//             () => coder.decodeResponse({} as JsonRpcResponse)
//         ).toThrow(/Invalid jsonrpc/);
//     });
//
//     it('expects a valid id field', (): void => {
//         expect(
//             () => coder.decodeResponse({ jsonrpc: '2.0' } as JsonRpcResponse)
//         ).toThrow(/Invalid id/);
//     });
//
//     it('expects a valid result field', (): void => {
//         expect(
//             () => coder.decodeResponse({ id: 1, jsonrpc: '2.0' } as JsonRpcResponse)
//         ).toThrow(/No result/);
//     });
//
//     it('throws any error found', (): void => {
//         expect(
//             () => coder.decodeResponse({ error: { code: 123, message: 'test error' }, id: 1, jsonrpc: '2.0' } as JsonRpcResponse)
//         ).toThrow(/123: test error/);
//     });
//
//     it('throws any error found, with data', (): void => {
//         expect(
//             () => coder.decodeResponse({ error: { code: 123, data: 'Error("Some random error description")', message: 'test error' }, id: 1, jsonrpc: '2.0' } as JsonRpcResponse)
//         ).toThrow(/123: test error: Some random error description/);
//     });
//
//     it('allows for number subscription ids', (): void => {
//         expect(
//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 1 } } as JsonRpcResponse)
//         ).toEqual('test result');
//     });
//
//     it('allows for string subscription ids', (): void => {
//         expect(
//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 'abc' } } as JsonRpcResponse)
//         ).toEqual('test result');
//     });
//
//     it('returns the result', (): void => {
//         expect(
//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', result: 'some result' } as JsonRpcResponse)
//         ).toEqual('some result');
//     });
//     it('encodes a valid JsonRPC object', () => {
//         expect(coder.encodeObject('method', ['a', 'b'])).toEqual({
//             id: 1,
//             jsonrpc: '2.0',
//             method: 'method',
//             params: ['a', 'b']
//         });
//         expect(coder.getId()).toEqual(1);
//     });
//     it('encodes a valid JsonRPC JSON string', () => {
//       const p: unknown[] = ['params'];
//         expect(coder.encodeJson('method', p)).toEqual('{"id":1,"jsonrpc":"2.0","method":"method","params":["params"]}');
//     });
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9ycGMuZGVjb2RlUmVzcG9uc2UuZTJlLnRzIiwibWFwcGluZ3MiOiI7QUFBQSx3REFBd0Q7QUFDeEQsS0FBSztBQUNMLHFFQUFxRTtBQUNyRSxzRUFBc0U7QUFDdEUsNkNBQTZDO0FBQzdDLEtBQUs7QUFDTCxvREFBb0Q7QUFDcEQsS0FBSztBQUNMLHlFQUF5RTtBQUN6RSx1RUFBdUU7QUFDdkUsOEVBQThFO0FBQzlFLHlFQUF5RTtBQUN6RSxvQ0FBb0M7QUFDcEMsRUFBRTtBQUNGLDJEQUEyRDtBQUMzRCxrRUFBa0U7QUFDbEUsRUFBRTtBQUNGLDJDQUEyQztBQUMzQywyQkFBMkI7QUFDM0IsRUFBRTtBQUNGLCtCQUErQjtBQUMvQixrQ0FBa0M7QUFDbEMsVUFBVTtBQUNWLEVBQUU7QUFDRiwyREFBMkQ7QUFDM0Qsa0JBQWtCO0FBQ2xCLGtGQUFrRjtBQUNsRix1Q0FBdUM7QUFDdkMsVUFBVTtBQUNWLEVBQUU7QUFDRix3REFBd0Q7QUFDeEQsa0JBQWtCO0FBQ2xCLGdFQUFnRTtBQUNoRSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWLEVBQUU7QUFDRixtREFBbUQ7QUFDbkQsa0JBQWtCO0FBQ2xCLGdGQUFnRjtBQUNoRixtQ0FBbUM7QUFDbkMsVUFBVTtBQUNWLEVBQUU7QUFDRix1REFBdUQ7QUFDdkQsa0JBQWtCO0FBQ2xCLHVGQUF1RjtBQUN2RixrQ0FBa0M7QUFDbEMsVUFBVTtBQUNWLEVBQUU7QUFDRixpREFBaUQ7QUFDakQsa0JBQWtCO0FBQ2xCLG9JQUFvSTtBQUNwSSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWLEVBQUU7QUFDRiw0REFBNEQ7QUFDNUQsa0JBQWtCO0FBQ2xCLG9MQUFvTDtBQUNwTCx1RUFBdUU7QUFDdkUsVUFBVTtBQUNWLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0Qsa0JBQWtCO0FBQ2xCLHFKQUFxSjtBQUNySixvQ0FBb0M7QUFDcEMsVUFBVTtBQUNWLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0Qsa0JBQWtCO0FBQ2xCLHlKQUF5SjtBQUN6SixvQ0FBb0M7QUFDcEMsVUFBVTtBQUNWLEVBQUU7QUFDRiw2Q0FBNkM7QUFDN0Msa0JBQWtCO0FBQ2xCLHdHQUF3RztBQUN4RyxvQ0FBb0M7QUFDcEMsVUFBVTtBQUNWLG1EQUFtRDtBQUNuRCxxRUFBcUU7QUFDckUscUJBQXFCO0FBQ3JCLDhCQUE4QjtBQUM5QixnQ0FBZ0M7QUFDaEMsaUNBQWlDO0FBQ2pDLGNBQWM7QUFDZCw0Q0FBNEM7QUFDNUMsVUFBVTtBQUNWLHdEQUF3RDtBQUN4RCx5Q0FBeUM7QUFDekMsMkhBQTJIO0FBQzNILFVBQVU7QUFDVixNQUFNIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJpc2htYS93b3JrL2Z1dHVyZXZlcnNlL3Rybi1yb290bmV0LWFwaS9wYWNrYWdlcy9hcGkvdGVzdC9lMmUvcnBjLmRlY29kZVJlc3BvbnNlLmUyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvLyBDb3B5cmlnaHQgMjAxOS0yMDIwIENlbnRyYWxpdHkgSW52ZXN0bWVudHMgTGltaXRlZFxuLy8gLy9cbi8vIC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyAvLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyAvLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vIC8vXG4vLyAvLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLyAvL1xuLy8gLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyAvLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyAvLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG4vLyBpbXBvcnQgeyBScGNDb2RlciB9IGZyb20gXCJAcG9sa2Fkb3QvcnBjLXByb3ZpZGVyL2NvZGVyXCI7XG4vLyBpbXBvcnQgeyBKc29uUnBjUmVzcG9uc2UgfSBmcm9tIFwiQHBvbGthZG90L3JwYy1wcm92aWRlci90eXBlc1wiO1xuLy9cbi8vIGRlc2NyaWJlKCdkZWNvZGVSZXNwb25zZScsICgpOiB2b2lkID0+IHtcbi8vICAgICBsZXQgY29kZXI6IFJwY0NvZGVyO1xuLy9cbi8vICAgICBiZWZvcmVFYWNoKCgpOiB2b2lkID0+IHtcbi8vICAgICAgICAgY29kZXIgPSBuZXcgUnBjQ29kZXIoKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ2V4cGVjdHMgYSBub24tZW1wdHkgaW5wdXQgb2JqZWN0JywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICAoKSA9PiBjb2Rlci5kZWNvZGVSZXNwb25zZSh1bmRlZmluZWQgYXMgdW5rbm93biBhcyBKc29uUnBjUmVzcG9uc2UpXG4vLyAgICAgICAgICkudG9UaHJvdygvRW1wdHkgcmVzcG9uc2UvKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ2V4cGVjdHMgYSB2YWxpZCBqc29ucnBjIGZpZWxkJywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICAoKSA9PiBjb2Rlci5kZWNvZGVSZXNwb25zZSh7fSBhcyBKc29uUnBjUmVzcG9uc2UpXG4vLyAgICAgICAgICkudG9UaHJvdygvSW52YWxpZCBqc29ucnBjLyk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCdleHBlY3RzIGEgdmFsaWQgaWQgZmllbGQnLCAoKTogdm9pZCA9PiB7XG4vLyAgICAgICAgIGV4cGVjdChcbi8vICAgICAgICAgICAgICgpID0+IGNvZGVyLmRlY29kZVJlc3BvbnNlKHsganNvbnJwYzogJzIuMCcgfSBhcyBKc29uUnBjUmVzcG9uc2UpXG4vLyAgICAgICAgICkudG9UaHJvdygvSW52YWxpZCBpZC8pO1xuLy8gICAgIH0pO1xuLy9cbi8vICAgICBpdCgnZXhwZWN0cyBhIHZhbGlkIHJlc3VsdCBmaWVsZCcsICgpOiB2b2lkID0+IHtcbi8vICAgICAgICAgZXhwZWN0KFxuLy8gICAgICAgICAgICAgKCkgPT4gY29kZXIuZGVjb2RlUmVzcG9uc2UoeyBpZDogMSwganNvbnJwYzogJzIuMCcgfSBhcyBKc29uUnBjUmVzcG9uc2UpXG4vLyAgICAgICAgICkudG9UaHJvdygvTm8gcmVzdWx0Lyk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCd0aHJvd3MgYW55IGVycm9yIGZvdW5kJywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICAoKSA9PiBjb2Rlci5kZWNvZGVSZXNwb25zZSh7IGVycm9yOiB7IGNvZGU6IDEyMywgbWVzc2FnZTogJ3Rlc3QgZXJyb3InIH0sIGlkOiAxLCBqc29ucnBjOiAnMi4wJyB9IGFzIEpzb25ScGNSZXNwb25zZSlcbi8vICAgICAgICAgKS50b1Rocm93KC8xMjM6IHRlc3QgZXJyb3IvKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ3Rocm93cyBhbnkgZXJyb3IgZm91bmQsIHdpdGggZGF0YScsICgpOiB2b2lkID0+IHtcbi8vICAgICAgICAgZXhwZWN0KFxuLy8gICAgICAgICAgICAgKCkgPT4gY29kZXIuZGVjb2RlUmVzcG9uc2UoeyBlcnJvcjogeyBjb2RlOiAxMjMsIGRhdGE6ICdFcnJvcihcIlNvbWUgcmFuZG9tIGVycm9yIGRlc2NyaXB0aW9uXCIpJywgbWVzc2FnZTogJ3Rlc3QgZXJyb3InIH0sIGlkOiAxLCBqc29ucnBjOiAnMi4wJyB9IGFzIEpzb25ScGNSZXNwb25zZSlcbi8vICAgICAgICAgKS50b1Rocm93KC8xMjM6IHRlc3QgZXJyb3I6IFNvbWUgcmFuZG9tIGVycm9yIGRlc2NyaXB0aW9uLyk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCdhbGxvd3MgZm9yIG51bWJlciBzdWJzY3JpcHRpb24gaWRzJywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICBjb2Rlci5kZWNvZGVSZXNwb25zZSh7IGlkOiAxLCBqc29ucnBjOiAnMi4wJywgbWV0aG9kOiAndGVzdCcsIHBhcmFtczogeyByZXN1bHQ6ICd0ZXN0IHJlc3VsdCcsIHN1YnNjcmlwdGlvbjogMSB9IH0gYXMgSnNvblJwY1Jlc3BvbnNlKVxuLy8gICAgICAgICApLnRvRXF1YWwoJ3Rlc3QgcmVzdWx0Jyk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIGl0KCdhbGxvd3MgZm9yIHN0cmluZyBzdWJzY3JpcHRpb24gaWRzJywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICBjb2Rlci5kZWNvZGVSZXNwb25zZSh7IGlkOiAxLCBqc29ucnBjOiAnMi4wJywgbWV0aG9kOiAndGVzdCcsIHBhcmFtczogeyByZXN1bHQ6ICd0ZXN0IHJlc3VsdCcsIHN1YnNjcmlwdGlvbjogJ2FiYycgfSB9IGFzIEpzb25ScGNSZXNwb25zZSlcbi8vICAgICAgICAgKS50b0VxdWFsKCd0ZXN0IHJlc3VsdCcpO1xuLy8gICAgIH0pO1xuLy9cbi8vICAgICBpdCgncmV0dXJucyB0aGUgcmVzdWx0JywgKCk6IHZvaWQgPT4ge1xuLy8gICAgICAgICBleHBlY3QoXG4vLyAgICAgICAgICAgICBjb2Rlci5kZWNvZGVSZXNwb25zZSh7IGlkOiAxLCBqc29ucnBjOiAnMi4wJywgcmVzdWx0OiAnc29tZSByZXN1bHQnIH0gYXMgSnNvblJwY1Jlc3BvbnNlKVxuLy8gICAgICAgICApLnRvRXF1YWwoJ3NvbWUgcmVzdWx0Jyk7XG4vLyAgICAgfSk7XG4vLyAgICAgaXQoJ2VuY29kZXMgYSB2YWxpZCBKc29uUlBDIG9iamVjdCcsICgpID0+IHtcbi8vICAgICAgICAgZXhwZWN0KGNvZGVyLmVuY29kZU9iamVjdCgnbWV0aG9kJywgWydhJywgJ2InXSkpLnRvRXF1YWwoe1xuLy8gICAgICAgICAgICAgaWQ6IDEsXG4vLyAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbi8vICAgICAgICAgICAgIG1ldGhvZDogJ21ldGhvZCcsXG4vLyAgICAgICAgICAgICBwYXJhbXM6IFsnYScsICdiJ11cbi8vICAgICAgICAgfSk7XG4vLyAgICAgICAgIGV4cGVjdChjb2Rlci5nZXRJZCgpKS50b0VxdWFsKDEpO1xuLy8gICAgIH0pO1xuLy8gICAgIGl0KCdlbmNvZGVzIGEgdmFsaWQgSnNvblJQQyBKU09OIHN0cmluZycsICgpID0+IHtcbi8vICAgICAgIGNvbnN0IHA6IHVua25vd25bXSA9IFsncGFyYW1zJ107XG4vLyAgICAgICAgIGV4cGVjdChjb2Rlci5lbmNvZGVKc29uKCdtZXRob2QnLCBwKSkudG9FcXVhbCgne1wiaWRcIjoxLFwianNvbnJwY1wiOlwiMi4wXCIsXCJtZXRob2RcIjpcIm1ldGhvZFwiLFwicGFyYW1zXCI6W1wicGFyYW1zXCJdfScpO1xuLy8gICAgIH0pO1xuLy8gfSk7XG4iXSwidmVyc2lvbiI6M30=