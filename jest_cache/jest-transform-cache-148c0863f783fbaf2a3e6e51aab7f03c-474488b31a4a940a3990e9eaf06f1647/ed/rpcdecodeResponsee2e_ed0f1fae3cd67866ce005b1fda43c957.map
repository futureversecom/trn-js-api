{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rpc.decodeResponse.e2e.ts","mappings":";AAAA,wDAAwD;AACxD,KAAK;AACL,qEAAqE;AACrE,sEAAsE;AACtE,6CAA6C;AAC7C,KAAK;AACL,oDAAoD;AACpD,KAAK;AACL,yEAAyE;AACzE,uEAAuE;AACvE,8EAA8E;AAC9E,yEAAyE;AACzE,oCAAoC;AACpC,EAAE;AACF,2DAA2D;AAC3D,kEAAkE;AAClE,EAAE;AACF,2CAA2C;AAC3C,2BAA2B;AAC3B,EAAE;AACF,+BAA+B;AAC/B,kCAAkC;AAClC,UAAU;AACV,EAAE;AACF,2DAA2D;AAC3D,kBAAkB;AAClB,kFAAkF;AAClF,uCAAuC;AACvC,UAAU;AACV,EAAE;AACF,wDAAwD;AACxD,kBAAkB;AAClB,gEAAgE;AAChE,wCAAwC;AACxC,UAAU;AACV,EAAE;AACF,mDAAmD;AACnD,kBAAkB;AAClB,gFAAgF;AAChF,mCAAmC;AACnC,UAAU;AACV,EAAE;AACF,uDAAuD;AACvD,kBAAkB;AAClB,uFAAuF;AACvF,kCAAkC;AAClC,UAAU;AACV,EAAE;AACF,iDAAiD;AACjD,kBAAkB;AAClB,oIAAoI;AACpI,wCAAwC;AACxC,UAAU;AACV,EAAE;AACF,4DAA4D;AAC5D,kBAAkB;AAClB,oLAAoL;AACpL,uEAAuE;AACvE,UAAU;AACV,EAAE;AACF,6DAA6D;AAC7D,kBAAkB;AAClB,qJAAqJ;AACrJ,oCAAoC;AACpC,UAAU;AACV,EAAE;AACF,6DAA6D;AAC7D,kBAAkB;AAClB,yJAAyJ;AACzJ,oCAAoC;AACpC,UAAU;AACV,EAAE;AACF,6CAA6C;AAC7C,kBAAkB;AAClB,wGAAwG;AACxG,oCAAoC;AACpC,UAAU;AACV,mDAAmD;AACnD,qEAAqE;AACrE,qBAAqB;AACrB,8BAA8B;AAC9B,gCAAgC;AAChC,iCAAiC;AACjC,cAAc;AACd,4CAA4C;AAC5C,UAAU;AACV,wDAAwD;AACxD,yCAAyC;AACzC,2HAA2H;AAC3H,UAAU;AACV,MAAM","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rpc.decodeResponse.e2e.ts"],"sourcesContent":["// // Copyright 2019-2020 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import { RpcCoder } from \"@polkadot/rpc-provider/coder\";\n// import { JsonRpcResponse } from \"@polkadot/rpc-provider/types\";\n//\n// describe('decodeResponse', (): void => {\n//     let coder: RpcCoder;\n//\n//     beforeEach((): void => {\n//         coder = new RpcCoder();\n//     });\n//\n//     it('expects a non-empty input object', (): void => {\n//         expect(\n//             () => coder.decodeResponse(undefined as unknown as JsonRpcResponse)\n//         ).toThrow(/Empty response/);\n//     });\n//\n//     it('expects a valid jsonrpc field', (): void => {\n//         expect(\n//             () => coder.decodeResponse({} as JsonRpcResponse)\n//         ).toThrow(/Invalid jsonrpc/);\n//     });\n//\n//     it('expects a valid id field', (): void => {\n//         expect(\n//             () => coder.decodeResponse({ jsonrpc: '2.0' } as JsonRpcResponse)\n//         ).toThrow(/Invalid id/);\n//     });\n//\n//     it('expects a valid result field', (): void => {\n//         expect(\n//             () => coder.decodeResponse({ id: 1, jsonrpc: '2.0' } as JsonRpcResponse)\n//         ).toThrow(/No result/);\n//     });\n//\n//     it('throws any error found', (): void => {\n//         expect(\n//             () => coder.decodeResponse({ error: { code: 123, message: 'test error' }, id: 1, jsonrpc: '2.0' } as JsonRpcResponse)\n//         ).toThrow(/123: test error/);\n//     });\n//\n//     it('throws any error found, with data', (): void => {\n//         expect(\n//             () => coder.decodeResponse({ error: { code: 123, data: 'Error(\"Some random error description\")', message: 'test error' }, id: 1, jsonrpc: '2.0' } as JsonRpcResponse)\n//         ).toThrow(/123: test error: Some random error description/);\n//     });\n//\n//     it('allows for number subscription ids', (): void => {\n//         expect(\n//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 1 } } as JsonRpcResponse)\n//         ).toEqual('test result');\n//     });\n//\n//     it('allows for string subscription ids', (): void => {\n//         expect(\n//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 'abc' } } as JsonRpcResponse)\n//         ).toEqual('test result');\n//     });\n//\n//     it('returns the result', (): void => {\n//         expect(\n//             coder.decodeResponse({ id: 1, jsonrpc: '2.0', result: 'some result' } as JsonRpcResponse)\n//         ).toEqual('some result');\n//     });\n//     it('encodes a valid JsonRPC object', () => {\n//         expect(coder.encodeObject('method', ['a', 'b'])).toEqual({\n//             id: 1,\n//             jsonrpc: '2.0',\n//             method: 'method',\n//             params: ['a', 'b']\n//         });\n//         expect(coder.getId()).toEqual(1);\n//     });\n//     it('encodes a valid JsonRPC JSON string', () => {\n//       const p: unknown[] = ['params'];\n//         expect(coder.encodeJson('method', p)).toEqual('{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"method\",\"params\":[\"params\"]}');\n//     });\n// });\n"],"version":3}