924e36558a5471a5134fe251b5832044
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const versioned = [
    {
        "minmax": [
            0,
            null
        ],
        "types": {
            "AccountId": "EthereumAccountId",
            "AccountId20": "EthereumAccountId",
            "AccountId32": "EthereumAccountId",
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Lookup0": "AccountId",
            "AssetId": "u32",
            "Balance": "u128",
            "EventProofId": "u64",
            "ValidatorSetId": "u64",
            "EthereumSignature": {
                "r": "H256",
                "s": "H256",
                "v": "U8"
            },
            "ExtrinsicSignature": "EthereumSignature",
            "EthyId": "[u8; 32]",
            "EthWalletCall": {
                "nonce": "u32"
            },
            "XRPLTxData": {
                "_enum": {
                    Payment: {
                        amount: "Balance",
                        destination: "H160"
                    },
                    CurrencyPayment: {
                        "amount": "Balance",
                        "address": "H160",
                        "currencyId": "H256"
                    }
                }
            },
            "EthEventProofResponse": {
                "event_id": "EventProofId",
                "signatures": "Vec<Bytes>",
                "validators": "Vec<AccountId20>",
                "validator_set_id": "ValidatorSetId",
                "block": "H256",
                "tag": "Option<Bytes>"
            },
            "XrplEventProofResponse": {
                "event_id": "EventProofId",
                "signatures": "Vec<Bytes>",
                "validators": "Vec<Bytes>",
                "validator_set_id": "ValidatorSetId",
                "block": "H256",
                "tag": "Option<Bytes>"
            },
            "VersionedEventProof": {
                "_enum": {
                    "sentinel": null,
                    "EventProof": "EventProof"
                }
            },
            "CollectionUuid": "u32",
            "SerialNumber": "u32",
            "TokenId": "(CollectionUuid, SerialNumber)"
        }
    }
];
exports.default = versioned;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL3R5cGUtZGVmaW5pdGlvbnMvc3JjL3NwZWMvcm9vdG5ldC50cyIsIm1hcHBpbmdzIjoiOztBQUdBLE1BQU0sU0FBUyxHQUE0QjtJQUN2QztRQUNGLFFBQVEsRUFBRTtZQUNSLENBQUM7WUFDRCxJQUFJO1NBQ0w7UUFDRCxPQUFPLEVBQUU7WUFDUCxXQUFXLEVBQUUsbUJBQW1CO1lBQ2hDLGFBQWEsRUFBRSxtQkFBbUI7WUFDbEMsYUFBYSxFQUFFLG1CQUFtQjtZQUNsQyxTQUFTLEVBQUUsV0FBVztZQUN0QixjQUFjLEVBQUUsV0FBVztZQUMzQixTQUFTLEVBQUUsV0FBVztZQUN0QixTQUFTLEVBQUUsS0FBSztZQUNoQixTQUFTLEVBQUUsTUFBTTtZQUNqQixjQUFjLEVBQUUsS0FBSztZQUNyQixnQkFBZ0IsRUFBRSxLQUFLO1lBQ3ZCLG1CQUFtQixFQUFFO2dCQUNuQixHQUFHLEVBQUUsTUFBTTtnQkFDWCxHQUFHLEVBQUUsTUFBTTtnQkFDWCxHQUFHLEVBQUUsSUFBSTthQUNWO1lBQ0Qsb0JBQW9CLEVBQUUsbUJBQW1CO1lBQ3pDLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLGVBQWUsRUFBRTtnQkFDZixPQUFPLEVBQUUsS0FBSzthQUNmO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLE9BQU8sRUFBRTtvQkFDUCxPQUFPLEVBQUU7d0JBQ1AsTUFBTSxFQUFFLFNBQVM7d0JBQ2pCLFdBQVcsRUFBRSxNQUFNO3FCQUNwQjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2YsUUFBUSxFQUFFLFNBQVM7d0JBQ25CLFNBQVMsRUFBRSxNQUFNO3dCQUNqQixZQUFZLEVBQUUsTUFBTTtxQkFDckI7aUJBQ0Y7YUFDSztZQUNSLHVCQUF1QixFQUFFO2dCQUN2QixVQUFVLEVBQUUsY0FBYztnQkFDMUIsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFlBQVksRUFBRSxrQkFBa0I7Z0JBQ2hDLGtCQUFrQixFQUFFLGdCQUFnQjtnQkFDcEMsT0FBTyxFQUFFLE1BQU07Z0JBQ2YsS0FBSyxFQUFFLGVBQWU7YUFDdkI7WUFDRCx3QkFBd0IsRUFBRTtnQkFDeEIsVUFBVSxFQUFFLGNBQWM7Z0JBQzFCLFlBQVksRUFBRSxZQUFZO2dCQUMxQixZQUFZLEVBQUUsWUFBWTtnQkFDMUIsa0JBQWtCLEVBQUUsZ0JBQWdCO2dCQUNwQyxPQUFPLEVBQUUsTUFBTTtnQkFDZixLQUFLLEVBQUUsZUFBZTthQUN2QjtZQUNELHFCQUFxQixFQUFFO2dCQUNyQixPQUFPLEVBQUU7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFlBQVksRUFBRSxZQUFZO2lCQUMzQjthQUNGO1lBQ0QsZ0JBQWdCLEVBQUUsS0FBSztZQUN2QixjQUFjLEVBQUUsS0FBSztZQUNyQixTQUFTLEVBQUUsZ0NBQWdDO1NBQzVDO0tBQ0Y7Q0FDQSxDQUFBO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJpc2htYS93b3JrL2Z1dHVyZXZlcnNlL3Rybi1yb290bmV0LWFwaS9wYWNrYWdlcy90eXBlLWRlZmluaXRpb25zL3NyYy9zcGVjL3Jvb3RuZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPdmVycmlkZVZlcnNpb25lZFR5cGUgfSBmcm9tICdAcG9sa2Fkb3QvdHlwZXMvdHlwZXMnO1xuXG5cbmNvbnN0IHZlcnNpb25lZDogT3ZlcnJpZGVWZXJzaW9uZWRUeXBlW10gPSBbXG4gICAge1xuICBcIm1pbm1heFwiOiBbXG4gICAgMCxcbiAgICBudWxsXG4gIF0sXG4gIFwidHlwZXNcIjoge1xuICAgIFwiQWNjb3VudElkXCI6IFwiRXRoZXJldW1BY2NvdW50SWRcIixcbiAgICBcIkFjY291bnRJZDIwXCI6IFwiRXRoZXJldW1BY2NvdW50SWRcIixcbiAgICBcIkFjY291bnRJZDMyXCI6IFwiRXRoZXJldW1BY2NvdW50SWRcIixcbiAgICBcIkFkZHJlc3NcIjogXCJBY2NvdW50SWRcIixcbiAgICBcIkxvb2t1cFNvdXJjZVwiOiBcIkFjY291bnRJZFwiLFxuICAgIFwiTG9va3VwMFwiOiBcIkFjY291bnRJZFwiLFxuICAgIFwiQXNzZXRJZFwiOiBcInUzMlwiLFxuICAgIFwiQmFsYW5jZVwiOiBcInUxMjhcIixcbiAgICBcIkV2ZW50UHJvb2ZJZFwiOiBcInU2NFwiLFxuICAgIFwiVmFsaWRhdG9yU2V0SWRcIjogXCJ1NjRcIixcbiAgICBcIkV0aGVyZXVtU2lnbmF0dXJlXCI6IHtcbiAgICAgIFwiclwiOiBcIkgyNTZcIixcbiAgICAgIFwic1wiOiBcIkgyNTZcIixcbiAgICAgIFwidlwiOiBcIlU4XCJcbiAgICB9LFxuICAgIFwiRXh0cmluc2ljU2lnbmF0dXJlXCI6IFwiRXRoZXJldW1TaWduYXR1cmVcIixcbiAgICBcIkV0aHlJZFwiOiBcIlt1ODsgMzJdXCIsXG4gICAgXCJFdGhXYWxsZXRDYWxsXCI6IHtcbiAgICAgIFwibm9uY2VcIjogXCJ1MzJcIlxuICAgIH0sXG4gICAgXCJYUlBMVHhEYXRhXCI6IHtcbiAgICAgIFwiX2VudW1cIjoge1xuICAgICAgICBQYXltZW50OiB7XG4gICAgICAgICAgYW1vdW50OiBcIkJhbGFuY2VcIixcbiAgICAgICAgICBkZXN0aW5hdGlvbjogXCJIMTYwXCJcbiAgICAgICAgfSxcbiAgICAgICAgQ3VycmVuY3lQYXltZW50OiB7XG4gICAgICAgICAgXCJhbW91bnRcIjogXCJCYWxhbmNlXCIsXG4gICAgICAgICAgXCJhZGRyZXNzXCI6IFwiSDE2MFwiLFxuICAgICAgICAgIFwiY3VycmVuY3lJZFwiOiBcIkgyNTZcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBhcyBhbnksXG4gICAgXCJFdGhFdmVudFByb29mUmVzcG9uc2VcIjoge1xuICAgICAgXCJldmVudF9pZFwiOiBcIkV2ZW50UHJvb2ZJZFwiLFxuICAgICAgXCJzaWduYXR1cmVzXCI6IFwiVmVjPEJ5dGVzPlwiLFxuICAgICAgXCJ2YWxpZGF0b3JzXCI6IFwiVmVjPEFjY291bnRJZDIwPlwiLFxuICAgICAgXCJ2YWxpZGF0b3Jfc2V0X2lkXCI6IFwiVmFsaWRhdG9yU2V0SWRcIixcbiAgICAgIFwiYmxvY2tcIjogXCJIMjU2XCIsXG4gICAgICBcInRhZ1wiOiBcIk9wdGlvbjxCeXRlcz5cIlxuICAgIH0sXG4gICAgXCJYcnBsRXZlbnRQcm9vZlJlc3BvbnNlXCI6IHtcbiAgICAgIFwiZXZlbnRfaWRcIjogXCJFdmVudFByb29mSWRcIixcbiAgICAgIFwic2lnbmF0dXJlc1wiOiBcIlZlYzxCeXRlcz5cIixcbiAgICAgIFwidmFsaWRhdG9yc1wiOiBcIlZlYzxCeXRlcz5cIixcbiAgICAgIFwidmFsaWRhdG9yX3NldF9pZFwiOiBcIlZhbGlkYXRvclNldElkXCIsXG4gICAgICBcImJsb2NrXCI6IFwiSDI1NlwiLFxuICAgICAgXCJ0YWdcIjogXCJPcHRpb248Qnl0ZXM+XCJcbiAgICB9LFxuICAgIFwiVmVyc2lvbmVkRXZlbnRQcm9vZlwiOiB7XG4gICAgICBcIl9lbnVtXCI6IHtcbiAgICAgICAgXCJzZW50aW5lbFwiOiBudWxsLFxuICAgICAgICBcIkV2ZW50UHJvb2ZcIjogXCJFdmVudFByb29mXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiQ29sbGVjdGlvblV1aWRcIjogXCJ1MzJcIixcbiAgICBcIlNlcmlhbE51bWJlclwiOiBcInUzMlwiLFxuICAgIFwiVG9rZW5JZFwiOiBcIihDb2xsZWN0aW9uVXVpZCwgU2VyaWFsTnVtYmVyKVwiXG4gIH1cbn1cbl1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbmVkO1xuIl0sInZlcnNpb24iOjN9