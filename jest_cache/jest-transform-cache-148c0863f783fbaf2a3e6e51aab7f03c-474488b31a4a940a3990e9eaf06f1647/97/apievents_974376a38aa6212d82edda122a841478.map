{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-events.ts","mappings":";AAAA,mEAAmE;AACnE,oBAAoB;;AAEpB,8DAA8D;AAC9D,6DAA6D;AAC7D,2CAAyC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-events.ts"],"sourcesContent":["// Auto-generated via `yarn polkadot-types-from-chain`, do not edit\n/* eslint-disable */\n\n// import type lookup before we augment - in some environments\n// this is required to allow for ambient/previous definitions\nimport '@polkadot/api-base/types/events';\n\nimport type { ApiTypes, AugmentedEvent } from '@polkadot/api-base/types';\nimport type { Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';\nimport type { ITuple } from '@polkadot/types-codec/types';\nimport type { EthereumLog, EvmCoreErrorExitReason, FrameSupportScheduleLookupError, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletDexTradingPair, PalletElectionProviderMultiPhaseElectionCompute, PalletEthyEthySigningRequest, PalletEthyEventClaim, PalletImOnlineSr25519AppSr25519Public, PalletNftAuctionClosureReason, PalletNftCrossChainCompatibility, PalletNftFixedPriceClosureReason, PalletNftOriginChain, PalletNftRoyaltiesSchedule, PalletStakingExposure, PalletStakingValidatorPrefs, SeedPalletCommonEventRouterError, SeedPrimitivesSignatureAccountId20, SeedRuntimeImplsProxyType, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';\nimport type { H160, H256, H512, Permill } from '@therootnetwork/types/interfaces/runtime';\n\nexport type __AugmentedEvent<ApiType extends ApiTypes> = AugmentedEvent<ApiType>;\n\ndeclare module '@polkadot/api-base/types/events' {\n  interface AugmentedEvents<ApiType extends ApiTypes> {\n    assets: {\n      /**\n       * An approval for account `delegate` was cancelled by `owner`.\n       **/\n      ApprovalCancelled: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * (Additional) funds have been approved for transfer to a destination account.\n       **/\n      ApprovedTransfer: AugmentedEvent<ApiType, [assetId: u32, source: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, amount: u128], { assetId: u32, source: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Some asset `asset_id` was frozen.\n       **/\n      AssetFrozen: AugmentedEvent<ApiType, [assetId: u32], { assetId: u32 }>;\n      /**\n       * An asset has had its attributes changed by the `Force` origin.\n       **/\n      AssetStatusChanged: AugmentedEvent<ApiType, [assetId: u32], { assetId: u32 }>;\n      /**\n       * Some asset `asset_id` was thawed.\n       **/\n      AssetThawed: AugmentedEvent<ApiType, [assetId: u32], { assetId: u32 }>;\n      /**\n       * Some assets were destroyed.\n       **/\n      Burned: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20, balance: u128], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20, balance: u128 }>;\n      /**\n       * Some asset class was created.\n       **/\n      Created: AugmentedEvent<ApiType, [assetId: u32, creator: SeedPrimitivesSignatureAccountId20, owner: SeedPrimitivesSignatureAccountId20], { assetId: u32, creator: SeedPrimitivesSignatureAccountId20, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * An asset class was destroyed.\n       **/\n      Destroyed: AugmentedEvent<ApiType, [assetId: u32], { assetId: u32 }>;\n      /**\n       * Some asset class was force-created.\n       **/\n      ForceCreated: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Some account `who` was frozen.\n       **/\n      Frozen: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20], { assetId: u32, who: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Some assets were issued.\n       **/\n      Issued: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20, totalSupply: u128], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20, totalSupply: u128 }>;\n      /**\n       * Metadata has been cleared for an asset.\n       **/\n      MetadataCleared: AugmentedEvent<ApiType, [assetId: u32], { assetId: u32 }>;\n      /**\n       * New metadata has been set for an asset.\n       **/\n      MetadataSet: AugmentedEvent<ApiType, [assetId: u32, name: Bytes, symbol_: Bytes, decimals: u8, isFrozen: bool], { assetId: u32, name: Bytes, symbol: Bytes, decimals: u8, isFrozen: bool }>;\n      /**\n       * The owner changed.\n       **/\n      OwnerChanged: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * The management team changed.\n       **/\n      TeamChanged: AugmentedEvent<ApiType, [assetId: u32, issuer: SeedPrimitivesSignatureAccountId20, admin: SeedPrimitivesSignatureAccountId20, freezer: SeedPrimitivesSignatureAccountId20], { assetId: u32, issuer: SeedPrimitivesSignatureAccountId20, admin: SeedPrimitivesSignatureAccountId20, freezer: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Some account `who` was thawed.\n       **/\n      Thawed: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20], { assetId: u32, who: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Some assets were transferred.\n       **/\n      Transferred: AugmentedEvent<ApiType, [assetId: u32, from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128], { assetId: u32, from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * An `amount` was transferred in its entirety from `owner` to `destination` by\n       * the approved `delegate`.\n       **/\n      TransferredApproved: AugmentedEvent<ApiType, [assetId: u32, owner: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, destination: SeedPrimitivesSignatureAccountId20, amount: u128], { assetId: u32, owner: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, destination: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    assetsExt: {\n      /**\n       * New asset has been created\n       **/\n      CreateAsset: AugmentedEvent<ApiType, [assetId: u32, creator: SeedPrimitivesSignatureAccountId20, initialBalance: u128], { assetId: u32, creator: SeedPrimitivesSignatureAccountId20, initialBalance: u128 }>;\n      /**\n       * Assets were deposited into this account by the system e.g. refunding gas\n       **/\n      InternalDeposit: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Assets were withdrawn from this account by the system e.g. paying tx fees\n       **/\n      InternalWithdraw: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Some assets have been placed on hold by a pallet\n       **/\n      PlaceHold: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128, palletId: U8aFixed], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128, palletId: U8aFixed }>;\n      /**\n       * Some held assets have been released by a pallet\n       **/\n      ReleaseHold: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128, palletId: U8aFixed], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, amount: u128, palletId: U8aFixed }>;\n      /**\n       * Some held assets were spend by a pallet\n       **/\n      SpendHold: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, spends: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, u128]>>, palletId: U8aFixed], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, spends: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, u128]>>, palletId: U8aFixed }>;\n      /**\n       * Multi-part transfer of assets from who\n       **/\n      SplitTransfer: AugmentedEvent<ApiType, [assetId: u32, who: SeedPrimitivesSignatureAccountId20, transfers: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, u128]>>], { assetId: u32, who: SeedPrimitivesSignatureAccountId20, transfers: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, u128]>> }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    balances: {\n      /**\n       * A balance was set by root.\n       **/\n      BalanceSet: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, free: u128, reserved: u128], { who: SeedPrimitivesSignatureAccountId20, free: u128, reserved: u128 }>;\n      /**\n       * Some amount was deposited (e.g. for transaction fees).\n       **/\n      Deposit: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, amount: u128], { who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * An account was removed whose balance was non-zero but below ExistentialDeposit,\n       * resulting in an outright loss.\n       **/\n      DustLost: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, amount: u128], { account: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * An account was created with some free balance.\n       **/\n      Endowed: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, freeBalance: u128], { account: SeedPrimitivesSignatureAccountId20, freeBalance: u128 }>;\n      /**\n       * Some balance was reserved (moved from free to reserved).\n       **/\n      Reserved: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, amount: u128], { who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Some balance was moved from the reserve of the first account to the second account.\n       * Final argument indicates the destination balance type.\n       **/\n      ReserveRepatriated: AugmentedEvent<ApiType, [from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128, destinationStatus: FrameSupportTokensMiscBalanceStatus], { from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128, destinationStatus: FrameSupportTokensMiscBalanceStatus }>;\n      /**\n       * Some amount was removed from the account (e.g. for misbehavior).\n       **/\n      Slashed: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, amount: u128], { who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Transfer succeeded.\n       **/\n      Transfer: AugmentedEvent<ApiType, [from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128], { from: SeedPrimitivesSignatureAccountId20, to: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Some balance was unreserved (moved from reserved to free).\n       **/\n      Unreserved: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, amount: u128], { who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Some amount was withdrawn from the account (e.g. for transaction fees).\n       **/\n      Withdraw: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, amount: u128], { who: SeedPrimitivesSignatureAccountId20, amount: u128 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    dex: {\n      /**\n       * Add liquidity success. \\[who, asset_id_0, reserve_0_increment,\n       * asset_id_1, reserve_1_increment, share_increment\\]\n       **/\n      AddLiquidity: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u32, u128, u32, u128, u128]>;\n      /**\n       * add provision success \\[who, asset_id_0, contribution_0,\n       * asset_id_1, contribution_1\\]\n       **/\n      AddProvision: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u32, u128, u32, u128]>;\n      /**\n       * Disable trading pair. \\[trading_pair\\]\n       **/\n      DisableTradingPair: AugmentedEvent<ApiType, [PalletDexTradingPair]>;\n      /**\n       * Enable trading pair. \\[trading_pair\\]\n       **/\n      EnableTradingPair: AugmentedEvent<ApiType, [PalletDexTradingPair]>;\n      /**\n       * Provisioning trading pair convert to Enabled. \\[trading_pair,\n       * pool_0_amount, pool_1_amount, total_share_amount\\]\n       **/\n      ProvisioningToEnabled: AugmentedEvent<ApiType, [PalletDexTradingPair, u128, u128, u128]>;\n      /**\n       * Remove liquidity from the trading pool success. \\[who,\n       * asset_id_0, reserve_0_decrement, asset_id_1, reserve_1_decrement,\n       * share_decrement\\]\n       **/\n      RemoveLiquidity: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u32, u128, u32, u128, u128]>;\n      /**\n       * Use supply Asset to swap target Asset. \\[trader, trading_path,\n       * supply_Asset_amount, target_Asset_amount\\]\n       **/\n      Swap: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, Vec<u32>, u128, u128]>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    echo: {\n      /**\n       * A ping was received from Ethereum\n       **/\n      PingReceived: AugmentedEvent<ApiType, [sessionId: u64, source: H160, data: Bytes], { sessionId: u64, source: H160, data: Bytes }>;\n      /**\n       * A ping message was sent to Ethereum\n       **/\n      PingSent: AugmentedEvent<ApiType, [sessionId: u64, source: H160, destination: H160, eventProofId: u64], { sessionId: u64, source: H160, destination: H160, eventProofId: u64 }>;\n      /**\n       * A pong response was received from Ethereum\n       **/\n      PongReceived: AugmentedEvent<ApiType, [sessionId: u64, source: H160, data: Bytes], { sessionId: u64, source: H160, data: Bytes }>;\n      /**\n       * A pong message was sent to Ethereum\n       **/\n      PongSent: AugmentedEvent<ApiType, [sessionId: u64, source: H160, destination: H160, eventProofId: u64], { sessionId: u64, source: H160, destination: H160, eventProofId: u64 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    electionProviderMultiPhase: {\n      /**\n       * The election has been finalized, with `Some` of the given computation, or else if the\n       * election failed, `None`.\n       **/\n      ElectionFinalized: AugmentedEvent<ApiType, [electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>], { electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute> }>;\n      /**\n       * An account has been rewarded for their signed submission being finalized.\n       **/\n      Rewarded: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, value: u128], { account: SeedPrimitivesSignatureAccountId20, value: u128 }>;\n      /**\n       * The signed phase of the given round has started.\n       **/\n      SignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;\n      /**\n       * An account has been slashed for submitting an invalid signed submission.\n       **/\n      Slashed: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, value: u128], { account: SeedPrimitivesSignatureAccountId20, value: u128 }>;\n      /**\n       * A solution was stored with the given compute.\n       * \n       * If the solution is signed, this means that it hasn't yet been processed. If the\n       * solution is unsigned, this means that it has also been processed.\n       * \n       * The `bool` is `true` when a previous solution was ejected to make room for this one.\n       **/\n      SolutionStored: AugmentedEvent<ApiType, [electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool], { electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool }>;\n      /**\n       * The unsigned phase of the given round has started.\n       **/\n      UnsignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    erc20Peg: {\n      /**\n       * A delayed erc20 deposit has failed (payment_id, beneficiary)\n       **/\n      DelayedErc20DepositFailed: AugmentedEvent<ApiType, [u64, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * A delayed erc20 withdrawal has failed (asset_id, beneficiary)\n       **/\n      DelayedErc20WithdrawalFailed: AugmentedEvent<ApiType, [u32, H160]>;\n      /**\n       * A bridged erc20 deposit succeeded. (asset, amount, beneficiary)\n       **/\n      Erc20Deposit: AugmentedEvent<ApiType, [u32, u128, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * An erc20 deposit has been delayed.(payment_id, scheduled block, amount, beneficiary)\n       **/\n      Erc20DepositDelayed: AugmentedEvent<ApiType, [u64, u32, u128, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * A bridged erc20 deposit failed. (source address, abi data)\n       **/\n      Erc20DepositFail: AugmentedEvent<ApiType, [H160, Bytes]>;\n      /**\n       * Tokens were burnt for withdrawal on Ethereum as ERC20s (asset, amount, beneficiary)\n       **/\n      Erc20Withdraw: AugmentedEvent<ApiType, [u32, u128, H160]>;\n      /**\n       * A withdrawal has been delayed.(payment_id, scheduled block, amount, beneficiary)\n       **/\n      Erc20WithdrawalDelayed: AugmentedEvent<ApiType, [u64, u32, u128, H160]>;\n      /**\n       * There are no more payment ids available, they've been exhausted\n       **/\n      NoAvailableDelayedPaymentIds: AugmentedEvent<ApiType, []>;\n      /**\n       * A delay was added for an asset_id (asset_id, min_balance, delay)\n       **/\n      PaymentDelaySet: AugmentedEvent<ApiType, [u32, u128, u32]>;\n      /**\n       * The peg contract address has been set\n       **/\n      SetContractAddress: AugmentedEvent<ApiType, [H160]>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    ethBridge: {\n      /**\n       * A notary (validator) set change is in motion (event_id, new_validator_set_id)\n       * A proof for the change will be generated with the given `event_id`\n       **/\n      AuthoritySetChange: AugmentedEvent<ApiType, [u64, u64]>;\n      /**\n       * An event has been challenged (claim_id, challenger)\n       **/\n      Challenged: AugmentedEvent<ApiType, [u64, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * An event proof has been sent for signing by ethy-gadget\n       **/\n      EventSend: AugmentedEvent<ApiType, [eventProofId: u64, signingRequest: PalletEthyEthySigningRequest], { eventProofId: u64, signingRequest: PalletEthyEthySigningRequest }>;\n      /**\n       * An event has been submitted from Ethereum (event_claim_id, event_claim, process_at)\n       **/\n      EventSubmit: AugmentedEvent<ApiType, [u64, PalletEthyEventClaim, u32]>;\n      /**\n       * The schedule to unpause the bridge has failed (scheduled_block)\n       **/\n      FinaliseScheduleFail: AugmentedEvent<ApiType, [u32]>;\n      /**\n       * Verifying an event failed\n       **/\n      Invalid: AugmentedEvent<ApiType, [u64]>;\n      /**\n       * The event is still awaiting consensus. Process block pushed out (claim_id, process_at)\n       **/\n      ProcessAtExtended: AugmentedEvent<ApiType, [u64, u32]>;\n      /**\n       * Processing an event failed\n       **/\n      ProcessingFailed: AugmentedEvent<ApiType, [u64, SeedPalletCommonEventRouterError]>;\n      /**\n       * Processing an event succeeded\n       **/\n      ProcessingOk: AugmentedEvent<ApiType, [u64]>;\n      /**\n       * Generating event proof delayed as bridge is paused\n       **/\n      ProofDelayed: AugmentedEvent<ApiType, [u64]>;\n      /**\n       * An account has deposited a relayer bond\n       **/\n      RelayerBondDeposit: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * An account has withdrawn a relayer bond\n       **/\n      RelayerBondWithdraw: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * A new relayer has been set\n       **/\n      RelayerSet: AugmentedEvent<ApiType, [Option<SeedPrimitivesSignatureAccountId20>]>;\n      /**\n       * The bridge contract address has been set\n       **/\n      SetContractAddress: AugmentedEvent<ApiType, [H160]>;\n      /**\n       * Verifying an event succeeded\n       **/\n      Verified: AugmentedEvent<ApiType, [u64]>;\n      /**\n       * A notary (validator) set change for Xrpl is in motion (event_id, new_validator_set_id)\n       * A proof for the change will be generated with the given `event_id`\n       **/\n      XrplAuthoritySetChange: AugmentedEvent<ApiType, [u64, u64]>;\n      /**\n       * Xrpl authority set change request failed\n       **/\n      XrplAuthoritySetChangeRequestFailed: AugmentedEvent<ApiType, []>;\n      /**\n       * Xrpl Door signers are set\n       **/\n      XrplDoorSignersSet: AugmentedEvent<ApiType, []>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    ethereum: {\n      /**\n       * An ethereum transaction was successfully executed.\n       **/\n      Executed: AugmentedEvent<ApiType, [from: H160, to: H160, transactionHash: H256, exitReason: EvmCoreErrorExitReason], { from: H160, to: H160, transactionHash: H256, exitReason: EvmCoreErrorExitReason }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    evm: {\n      /**\n       * A contract has been created at given address.\n       **/\n      Created: AugmentedEvent<ApiType, [address: H160], { address: H160 }>;\n      /**\n       * A contract was attempted to be created, but the execution failed.\n       **/\n      CreatedFailed: AugmentedEvent<ApiType, [address: H160], { address: H160 }>;\n      /**\n       * A contract has been executed successfully with states applied.\n       **/\n      Executed: AugmentedEvent<ApiType, [address: H160], { address: H160 }>;\n      /**\n       * A contract has been executed with errors. States are reverted with only gas fees applied.\n       **/\n      ExecutedFailed: AugmentedEvent<ApiType, [address: H160], { address: H160 }>;\n      /**\n       * Ethereum events from contracts.\n       **/\n      Log: AugmentedEvent<ApiType, [log: EthereumLog], { log: EthereumLog }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    evmChainId: {\n      ChainIdSet: AugmentedEvent<ApiType, [u64]>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    feeControl: {\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    feeProxy: {\n      /**\n       * A call was made with specified payment asset\n       **/\n      CallWithFeePreferences: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, paymentAsset: u32, maxPayment: u128], { who: SeedPrimitivesSignatureAccountId20, paymentAsset: u32, maxPayment: u128 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    futurepass: {\n      /**\n       * Futurepass set as default proxy\n       **/\n      DefaultFuturepassSet: AugmentedEvent<ApiType, [delegate: SeedPrimitivesSignatureAccountId20, futurepass: Option<SeedPrimitivesSignatureAccountId20>], { delegate: SeedPrimitivesSignatureAccountId20, futurepass: Option<SeedPrimitivesSignatureAccountId20> }>;\n      /**\n       * Delegate registration to Futurepass account\n       **/\n      DelegateRegistered: AugmentedEvent<ApiType, [futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType], { futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType }>;\n      /**\n       * Delegate unregistration from Futurepass account\n       **/\n      DelegateUnregistered: AugmentedEvent<ApiType, [futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20], { futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Migration of Futurepass assets\n       **/\n      FuturepassAssetsMigrated: AugmentedEvent<ApiType, [evmFuturepass: SeedPrimitivesSignatureAccountId20, futurepass: SeedPrimitivesSignatureAccountId20, collectionId: u32], { evmFuturepass: SeedPrimitivesSignatureAccountId20, futurepass: SeedPrimitivesSignatureAccountId20, collectionId: u32 }>;\n      /**\n       * Futurepass creation\n       **/\n      FuturepassCreated: AugmentedEvent<ApiType, [futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20], { futurepass: SeedPrimitivesSignatureAccountId20, delegate: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Updating Futurepass migrator account\n       **/\n      FuturepassMigratorSet: AugmentedEvent<ApiType, [migrator: SeedPrimitivesSignatureAccountId20], { migrator: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Futurepass transfer\n       **/\n      FuturepassTransferred: AugmentedEvent<ApiType, [oldOwner: SeedPrimitivesSignatureAccountId20, newOwner: SeedPrimitivesSignatureAccountId20, futurepass: SeedPrimitivesSignatureAccountId20], { oldOwner: SeedPrimitivesSignatureAccountId20, newOwner: SeedPrimitivesSignatureAccountId20, futurepass: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A proxy call was executed with the given call\n       **/\n      ProxyExecuted: AugmentedEvent<ApiType, [delegate: SeedPrimitivesSignatureAccountId20, result: Result<Null, SpRuntimeDispatchError>], { delegate: SeedPrimitivesSignatureAccountId20, result: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    grandpa: {\n      /**\n       * New authority set has been applied.\n       **/\n      NewAuthorities: AugmentedEvent<ApiType, [authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>], { authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>> }>;\n      /**\n       * Current authority set has been paused.\n       **/\n      Paused: AugmentedEvent<ApiType, []>;\n      /**\n       * Current authority set has been resumed.\n       **/\n      Resumed: AugmentedEvent<ApiType, []>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    imOnline: {\n      /**\n       * At the end of the session, no offence was committed.\n       **/\n      AllGood: AugmentedEvent<ApiType, []>;\n      /**\n       * A new heartbeat was received from `AuthorityId`.\n       **/\n      HeartbeatReceived: AugmentedEvent<ApiType, [authorityId: PalletImOnlineSr25519AppSr25519Public], { authorityId: PalletImOnlineSr25519AppSr25519Public }>;\n      /**\n       * At the end of the session, at least one validator was found to be offline.\n       **/\n      SomeOffline: AugmentedEvent<ApiType, [offline: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, PalletStakingExposure]>>], { offline: Vec<ITuple<[SeedPrimitivesSignatureAccountId20, PalletStakingExposure]>> }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    nft: {\n      /**\n       * An auction has closed without selling\n       **/\n      AuctionClose: AugmentedEvent<ApiType, [collectionId: u32, listingId: u128, reason: PalletNftAuctionClosureReason], { collectionId: u32, listingId: u128, reason: PalletNftAuctionClosureReason }>;\n      /**\n       * An auction has opened\n       **/\n      AuctionOpen: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, paymentAsset: u32, reservePrice: u128, listingId: u128, marketplaceId: Option<u32>, seller: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, paymentAsset: u32, reservePrice: u128, listingId: u128, marketplaceId: Option<u32>, seller: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * An auction has sold\n       **/\n      AuctionSold: AugmentedEvent<ApiType, [collectionId: u32, listingId: u128, paymentAsset: u32, hammerPrice: u128, winner: SeedPrimitivesSignatureAccountId20], { collectionId: u32, listingId: u128, paymentAsset: u32, hammerPrice: u128, winner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Base URI was set\n       **/\n      BaseUriSet: AugmentedEvent<ApiType, [collectionId: u32, baseUri: Bytes], { collectionId: u32, baseUri: Bytes }>;\n      /**\n       * A new highest bid was placed\n       **/\n      Bid: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, amount: u128, bidder: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, amount: u128, bidder: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Token(s) were bridged\n       **/\n      BridgedMint: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, owner: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A token was burned\n       **/\n      Burn: AugmentedEvent<ApiType, [collectionId: u32, serialNumber: u32], { collectionId: u32, serialNumber: u32 }>;\n      /**\n       * Collection has been claimed\n       **/\n      CollectionClaimed: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, collectionId: u32], { account: SeedPrimitivesSignatureAccountId20, collectionId: u32 }>;\n      /**\n       * A new collection of tokens was created\n       **/\n      CollectionCreate: AugmentedEvent<ApiType, [collectionUuid: u32, initialIssuance: u32, maxIssuance: Option<u32>, collectionOwner: SeedPrimitivesSignatureAccountId20, metadataScheme: Bytes, name: Bytes, royaltiesSchedule: Option<PalletNftRoyaltiesSchedule>, originChain: PalletNftOriginChain, compatibility: PalletNftCrossChainCompatibility], { collectionUuid: u32, initialIssuance: u32, maxIssuance: Option<u32>, collectionOwner: SeedPrimitivesSignatureAccountId20, metadataScheme: Bytes, name: Bytes, royaltiesSchedule: Option<PalletNftRoyaltiesSchedule>, originChain: PalletNftOriginChain, compatibility: PalletNftCrossChainCompatibility }>;\n      /**\n       * A fixed price sale has closed without selling\n       **/\n      FixedPriceSaleClose: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, reason: PalletNftFixedPriceClosureReason], { collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, reason: PalletNftFixedPriceClosureReason }>;\n      /**\n       * A fixed price sale has completed\n       **/\n      FixedPriceSaleComplete: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, price: u128, paymentAsset: u32, buyer: SeedPrimitivesSignatureAccountId20, seller: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, price: u128, paymentAsset: u32, buyer: SeedPrimitivesSignatureAccountId20, seller: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A fixed price sale has been listed\n       **/\n      FixedPriceSaleList: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, marketplaceId: Option<u32>, price: u128, paymentAsset: u32, seller: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, marketplaceId: Option<u32>, price: u128, paymentAsset: u32, seller: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A fixed price sale has had its price updated\n       **/\n      FixedPriceSalePriceUpdate: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, newPrice: u128], { collectionId: u32, serialNumbers: Vec<u32>, listingId: u128, newPrice: u128 }>;\n      /**\n       * An account has been registered as a marketplace\n       **/\n      MarketplaceRegister: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20, entitlement: Permill, marketplaceId: u32], { account: SeedPrimitivesSignatureAccountId20, entitlement: Permill, marketplaceId: u32 }>;\n      /**\n       * Max issuance was set\n       **/\n      MaxIssuanceSet: AugmentedEvent<ApiType, [collectionId: u32, maxIssuance: u32], { collectionId: u32, maxIssuance: u32 }>;\n      /**\n       * Token(s) were minted\n       **/\n      Mint: AugmentedEvent<ApiType, [collectionId: u32, start: u32, end: u32, owner: SeedPrimitivesSignatureAccountId20], { collectionId: u32, start: u32, end: u32, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * An offer has been made on an NFT\n       **/\n      Offer: AugmentedEvent<ApiType, [offerId: u64, amount: u128, assetId: u32, marketplaceId: Option<u32>, buyer: SeedPrimitivesSignatureAccountId20], { offerId: u64, amount: u128, assetId: u32, marketplaceId: Option<u32>, buyer: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * An offer has been accepted\n       **/\n      OfferAccept: AugmentedEvent<ApiType, [offerId: u64, tokenId: ITuple<[u32, u32]>, amount: u128, assetId: u32], { offerId: u64, tokenId: ITuple<[u32, u32]>, amount: u128, assetId: u32 }>;\n      /**\n       * An offer has been cancelled\n       **/\n      OfferCancel: AugmentedEvent<ApiType, [offerId: u64, tokenId: ITuple<[u32, u32]>], { offerId: u64, tokenId: ITuple<[u32, u32]> }>;\n      /**\n       * A new owner was set\n       **/\n      OwnerSet: AugmentedEvent<ApiType, [collectionId: u32, newOwner: SeedPrimitivesSignatureAccountId20], { collectionId: u32, newOwner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A token was transferred\n       **/\n      Transfer: AugmentedEvent<ApiType, [previousOwner: SeedPrimitivesSignatureAccountId20, collectionId: u32, serialNumbers: Vec<u32>, newOwner: SeedPrimitivesSignatureAccountId20], { previousOwner: SeedPrimitivesSignatureAccountId20, collectionId: u32, serialNumbers: Vec<u32>, newOwner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    nftPeg: {\n      /**\n       * The NFT-peg contract address was set\n       **/\n      ContractAddressSet: AugmentedEvent<ApiType, [contract: H160], { contract: H160 }>;\n      /**\n       * An ERC721 deposit was made\n       **/\n      Erc721Deposit: AugmentedEvent<ApiType, [destination: SeedPrimitivesSignatureAccountId20], { destination: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Bridged ERC721 tokens were minted\n       **/\n      Erc721Mint: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, owner: SeedPrimitivesSignatureAccountId20], { collectionId: u32, serialNumbers: Vec<u32>, owner: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * An ERC721 withdraw was made\n       **/\n      Erc721Withdraw: AugmentedEvent<ApiType, [origin: SeedPrimitivesSignatureAccountId20, collectionIds: Vec<u32>, serialNumbers: Vec<Vec<u32>>, destination: H160], { origin: SeedPrimitivesSignatureAccountId20, collectionIds: Vec<u32>, serialNumbers: Vec<Vec<u32>>, destination: H160 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    offences: {\n      /**\n       * There is an offence reported of the given `kind` happened at the `session_index` and\n       * (kind-specific) time slot. This event is not deposited for duplicate slashes.\n       * \\[kind, timeslot\\].\n       **/\n      Offence: AugmentedEvent<ApiType, [kind: U8aFixed, timeslot: Bytes], { kind: U8aFixed, timeslot: Bytes }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    proxy: {\n      /**\n       * An announcement was placed to make a call in the future.\n       **/\n      Announced: AugmentedEvent<ApiType, [real: SeedPrimitivesSignatureAccountId20, proxy: SeedPrimitivesSignatureAccountId20, callHash: H256], { real: SeedPrimitivesSignatureAccountId20, proxy: SeedPrimitivesSignatureAccountId20, callHash: H256 }>;\n      /**\n       * Anonymous account has been created by new proxy with given\n       * disambiguation index and proxy type.\n       **/\n      AnonymousCreated: AugmentedEvent<ApiType, [anonymous: SeedPrimitivesSignatureAccountId20, who: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, disambiguationIndex: u16], { anonymous: SeedPrimitivesSignatureAccountId20, who: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, disambiguationIndex: u16 }>;\n      /**\n       * A proxy was added.\n       **/\n      ProxyAdded: AugmentedEvent<ApiType, [delegator: SeedPrimitivesSignatureAccountId20, delegatee: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, delay: u32], { delegator: SeedPrimitivesSignatureAccountId20, delegatee: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, delay: u32 }>;\n      /**\n       * A proxy was executed correctly, with the given.\n       **/\n      ProxyExecuted: AugmentedEvent<ApiType, [result: Result<Null, SpRuntimeDispatchError>], { result: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * A proxy was removed.\n       **/\n      ProxyRemoved: AugmentedEvent<ApiType, [delegator: SeedPrimitivesSignatureAccountId20, delegatee: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, delay: u32], { delegator: SeedPrimitivesSignatureAccountId20, delegatee: SeedPrimitivesSignatureAccountId20, proxyType: SeedRuntimeImplsProxyType, delay: u32 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    recovery: {\n      /**\n       * Lost account has been successfully recovered by rescuer account.\n       **/\n      AccountRecovered: AugmentedEvent<ApiType, [lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20], { lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A recovery process for lost account by rescuer account has been closed.\n       **/\n      RecoveryClosed: AugmentedEvent<ApiType, [lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20], { lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A recovery process has been set up for an account.\n       **/\n      RecoveryCreated: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20], { account: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A recovery process has been initiated for lost account by rescuer account.\n       **/\n      RecoveryInitiated: AugmentedEvent<ApiType, [lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20], { lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A recovery process has been removed for an account.\n       **/\n      RecoveryRemoved: AugmentedEvent<ApiType, [lostAccount: SeedPrimitivesSignatureAccountId20], { lostAccount: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A recovery process for lost account by rescuer account has been vouched for by sender.\n       **/\n      RecoveryVouched: AugmentedEvent<ApiType, [lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20, sender: SeedPrimitivesSignatureAccountId20], { lostAccount: SeedPrimitivesSignatureAccountId20, rescuerAccount: SeedPrimitivesSignatureAccountId20, sender: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    scheduler: {\n      /**\n       * The call for the provided hash was not found so the task has been aborted.\n       **/\n      CallLookupFailed: AugmentedEvent<ApiType, [task: ITuple<[u32, u32]>, id: Option<Bytes>, error: FrameSupportScheduleLookupError], { task: ITuple<[u32, u32]>, id: Option<Bytes>, error: FrameSupportScheduleLookupError }>;\n      /**\n       * Canceled some task.\n       **/\n      Canceled: AugmentedEvent<ApiType, [when: u32, index: u32], { when: u32, index: u32 }>;\n      /**\n       * Dispatched some task.\n       **/\n      Dispatched: AugmentedEvent<ApiType, [task: ITuple<[u32, u32]>, id: Option<Bytes>, result: Result<Null, SpRuntimeDispatchError>], { task: ITuple<[u32, u32]>, id: Option<Bytes>, result: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * Scheduled some task.\n       **/\n      Scheduled: AugmentedEvent<ApiType, [when: u32, index: u32], { when: u32, index: u32 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    session: {\n      /**\n       * New session has happened. Note that the argument is the session index, not the\n       * block number as the type might suggest.\n       **/\n      NewSession: AugmentedEvent<ApiType, [sessionIndex: u32], { sessionIndex: u32 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    staking: {\n      /**\n       * An account has bonded this amount. \\[stash, amount\\]\n       * \n       * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,\n       * it will not be emitted for staking rewards when they are added to stake.\n       **/\n      Bonded: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * An account has stopped participating as either a validator or nominator.\n       * \\[stash\\]\n       **/\n      Chilled: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * The era payout has been set; the first balance is the validator-payout; the second is\n       * the remainder from the maximum amount of reward.\n       * \\[era_index, validator_payout, remainder\\]\n       **/\n      EraPaid: AugmentedEvent<ApiType, [u32, u128, u128]>;\n      /**\n       * A nominator has been kicked from a validator. \\[nominator, stash\\]\n       **/\n      Kicked: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * An old slashing report from a prior era was discarded because it could\n       * not be processed. \\[session_index\\]\n       **/\n      OldSlashingReportDiscarded: AugmentedEvent<ApiType, [u32]>;\n      /**\n       * The stakers' rewards are getting paid. \\[era_index, validator_stash\\]\n       **/\n      PayoutStarted: AugmentedEvent<ApiType, [u32, SeedPrimitivesSignatureAccountId20]>;\n      /**\n       * The nominator has been rewarded by this amount. \\[stash, amount\\]\n       **/\n      Rewarded: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * One validator (and its nominators) has been slashed by the given amount.\n       * \\[validator, amount\\]\n       **/\n      Slashed: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * A new set of stakers was elected.\n       **/\n      StakersElected: AugmentedEvent<ApiType, []>;\n      /**\n       * The election failed. No new era is planned.\n       **/\n      StakingElectionFailed: AugmentedEvent<ApiType, []>;\n      /**\n       * An account has unbonded this amount. \\[stash, amount\\]\n       **/\n      Unbonded: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * A validator has set their preferences.\n       **/\n      ValidatorPrefsSet: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, PalletStakingValidatorPrefs]>;\n      /**\n       * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`\n       * from the unlocking queue. \\[stash, amount\\]\n       **/\n      Withdrawn: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20, u128]>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    sudo: {\n      /**\n       * The \\[sudoer\\] just switched identity; the old key is supplied if one existed.\n       **/\n      KeyChanged: AugmentedEvent<ApiType, [oldSudoer: Option<SeedPrimitivesSignatureAccountId20>], { oldSudoer: Option<SeedPrimitivesSignatureAccountId20> }>;\n      /**\n       * A sudo just took place. \\[result\\]\n       **/\n      Sudid: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * A sudo just took place. \\[result\\]\n       **/\n      SudoAsDone: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    system: {\n      /**\n       * `:code` was updated.\n       **/\n      CodeUpdated: AugmentedEvent<ApiType, []>;\n      /**\n       * An extrinsic failed.\n       **/\n      ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo }>;\n      /**\n       * An extrinsic completed successfully.\n       **/\n      ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchInfo: FrameSupportWeightsDispatchInfo }>;\n      /**\n       * An account was reaped.\n       **/\n      KilledAccount: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20], { account: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A new account was created.\n       **/\n      NewAccount: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20], { account: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * On on-chain remark happened.\n       **/\n      Remarked: AugmentedEvent<ApiType, [sender: SeedPrimitivesSignatureAccountId20, hash_: H256], { sender: SeedPrimitivesSignatureAccountId20, hash_: H256 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    transactionPayment: {\n      /**\n       * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,\n       * has been paid by `who`.\n       **/\n      TransactionFeePaid: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, actualFee: u128, tip: u128], { who: SeedPrimitivesSignatureAccountId20, actualFee: u128, tip: u128 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    utility: {\n      /**\n       * Batch of dispatches completed fully with no error.\n       **/\n      BatchCompleted: AugmentedEvent<ApiType, []>;\n      /**\n       * Batch of dispatches completed but has errors.\n       **/\n      BatchCompletedWithErrors: AugmentedEvent<ApiType, []>;\n      /**\n       * Batch of dispatches did not complete fully. Index of first failing dispatch given, as\n       * well as the error.\n       **/\n      BatchInterrupted: AugmentedEvent<ApiType, [index: u32, error: SpRuntimeDispatchError], { index: u32, error: SpRuntimeDispatchError }>;\n      /**\n       * A call was dispatched.\n       **/\n      DispatchedAs: AugmentedEvent<ApiType, [result: Result<Null, SpRuntimeDispatchError>], { result: Result<Null, SpRuntimeDispatchError> }>;\n      /**\n       * A single item within a Batch of dispatches has completed with no error.\n       **/\n      ItemCompleted: AugmentedEvent<ApiType, []>;\n      /**\n       * A single item within a Batch of dispatches has completed with error.\n       **/\n      ItemFailed: AugmentedEvent<ApiType, [error: SpRuntimeDispatchError], { error: SpRuntimeDispatchError }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    voterList: {\n      /**\n       * Moved an account from one bag to another.\n       **/\n      Rebagged: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, from: u64, to: u64], { who: SeedPrimitivesSignatureAccountId20, from: u64, to: u64 }>;\n      /**\n       * Updated the score of some account to the given amount.\n       **/\n      ScoreUpdated: AugmentedEvent<ApiType, [who: SeedPrimitivesSignatureAccountId20, newScore: u64], { who: SeedPrimitivesSignatureAccountId20, newScore: u64 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    xls20: {\n      /**\n       * A new relayer has been set\n       **/\n      RelayerSet: AugmentedEvent<ApiType, [account: SeedPrimitivesSignatureAccountId20], { account: SeedPrimitivesSignatureAccountId20 }>;\n      /**\n       * A collection has had XLS-20 compatibility enabled\n       **/\n      Xls20CompatibilityEnabled: AugmentedEvent<ApiType, [collectionId: u32], { collectionId: u32 }>;\n      /**\n       * A new XLS20 mapping has been set\n       **/\n      Xls20MappingSet: AugmentedEvent<ApiType, [collectionId: u32, mappings: Vec<ITuple<[u32, U8aFixed]>>], { collectionId: u32, mappings: Vec<ITuple<[u32, U8aFixed]>> }>;\n      /**\n       * Additional mint fee for XLS-20 mint has been paid to relayer\n       **/\n      Xls20MintFeePaid: AugmentedEvent<ApiType, [collectionOwner: SeedPrimitivesSignatureAccountId20, totalFee: u128], { collectionOwner: SeedPrimitivesSignatureAccountId20, totalFee: u128 }>;\n      /**\n       * A new Xls20 Mint Fee has been set\n       **/\n      Xls20MintFeeSet: AugmentedEvent<ApiType, [newFee: u128], { newFee: u128 }>;\n      /**\n       * Request sent to XLS20 Relayer\n       **/\n      Xls20MintRequest: AugmentedEvent<ApiType, [collectionId: u32, serialNumbers: Vec<u32>, tokenUris: Vec<Bytes>], { collectionId: u32, serialNumbers: Vec<u32>, tokenUris: Vec<Bytes> }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n    xrplBridge: {\n      DoorAddressSet: AugmentedEvent<ApiType, [H160]>;\n      DoorNextTicketSequenceParamSet: AugmentedEvent<ApiType, [ticketSequenceStartNext: u32, ticketBucketSizeNext: u32], { ticketSequenceStartNext: u32, ticketBucketSizeNext: u32 }>;\n      DoorTicketSequenceParamSet: AugmentedEvent<ApiType, [ticketSequence: u32, ticketSequenceStart: u32, ticketBucketSize: u32], { ticketSequence: u32, ticketSequenceStart: u32, ticketBucketSize: u32 }>;\n      /**\n       * Transaction not supported\n       **/\n      NotSupportedTransaction: AugmentedEvent<ApiType, []>;\n      /**\n       * Processing an event failed\n       **/\n      ProcessingFailed: AugmentedEvent<ApiType, [u64, H512, SpRuntimeDispatchError]>;\n      /**\n       * Processing an event succeeded\n       **/\n      ProcessingOk: AugmentedEvent<ApiType, [u64, H512]>;\n      RelayerAdded: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20]>;\n      RelayerRemoved: AugmentedEvent<ApiType, [SeedPrimitivesSignatureAccountId20]>;\n      TicketSequenceThresholdReached: AugmentedEvent<ApiType, [u32]>;\n      TransactionAdded: AugmentedEvent<ApiType, [u64, H512]>;\n      TransactionChallenge: AugmentedEvent<ApiType, [u64, H512]>;\n      /**\n       * Request to withdraw some XRP amount to XRPL\n       **/\n      WithdrawRequest: AugmentedEvent<ApiType, [proofId: u64, sender: SeedPrimitivesSignatureAccountId20, amount: u128, destination: H160], { proofId: u64, sender: SeedPrimitivesSignatureAccountId20, amount: u128, destination: H160 }>;\n      /**\n       * Generic event\n       **/\n      [key: string]: AugmentedEvent<ApiType>;\n    };\n  } // AugmentedEvents\n} // declare module\n"],"version":3}