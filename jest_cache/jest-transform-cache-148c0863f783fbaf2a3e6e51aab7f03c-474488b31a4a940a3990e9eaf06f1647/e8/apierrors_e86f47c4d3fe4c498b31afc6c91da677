86acd22f934cd7f7bfb6473b861f2b2d
"use strict";
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
// import type lookup before we augment - in some environments
// this is required to allow for ambient/previous definitions
require("@polkadot/api-base/types/errors");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-errors.ts","mappings":";AAAA,mEAAmE;AACnE,oBAAoB;;AAEpB,8DAA8D;AAC9D,6DAA6D;AAC7D,2CAAyC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-errors.ts"],"sourcesContent":["// Auto-generated via `yarn polkadot-types-from-chain`, do not edit\n/* eslint-disable */\n\n// import type lookup before we augment - in some environments\n// this is required to allow for ambient/previous definitions\nimport '@polkadot/api-base/types/errors';\n\nimport type { ApiTypes, AugmentedError } from '@polkadot/api-base/types';\n\nexport type __AugmentedError<ApiType extends ApiTypes> = AugmentedError<ApiType>;\n\ndeclare module '@polkadot/api-base/types/errors' {\n  interface AugmentedErrors<ApiType extends ApiTypes> {\n    assets: {\n      /**\n       * The asset-account already exists.\n       **/\n      AlreadyExists: AugmentedError<ApiType>;\n      /**\n       * Invalid metadata given.\n       **/\n      BadMetadata: AugmentedError<ApiType>;\n      /**\n       * Invalid witness data given.\n       **/\n      BadWitness: AugmentedError<ApiType>;\n      /**\n       * Account balance must be greater than or equal to the transfer amount.\n       **/\n      BalanceLow: AugmentedError<ApiType>;\n      /**\n       * The origin account is frozen.\n       **/\n      Frozen: AugmentedError<ApiType>;\n      /**\n       * The asset ID is already taken.\n       **/\n      InUse: AugmentedError<ApiType>;\n      /**\n       * Minimum balance should be non-zero.\n       **/\n      MinBalanceZero: AugmentedError<ApiType>;\n      /**\n       * The account to alter does not exist.\n       **/\n      NoAccount: AugmentedError<ApiType>;\n      /**\n       * The asset-account doesn't have an associated deposit.\n       **/\n      NoDeposit: AugmentedError<ApiType>;\n      /**\n       * The signing account has no permission to do the operation.\n       **/\n      NoPermission: AugmentedError<ApiType>;\n      /**\n       * Unable to increment the consumer reference counters on the account. Either no provider\n       * reference exists to allow a non-zero balance of a non-self-sufficient asset, or the\n       * maximum number of consumers has been reached.\n       **/\n      NoProvider: AugmentedError<ApiType>;\n      /**\n       * No approval exists that would allow the transfer.\n       **/\n      Unapproved: AugmentedError<ApiType>;\n      /**\n       * The given asset ID is unknown.\n       **/\n      Unknown: AugmentedError<ApiType>;\n      /**\n       * The operation would result in funds being burned.\n       **/\n      WouldBurn: AugmentedError<ApiType>;\n      /**\n       * The source account would not survive the transfer and it needs to stay alive.\n       **/\n      WouldDie: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    assetsExt: {\n      /**\n       * Hold balance is less then the required amount\n       **/\n      BalanceLow: AugmentedError<ApiType>;\n      /**\n       * Failed to create a new asset\n       **/\n      CreateAssetFailed: AugmentedError<ApiType>;\n      /**\n       * Maximum holds placed on this asset/account pair\n       **/\n      MaxHolds: AugmentedError<ApiType>;\n      /**\n       * The account to alter does not exist\n       **/\n      NoAccount: AugmentedError<ApiType>;\n      /**\n       * No more Ids are available, they've been exhausted\n       **/\n      NoAvailableIds: AugmentedError<ApiType>;\n      /**\n       * Operation would overflow\n       **/\n      Overflow: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    authorship: {\n      /**\n       * The uncle is genesis.\n       **/\n      GenesisUncle: AugmentedError<ApiType>;\n      /**\n       * The uncle parent not in the chain.\n       **/\n      InvalidUncleParent: AugmentedError<ApiType>;\n      /**\n       * The uncle isn't recent enough to be included.\n       **/\n      OldUncle: AugmentedError<ApiType>;\n      /**\n       * The uncle is too high in chain.\n       **/\n      TooHighUncle: AugmentedError<ApiType>;\n      /**\n       * Too many uncles.\n       **/\n      TooManyUncles: AugmentedError<ApiType>;\n      /**\n       * The uncle is already included.\n       **/\n      UncleAlreadyIncluded: AugmentedError<ApiType>;\n      /**\n       * Uncles already set in the block.\n       **/\n      UnclesAlreadySet: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    babe: {\n      /**\n       * A given equivocation report is valid but already previously reported.\n       **/\n      DuplicateOffenceReport: AugmentedError<ApiType>;\n      /**\n       * Submitted configuration is invalid.\n       **/\n      InvalidConfiguration: AugmentedError<ApiType>;\n      /**\n       * An equivocation proof provided as part of an equivocation report is invalid.\n       **/\n      InvalidEquivocationProof: AugmentedError<ApiType>;\n      /**\n       * A key ownership proof provided as part of an equivocation report is invalid.\n       **/\n      InvalidKeyOwnershipProof: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    balances: {\n      /**\n       * Beneficiary account must pre-exist\n       **/\n      DeadAccount: AugmentedError<ApiType>;\n      /**\n       * Value too low to create account due to existential deposit\n       **/\n      ExistentialDeposit: AugmentedError<ApiType>;\n      /**\n       * A vesting schedule already exists for this account\n       **/\n      ExistingVestingSchedule: AugmentedError<ApiType>;\n      /**\n       * Balance too low to send value\n       **/\n      InsufficientBalance: AugmentedError<ApiType>;\n      /**\n       * Transfer/payment would kill account\n       **/\n      KeepAlive: AugmentedError<ApiType>;\n      /**\n       * Account liquidity restrictions prevent withdrawal\n       **/\n      LiquidityRestrictions: AugmentedError<ApiType>;\n      /**\n       * Number of named reserves exceed MaxReserves\n       **/\n      TooManyReserves: AugmentedError<ApiType>;\n      /**\n       * Vesting balance too high to send value\n       **/\n      VestingBalance: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    dex: {\n      /**\n       * Supply amount is more than max_supply_amount\n       **/\n      ExcessiveSupplyAmount: AugmentedError<ApiType>;\n      IdenticalTokenAddress: AugmentedError<ApiType>;\n      /**\n       * Insufficent amount\n       **/\n      InsufficientAmount: AugmentedError<ApiType>;\n      /**\n       * Insufficient asset_a liquidity amount\n       **/\n      InsufficientAmountA: AugmentedError<ApiType>;\n      /**\n       * Insufficient asset_b liquidity amount\n       **/\n      InsufficientAmountB: AugmentedError<ApiType>;\n      /**\n       * Insufficient input amount\n       **/\n      InsufficientInputAmount: AugmentedError<ApiType>;\n      /**\n       * Liquidity is not enough\n       **/\n      InsufficientLiquidity: AugmentedError<ApiType>;\n      /**\n       * Insufficient liquidity burnt\n       **/\n      InsufficientLiquidityBurnt: AugmentedError<ApiType>;\n      /**\n       * Insufficient output amount\n       **/\n      InsufficientOutputAmount: AugmentedError<ApiType>;\n      /**\n       * Target amount is less to min_target_amount\n       **/\n      InsufficientTargetAmount: AugmentedError<ApiType>;\n      /**\n       * Insufficient withdraw amount for token A\n       **/\n      InsufficientWithdrawnAmountA: AugmentedError<ApiType>;\n      /**\n       * Insufficient withdraw amount for token B\n       **/\n      InsufficientWithdrawnAmountB: AugmentedError<ApiType>;\n      /**\n       * Invalid Asset id\n       **/\n      InvalidAssetId: AugmentedError<ApiType>;\n      /**\n       * Invalid constant product K\n       **/\n      InvalidConstantProduct: AugmentedError<ApiType>;\n      /**\n       * Must provide non-zero amount of liquidity\n       **/\n      InvalidInputAmounts: AugmentedError<ApiType>;\n      /**\n       * The increment of liquidity is invalid\n       **/\n      InvalidLiquidityIncrement: AugmentedError<ApiType>;\n      /**\n       * Invalid trading path length\n       **/\n      InvalidTradingPathLength: AugmentedError<ApiType>;\n      /**\n       * The Liquidity Provider token does not exist\n       **/\n      LiquidityProviderTokenNotCreated: AugmentedError<ApiType>;\n      /**\n       * Trading pair must be in Enabled status\n       **/\n      MustBeEnabled: AugmentedError<ApiType>;\n      /**\n       * Trading pair must be in NotEnabled status\n       **/\n      MustBeNotEnabled: AugmentedError<ApiType>;\n      /**\n       * The share increment is unacceptable\n       **/\n      UnacceptableShareIncrement: AugmentedError<ApiType>;\n      /**\n       * The supply amount is zero\n       **/\n      ZeroSupplyAmount: AugmentedError<ApiType>;\n      /**\n       * The target amount is zero\n       **/\n      ZeroTargetAmount: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    echo: {\n      /**\n       * The abi received does not match the encoding scheme\n       **/\n      InvalidAbiEncoding: AugmentedError<ApiType>;\n      /**\n       * Invalid ping_or_pong parameter, must be 0 or 1\n       **/\n      InvalidParameter: AugmentedError<ApiType>;\n      /**\n       * There are no remaining session ids\n       **/\n      NoAvailableIds: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    electionProviderMultiPhase: {\n      /**\n       * The call is not allowed at this point.\n       **/\n      CallNotAllowed: AugmentedError<ApiType>;\n      /**\n       * The fallback failed\n       **/\n      FallbackFailed: AugmentedError<ApiType>;\n      /**\n       * `Self::insert_submission` returned an invalid index.\n       **/\n      InvalidSubmissionIndex: AugmentedError<ApiType>;\n      /**\n       * Snapshot metadata should exist but didn't.\n       **/\n      MissingSnapshotMetadata: AugmentedError<ApiType>;\n      /**\n       * OCW submitted solution for wrong round\n       **/\n      OcwCallWrongEra: AugmentedError<ApiType>;\n      /**\n       * Submission was too early.\n       **/\n      PreDispatchEarlySubmission: AugmentedError<ApiType>;\n      /**\n       * Submission was too weak, score-wise.\n       **/\n      PreDispatchWeakSubmission: AugmentedError<ApiType>;\n      /**\n       * Wrong number of winners presented.\n       **/\n      PreDispatchWrongWinnerCount: AugmentedError<ApiType>;\n      /**\n       * The origin failed to pay the deposit.\n       **/\n      SignedCannotPayDeposit: AugmentedError<ApiType>;\n      /**\n       * Witness data to dispatchable is invalid.\n       **/\n      SignedInvalidWitness: AugmentedError<ApiType>;\n      /**\n       * The queue was full, and the solution was not better than any of the existing ones.\n       **/\n      SignedQueueFull: AugmentedError<ApiType>;\n      /**\n       * The signed submission consumes too much weight\n       **/\n      SignedTooMuchWeight: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    erc20Peg: {\n      /**\n       * Could not create the bridged asset\n       **/\n      CreateAssetFailed: AugmentedError<ApiType>;\n      /**\n       * Deposits are inactive\n       **/\n      DepositsPaused: AugmentedError<ApiType>;\n      /**\n       * Withdrawals over the set payment delay for EVM calls are disabled\n       **/\n      EvmWithdrawalFailed: AugmentedError<ApiType>;\n      /**\n       * The abi received does not match the encoding scheme\n       **/\n      InvalidAbiEncoding: AugmentedError<ApiType>;\n      /**\n       * Deposit has bad amount\n       **/\n      InvalidAmount: AugmentedError<ApiType>;\n      /**\n       * Could not convert pallet id to account\n       **/\n      InvalidPalletId: AugmentedError<ApiType>;\n      /**\n       * Withdrawals of this asset are not supported\n       **/\n      UnsupportedAsset: AugmentedError<ApiType>;\n      /**\n       * Withdrawals are inactive\n       **/\n      WithdrawalsPaused: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    ethBridge: {\n      /**\n       * The bridge is paused pending validator set changes (once every era / 24 hours)\n       * It will reactive after ~10 minutes\n       **/\n      BridgePaused: AugmentedError<ApiType>;\n      /**\n       * The relayer already has a bonded amount\n       **/\n      CantBondRelayer: AugmentedError<ApiType>;\n      /**\n       * The relayer is active and cant unbond the specified amount\n       **/\n      CantUnbondRelayer: AugmentedError<ApiType>;\n      /**\n       * There is already a challenge for this claim\n       **/\n      ClaimAlreadyChallenged: AugmentedError<ApiType>;\n      /**\n       * Event was already submitted and is pending\n       **/\n      EventReplayPending: AugmentedError<ApiType>;\n      /**\n       * Event was already submitted and is complete\n       **/\n      EventReplayProcessed: AugmentedError<ApiType>;\n      HttpFetch: AugmentedError<ApiType>;\n      /**\n       * Some internal operation failed\n       **/\n      Internal: AugmentedError<ApiType>;\n      /**\n       * Claim was invalid e.g. not properly ABI encoded\n       **/\n      InvalidClaim: AugmentedError<ApiType>;\n      /**\n       * A notarization was invalid\n       **/\n      InvalidNotarization: AugmentedError<ApiType>;\n      /**\n       * Someone tried to set a greater amount of validators than allowed\n       **/\n      MaxNewSignersExceeded: AugmentedError<ApiType>;\n      /**\n       * The relayer hasn't paid the relayer bond so can't be set as the active relayer\n       **/\n      NoBondPaid: AugmentedError<ApiType>;\n      /**\n       * There is no event claim associated with the supplied claim_id\n       **/\n      NoClaim: AugmentedError<ApiType>;\n      NoLocalSigningAccount: AugmentedError<ApiType>;\n      /**\n       * Caller does not have permission for that action\n       **/\n      NoPermission: AugmentedError<ApiType>;\n      /**\n       * offchain worker not configured properly\n       **/\n      OcwConfig: AugmentedError<ApiType>;\n      OffchainUnsignedTxSignedPayload: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    ethereum: {\n      BalanceLow: AugmentedError<ApiType>;\n      GasLimitTooHigh: AugmentedError<ApiType>;\n      GasLimitTooLow: AugmentedError<ApiType>;\n      GasPriceTooLow: AugmentedError<ApiType>;\n      InvalidNonce: AugmentedError<ApiType>;\n      /**\n       * Signature is invalid.\n       **/\n      InvalidSignature: AugmentedError<ApiType>;\n      /**\n       * Pre-log is present, therefore transact is not allowed.\n       **/\n      PreLogExists: AugmentedError<ApiType>;\n      Undefined: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    evm: {\n      /**\n       * Not enough balance to perform action\n       **/\n      BalanceLow: AugmentedError<ApiType>;\n      /**\n       * Calculating total fee overflowed\n       **/\n      FeeOverflow: AugmentedError<ApiType>;\n      /**\n       * Gas limit is too high.\n       **/\n      GasLimitTooHigh: AugmentedError<ApiType>;\n      /**\n       * Gas limit is too low.\n       **/\n      GasLimitTooLow: AugmentedError<ApiType>;\n      /**\n       * Gas price is too low.\n       **/\n      GasPriceTooLow: AugmentedError<ApiType>;\n      /**\n       * Nonce is invalid\n       **/\n      InvalidNonce: AugmentedError<ApiType>;\n      /**\n       * Calculating total payment overflowed\n       **/\n      PaymentOverflow: AugmentedError<ApiType>;\n      /**\n       * Undefined error.\n       **/\n      Undefined: AugmentedError<ApiType>;\n      /**\n       * Withdraw fee failed\n       **/\n      WithdrawFailed: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    feeProxy: {\n      /**\n       * The selected fee token is equal to the native gas token\n       **/\n      FeeTokenIsGasToken: AugmentedError<ApiType>;\n      /**\n       * The inner call is a fee preference call\n       **/\n      NestedFeePreferenceCall: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    futurepass: {\n      /**\n       * Account is already futurepass holder\n       **/\n      AccountAlreadyRegistered: AugmentedError<ApiType>;\n      /**\n       * Account already exists as a delegate\n       **/\n      DelegateAlreadyExists: AugmentedError<ApiType>;\n      /**\n       * Account is not futurepass delegate\n       **/\n      DelegateNotRegistered: AugmentedError<ApiType>;\n      /**\n       * Futurepass migrator admin account is not set\n       **/\n      MigratorNotSet: AugmentedError<ApiType>;\n      /**\n       * Account is not futurepass owner\n       **/\n      NotFuturepassOwner: AugmentedError<ApiType>;\n      /**\n       * Futurepass owner cannot remove themselves\n       **/\n      OwnerCannotUnregister: AugmentedError<ApiType>;\n      /**\n       * Account does not have permission to call this function\n       **/\n      PermissionDenied: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    grandpa: {\n      /**\n       * Attempt to signal GRANDPA change with one already pending.\n       **/\n      ChangePending: AugmentedError<ApiType>;\n      /**\n       * A given equivocation report is valid but already previously reported.\n       **/\n      DuplicateOffenceReport: AugmentedError<ApiType>;\n      /**\n       * An equivocation proof provided as part of an equivocation report is invalid.\n       **/\n      InvalidEquivocationProof: AugmentedError<ApiType>;\n      /**\n       * A key ownership proof provided as part of an equivocation report is invalid.\n       **/\n      InvalidKeyOwnershipProof: AugmentedError<ApiType>;\n      /**\n       * Attempt to signal GRANDPA pause when the authority set isn't live\n       * (either paused or already pending pause).\n       **/\n      PauseFailed: AugmentedError<ApiType>;\n      /**\n       * Attempt to signal GRANDPA resume when the authority set isn't paused\n       * (either live or already pending resume).\n       **/\n      ResumeFailed: AugmentedError<ApiType>;\n      /**\n       * Cannot signal forced change so soon after last.\n       **/\n      TooSoon: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    imOnline: {\n      /**\n       * Duplicated heartbeat.\n       **/\n      DuplicatedHeartbeat: AugmentedError<ApiType>;\n      /**\n       * Non existent public key.\n       **/\n      InvalidKey: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    nft: {\n      /**\n       * Attemped to mint a token that was bridged from a different chain\n       **/\n      AttemptedMintOnBridgedToken: AugmentedError<ApiType>;\n      /**\n       * Auction bid was lower than reserve or current highest bid\n       **/\n      BidTooLow: AugmentedError<ApiType>;\n      /**\n       * Cannot claim already claimed collections\n       **/\n      CannotClaimNonClaimableCollections: AugmentedError<ApiType>;\n      /**\n       * Total issuance of collection must be zero to add xls20 compatibility\n       **/\n      CollectionIssuanceNotZero: AugmentedError<ApiType>;\n      /**\n       * Given collection name is invalid (invalid utf-8, too long, empty)\n       **/\n      CollectionNameInvalid: AugmentedError<ApiType>;\n      /**\n       * Initial issuance on XLS-20 compatible collections must be zero\n       **/\n      InitialIssuanceNotZero: AugmentedError<ApiType>;\n      /**\n       * Max issuance needs to be greater than 0 and initial_issuance\n       * Cannot exceed MaxTokensPerCollection\n       **/\n      InvalidMaxIssuance: AugmentedError<ApiType>;\n      /**\n       * The metadata path is invalid (non-utf8 or empty)\n       **/\n      InvalidMetadataPath: AugmentedError<ApiType>;\n      /**\n       * No offer exists for the given OfferId\n       **/\n      InvalidOffer: AugmentedError<ApiType>;\n      /**\n       * The caller owns the token and can't make an offer\n       **/\n      IsTokenOwner: AugmentedError<ApiType>;\n      /**\n       * The account_id hasn't been registered as a marketplace\n       **/\n      MarketplaceNotRegistered: AugmentedError<ApiType>;\n      /**\n       * The max issuance has already been set and can't be changed\n       **/\n      MaxIssuanceAlreadySet: AugmentedError<ApiType>;\n      /**\n       * The collection max issuance has been reached and no more tokens can be minted\n       **/\n      MaxIssuanceReached: AugmentedError<ApiType>;\n      /**\n       * The maximum number of offers on this token has been reached\n       **/\n      MaxOffersReached: AugmentedError<ApiType>;\n      /**\n       * The quantity exceeds the max tokens per mint limit\n       **/\n      MintLimitExceeded: AugmentedError<ApiType>;\n      /**\n       * Selling tokens from different collection is not allowed\n       **/\n      MixedBundleSale: AugmentedError<ApiType>;\n      /**\n       * No more Ids are available, they've been exhausted\n       **/\n      NoAvailableIds: AugmentedError<ApiType>;\n      /**\n       * The collection does not exist\n       **/\n      NoCollectionFound: AugmentedError<ApiType>;\n      /**\n       * The caller is not the specified buyer\n       **/\n      NotBuyer: AugmentedError<ApiType>;\n      /**\n       * Origin is not the collection owner and is not permitted to perform the operation\n       **/\n      NotCollectionOwner: AugmentedError<ApiType>;\n      /**\n       * The token is not listed for auction sale\n       **/\n      NotForAuction: AugmentedError<ApiType>;\n      /**\n       * The token is not listed for fixed price sale\n       **/\n      NotForFixedPriceSale: AugmentedError<ApiType>;\n      /**\n       * The token does not exist\n       **/\n      NoToken: AugmentedError<ApiType>;\n      /**\n       * The caller is not the seller of the NFT\n       **/\n      NotSeller: AugmentedError<ApiType>;\n      /**\n       * Origin does not own the NFT\n       **/\n      NotTokenOwner: AugmentedError<ApiType>;\n      /**\n       * Total royalties would exceed 100% of sale or an empty vec is supplied\n       **/\n      RoyaltiesInvalid: AugmentedError<ApiType>;\n      /**\n       * The number of tokens have exceeded the max tokens allowed\n       **/\n      TokenLimitExceeded: AugmentedError<ApiType>;\n      /**\n       * Cannot operate on a listed NFT\n       **/\n      TokenLocked: AugmentedError<ApiType>;\n      /**\n       * The token is not listed for sale\n       **/\n      TokenNotListed: AugmentedError<ApiType>;\n      /**\n       * Cannot make an offer on a token up for auction\n       **/\n      TokenOnAuction: AugmentedError<ApiType>;\n      /**\n       * Offer amount needs to be greater than 0\n       **/\n      ZeroOffer: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    nftPeg: {\n      /**\n       * Send more addresses than are allowed\n       **/\n      ExceedsMaxAddresses: AugmentedError<ApiType>;\n      /**\n       * Sent more tokens than are allowed\n       **/\n      ExceedsMaxTokens: AugmentedError<ApiType>;\n      /**\n       * The length of the given vec exceeds the maximal allowed length limit\n       **/\n      ExceedsMaxVecLength: AugmentedError<ApiType>;\n      /**\n       * The abi data passed in could not be decoded\n       **/\n      InvalidAbiEncoding: AugmentedError<ApiType>;\n      /**\n       * The prefix uint in the abi encoded data was invalid\n       **/\n      InvalidAbiPrefix: AugmentedError<ApiType>;\n      /**\n       * No collection info exists\n       **/\n      NoCollectionFound: AugmentedError<ApiType>;\n      /**\n       * No mapped token was stored for bridging the token back to the bridged chain\n       * chain(Should not happen)\n       **/\n      NoMappedTokenExists: AugmentedError<ApiType>;\n      /**\n       * Tried to bridge a token that originates from Root, which is not yet supported\n       **/\n      NoPermissionToBridge: AugmentedError<ApiType>;\n      /**\n       * The state sync decoding feature is not implemented\n       **/\n      StateSyncDisabled: AugmentedError<ApiType>;\n      /**\n       * Multiple tokens were passed from contract, but amounts were unqeual per each array\n       **/\n      TokenListLengthMismatch: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    proxy: {\n      /**\n       * Account is already a proxy.\n       **/\n      Duplicate: AugmentedError<ApiType>;\n      /**\n       * Call may not be made by proxy because it may escalate its privileges.\n       **/\n      NoPermission: AugmentedError<ApiType>;\n      /**\n       * Cannot add self as proxy.\n       **/\n      NoSelfProxy: AugmentedError<ApiType>;\n      /**\n       * Proxy registration not found.\n       **/\n      NotFound: AugmentedError<ApiType>;\n      /**\n       * Sender is not a proxy of the account to be proxied.\n       **/\n      NotProxy: AugmentedError<ApiType>;\n      /**\n       * There are too many proxies registered or too many announcements pending.\n       **/\n      TooMany: AugmentedError<ApiType>;\n      /**\n       * Announcement, if made at all, was made too recently.\n       **/\n      Unannounced: AugmentedError<ApiType>;\n      /**\n       * A call which is incompatible with the proxy type's filter was attempted.\n       **/\n      Unproxyable: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    recovery: {\n      /**\n       * This account is already set up for recovery\n       **/\n      AlreadyProxy: AugmentedError<ApiType>;\n      /**\n       * This account is already set up for recovery\n       **/\n      AlreadyRecoverable: AugmentedError<ApiType>;\n      /**\n       * A recovery process has already started for this account\n       **/\n      AlreadyStarted: AugmentedError<ApiType>;\n      /**\n       * This user has already vouched for this recovery\n       **/\n      AlreadyVouched: AugmentedError<ApiType>;\n      /**\n       * Some internal state is broken.\n       **/\n      BadState: AugmentedError<ApiType>;\n      /**\n       * The friend must wait until the delay period to vouch for this recovery\n       **/\n      DelayPeriod: AugmentedError<ApiType>;\n      /**\n       * Friends list must be less than max friends\n       **/\n      MaxFriends: AugmentedError<ApiType>;\n      /**\n       * User is not allowed to make a call on behalf of this account\n       **/\n      NotAllowed: AugmentedError<ApiType>;\n      /**\n       * Friends list must be greater than zero and threshold\n       **/\n      NotEnoughFriends: AugmentedError<ApiType>;\n      /**\n       * This account is not a friend who can vouch\n       **/\n      NotFriend: AugmentedError<ApiType>;\n      /**\n       * This account is not set up for recovery\n       **/\n      NotRecoverable: AugmentedError<ApiType>;\n      /**\n       * Friends list must be sorted and free of duplicates\n       **/\n      NotSorted: AugmentedError<ApiType>;\n      /**\n       * A recovery process has not started for this rescuer\n       **/\n      NotStarted: AugmentedError<ApiType>;\n      /**\n       * There are still active recovery attempts that need to be closed\n       **/\n      StillActive: AugmentedError<ApiType>;\n      /**\n       * The threshold for recovering this account has not been met\n       **/\n      Threshold: AugmentedError<ApiType>;\n      /**\n       * Threshold must be greater than zero\n       **/\n      ZeroThreshold: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    scheduler: {\n      /**\n       * Failed to schedule a call\n       **/\n      FailedToSchedule: AugmentedError<ApiType>;\n      /**\n       * Cannot find the scheduled call.\n       **/\n      NotFound: AugmentedError<ApiType>;\n      /**\n       * Reschedule failed because it does not change scheduled time.\n       **/\n      RescheduleNoChange: AugmentedError<ApiType>;\n      /**\n       * Given target block number is in the past.\n       **/\n      TargetBlockNumberInPast: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    session: {\n      /**\n       * Registered duplicate key.\n       **/\n      DuplicatedKey: AugmentedError<ApiType>;\n      /**\n       * Invalid ownership proof.\n       **/\n      InvalidProof: AugmentedError<ApiType>;\n      /**\n       * Key setting account is not live, so it's impossible to associate keys.\n       **/\n      NoAccount: AugmentedError<ApiType>;\n      /**\n       * No associated validator ID for account.\n       **/\n      NoAssociatedValidatorId: AugmentedError<ApiType>;\n      /**\n       * No keys are associated with this account.\n       **/\n      NoKeys: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    staking: {\n      /**\n       * Stash is already bonded.\n       **/\n      AlreadyBonded: AugmentedError<ApiType>;\n      /**\n       * Rewards for this era have already been claimed for this validator.\n       **/\n      AlreadyClaimed: AugmentedError<ApiType>;\n      /**\n       * Controller is already paired.\n       **/\n      AlreadyPaired: AugmentedError<ApiType>;\n      /**\n       * Internal state has become somehow corrupted and the operation cannot continue.\n       **/\n      BadState: AugmentedError<ApiType>;\n      /**\n       * A nomination target was supplied that was blocked or otherwise not a validator.\n       **/\n      BadTarget: AugmentedError<ApiType>;\n      /**\n       * The user has enough bond and thus cannot be chilled forcefully by an external person.\n       **/\n      CannotChillOther: AugmentedError<ApiType>;\n      /**\n       * Commission is too low. Must be at least `MinCommission`.\n       **/\n      CommissionTooLow: AugmentedError<ApiType>;\n      /**\n       * Duplicate index.\n       **/\n      DuplicateIndex: AugmentedError<ApiType>;\n      /**\n       * Targets cannot be empty.\n       **/\n      EmptyTargets: AugmentedError<ApiType>;\n      /**\n       * Attempting to target a stash that still has funds.\n       **/\n      FundedTarget: AugmentedError<ApiType>;\n      /**\n       * Incorrect previous history depth input provided.\n       **/\n      IncorrectHistoryDepth: AugmentedError<ApiType>;\n      /**\n       * Incorrect number of slashing spans provided.\n       **/\n      IncorrectSlashingSpans: AugmentedError<ApiType>;\n      /**\n       * Cannot have a validator or nominator role, with value less than the minimum defined by\n       * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the\n       * intention, `chill` first to remove one's role as validator/nominator.\n       **/\n      InsufficientBond: AugmentedError<ApiType>;\n      /**\n       * Invalid era to reward.\n       **/\n      InvalidEraToReward: AugmentedError<ApiType>;\n      /**\n       * Invalid number of nominations.\n       **/\n      InvalidNumberOfNominations: AugmentedError<ApiType>;\n      /**\n       * Slash record index out of bounds.\n       **/\n      InvalidSlashIndex: AugmentedError<ApiType>;\n      /**\n       * Can not schedule more unlock chunks.\n       **/\n      NoMoreChunks: AugmentedError<ApiType>;\n      /**\n       * Not a controller account.\n       **/\n      NotController: AugmentedError<ApiType>;\n      /**\n       * Items are not sorted and unique.\n       **/\n      NotSortedAndUnique: AugmentedError<ApiType>;\n      /**\n       * Not a stash account.\n       **/\n      NotStash: AugmentedError<ApiType>;\n      /**\n       * Can not rebond without unlocking chunks.\n       **/\n      NoUnlockChunk: AugmentedError<ApiType>;\n      /**\n       * There are too many nominators in the system. Governance needs to adjust the staking\n       * settings to keep things safe for the runtime.\n       **/\n      TooManyNominators: AugmentedError<ApiType>;\n      /**\n       * Too many nomination targets supplied.\n       **/\n      TooManyTargets: AugmentedError<ApiType>;\n      /**\n       * There are too many validators in the system. Governance needs to adjust the staking\n       * settings to keep things safe for the runtime.\n       **/\n      TooManyValidators: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    sudo: {\n      /**\n       * Sender must be the Sudo account\n       **/\n      RequireSudo: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    system: {\n      /**\n       * The origin filter prevent the call to be dispatched.\n       **/\n      CallFiltered: AugmentedError<ApiType>;\n      /**\n       * Failed to extract the runtime version from the new runtime.\n       * \n       * Either calling `Core_version` or decoding `RuntimeVersion` failed.\n       **/\n      FailedToExtractRuntimeVersion: AugmentedError<ApiType>;\n      /**\n       * The name of specification does not match between the current runtime\n       * and the new runtime.\n       **/\n      InvalidSpecName: AugmentedError<ApiType>;\n      /**\n       * Suicide called when the account has non-default composite data.\n       **/\n      NonDefaultComposite: AugmentedError<ApiType>;\n      /**\n       * There is a non-zero reference count preventing the account from being purged.\n       **/\n      NonZeroRefCount: AugmentedError<ApiType>;\n      /**\n       * The specification version is not allowed to decrease between the current runtime\n       * and the new runtime.\n       **/\n      SpecVersionNeedsToIncrease: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    tokenApprovals: {\n      /**\n       * Address is already approved\n       **/\n      AlreadyApproved: AugmentedError<ApiType>;\n      /**\n       * There is no approval set for this token\n       **/\n      ApprovalDoesntExist: AugmentedError<ApiType>;\n      /**\n       * The caller is not approved for the requested amount\n       **/\n      ApprovedAmountTooLow: AugmentedError<ApiType>;\n      /**\n       * The caller isn't approved for any amount\n       **/\n      CallerNotApproved: AugmentedError<ApiType>;\n      /**\n       * The caller account can't be the same as the operator account\n       **/\n      CallerNotOperator: AugmentedError<ApiType>;\n      /**\n       * The token doesn't exist\n       **/\n      NoToken: AugmentedError<ApiType>;\n      /**\n       * The account is not the owner of the token\n       **/\n      NotTokenOwner: AugmentedError<ApiType>;\n      /**\n       * The account is not the owner of the token or an approved account\n       **/\n      NotTokenOwnerOrApproved: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    utility: {\n      /**\n       * Too many calls batched.\n       **/\n      TooManyCalls: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    voterList: {\n      /**\n       * A error in the list interface implementation.\n       **/\n      List: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    xls20: {\n      /**\n       * There is already a Root native -> XLS-20 mapping for this token\n       **/\n      MappingAlreadyExists: AugmentedError<ApiType>;\n      /**\n       * No the owner of the collection\n       **/\n      NotCollectionOwner: AugmentedError<ApiType>;\n      /**\n       * The NFT does not exist\n       **/\n      NoToken: AugmentedError<ApiType>;\n      /**\n       * The caller is not the relayer and does not have permission to perform this action\n       **/\n      NotRelayer: AugmentedError<ApiType>;\n      /**\n       * The collection is not compatible with XLS-20\n       **/\n      NotXLS20Compatible: AugmentedError<ApiType>;\n      /**\n       * The supplied fee for minting XLS-20 tokens is too low\n       **/\n      Xls20MintFeeTooLow: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n    xrplBridge: {\n      /**\n       * Cannot process more transactions at that block\n       **/\n      CannotProcessMoreTransactionsAtThatBlock: AugmentedError<ApiType>;\n      /**\n       * The door address has not been configured\n       **/\n      DoorAddressNotSet: AugmentedError<ApiType>;\n      /**\n       * The signers are not known by ethy\n       **/\n      InvalidSigners: AugmentedError<ApiType>;\n      /**\n       * The NextTicketSequenceParams is invalid\n       **/\n      NextTicketSequenceParamsInvalid: AugmentedError<ApiType>;\n      /**\n       * The NextTicketSequenceParams has not been set\n       **/\n      NextTicketSequenceParamsNotSet: AugmentedError<ApiType>;\n      NotPermitted: AugmentedError<ApiType>;\n      RelayerDoesNotExists: AugmentedError<ApiType>;\n      /**\n       * The TicketSequenceParams is invalid\n       **/\n      TicketSequenceParamsInvalid: AugmentedError<ApiType>;\n      /**\n       * XRPL does not allow more than 8 signers for door address\n       **/\n      TooManySigners: AugmentedError<ApiType>;\n      /**\n       * Submitted a duplicate transaction hash\n       **/\n      TxReplay: AugmentedError<ApiType>;\n      /**\n       * Withdraw amount must be non-zero and <= u64\n       **/\n      WithdrawInvalidAmount: AugmentedError<ApiType>;\n      /**\n       * Generic error\n       **/\n      [key: string]: AugmentedError<ApiType>;\n    };\n  } // AugmentedErrors\n} // declare module\n"],"version":3}