c3a453e6beab9a1a80586f35e3a716c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("@polkadot/api-derive/type");
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
describe('e2e api calls', () => {
    let api;
    let blockHash;
    beforeAll(async () => {
        const providerUrl = 'wss://porcini.rootnet.app/archive/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        blockHash = await api.rpc.chain.getBlockHash();
    });
    afterAll(async (done) => {
        if (api) {
            return await api.disconnect();
        }
        api = null;
        done();
    });
    it('Get correct block', async () => {
        const block = await api.rpc.chain.getBlock(blockHash).then((r) => r.block);
        expect(block.header.hash.toString()).toEqual(blockHash.toString());
    });
    it('Get correct validators', async () => {
        const validators = (await api.query.session.validators.at(blockHash));
        expect(validators.length).toBeGreaterThan(0);
    });
    it('Expect author is in validators', async () => {
        const block = await api.rpc.chain.getBlock(blockHash).then((r) => r.block);
        const header = block.header;
        const validators = (await api.query.session.validators.at(blockHash));
        // console.log('validators:',validators);
        const extHeader = (0, type_1.createHeaderExtended)(api.registry, header, validators);
        const author = extHeader.author;
        expect(validators).toEqual(expect.arrayContaining([expect.objectContaining(author)]));
    });
    it('Expect at least one event', async () => {
        const events = (await api.query.system.events.at(blockHash));
        expect(events.length).toBeGreaterThan(0);
    });
    describe('Get session info', () => {
        it('Get correct session information (length, last length, era, current index, session per era', async () => {
            const currentSession = await api.derive.session.info();
            expect(currentSession.currentEra.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.currentIndex.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.eraLength.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.isEpoch).toBe(true);
            expect(currentSession.sessionLength.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.sessionsPerEra.toNumber()).toBeGreaterThanOrEqual(0);
            expect(currentSession.validatorCount.toNumber()).toBeGreaterThanOrEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,