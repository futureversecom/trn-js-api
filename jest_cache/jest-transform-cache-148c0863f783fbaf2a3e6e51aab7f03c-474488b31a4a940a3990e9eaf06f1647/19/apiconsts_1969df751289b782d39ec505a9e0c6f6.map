{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-consts.ts","mappings":";AAAA,mEAAmE;AACnE,oBAAoB;;AAEpB,8DAA8D;AAC9D,6DAA6D;AAC7D,2CAAyC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-consts.ts"],"sourcesContent":["// Auto-generated via `yarn polkadot-types-from-chain`, do not edit\n/* eslint-disable */\n\n// import type lookup before we augment - in some environments\n// this is required to allow for ambient/previous definitions\nimport '@polkadot/api-base/types/consts';\n\nimport type { ApiTypes, AugmentedConst } from '@polkadot/api-base/types';\nimport type { Vec, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';\nimport type { Codec, ITuple } from '@polkadot/types-codec/types';\nimport type { FrameSupportPalletId, FrameSupportWeightsRuntimeDbWeight, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, SpVersionRuntimeVersion } from '@polkadot/types/lookup';\nimport type { Perbill } from '@therootnetwork/types/interfaces/runtime';\n\nexport type __AugmentedConst<ApiType extends ApiTypes> = AugmentedConst<ApiType>;\n\ndeclare module '@polkadot/api-base/types/consts' {\n  interface AugmentedConsts<ApiType extends ApiTypes> {\n    assets: {\n      /**\n       * The amount of funds that must be reserved when creating a new approval.\n       **/\n      approvalDeposit: u128 & AugmentedConst<ApiType>;\n      /**\n       * The amount of funds that must be reserved for a non-provider asset account to be\n       * maintained.\n       **/\n      assetAccountDeposit: u128 & AugmentedConst<ApiType>;\n      /**\n       * The basic amount of funds that must be reserved for an asset.\n       **/\n      assetDeposit: u128 & AugmentedConst<ApiType>;\n      /**\n       * The basic amount of funds that must be reserved when adding metadata to your asset.\n       **/\n      metadataDepositBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * The additional funds that must be reserved for the number of bytes you store in your\n       * metadata.\n       **/\n      metadataDepositPerByte: u128 & AugmentedConst<ApiType>;\n      /**\n       * The maximum length of a name or symbol stored on-chain.\n       **/\n      stringLimit: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    assetsExt: {\n      /**\n       * The maximum * of holds per asset & account\n       **/\n      maxHolds: u32 & AugmentedConst<ApiType>;\n      /**\n       * The native token asset Id (managed by pallet-balances)\n       **/\n      nativeAssetId: u32 & AugmentedConst<ApiType>;\n      /**\n       * This pallet's Id, used for deriving a sovereign account ID\n       **/\n      palletId: FrameSupportPalletId & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    authorship: {\n      /**\n       * The number of blocks back we should accept uncles.\n       * This means that we will deal with uncle-parents that are\n       * `UncleGenerations + 1` before `now`.\n       **/\n      uncleGenerations: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    babe: {\n      /**\n       * The amount of time, in slots, that each epoch should last.\n       * NOTE: Currently it is not possible to change the epoch duration after\n       * the chain has started. Attempting to do so will brick block production.\n       **/\n      epochDuration: u64 & AugmentedConst<ApiType>;\n      /**\n       * The expected average block time at which BABE should be creating\n       * blocks. Since BABE is probabilistic it is not trivial to figure out\n       * what the expected average block time should be based on the slot\n       * duration and the security parameter `c` (where `1 - c` represents\n       * the probability of a slot being empty).\n       **/\n      expectedBlockTime: u64 & AugmentedConst<ApiType>;\n      /**\n       * Max number of authorities allowed\n       **/\n      maxAuthorities: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    balances: {\n      /**\n       * The minimum amount required to keep an account open.\n       **/\n      existentialDeposit: u128 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of locks that should exist on an account.\n       * Not strictly enforced, but used for weight estimation.\n       **/\n      maxLocks: u32 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of named reserves that can exist on an account.\n       **/\n      maxReserves: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    dex: {\n      /**\n       * The DEX's burn id, to provide for a redundant, unredeemable minter/burner address.\n       **/\n      dexBurnPalletId: FrameSupportPalletId & AugmentedConst<ApiType>;\n      /**\n       * Trading fee rate\n       * The first item of the tuple is the numerator of the fee rate, second\n       * item is the denominator, fee_rate = numerator / denominator,\n       * use (u32, u32) over `Rate` type to minimize internal division\n       * operation.\n       **/\n      getExchangeFee: ITuple<[u32, u32]> & AugmentedConst<ApiType>;\n      /**\n       * Liquidity pair default token decimals\n       **/\n      lpTokenDecimals: u8 & AugmentedConst<ApiType>;\n      /**\n       * The limit for length of trading path\n       **/\n      tradingPathLimit: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    echo: {\n      /**\n       * This pallet's Id, used for deriving a sovereign account ID\n       **/\n      palletId: FrameSupportPalletId & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    electionProviderMultiPhase: {\n      /**\n       * The minimum amount of improvement to the solution score that defines a solution as\n       * \"better\" in the Signed phase.\n       **/\n      betterSignedThreshold: Perbill & AugmentedConst<ApiType>;\n      /**\n       * The minimum amount of improvement to the solution score that defines a solution as\n       * \"better\" in the Unsigned phase.\n       **/\n      betterUnsignedThreshold: Perbill & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of electable targets to put in the snapshot.\n       **/\n      maxElectableTargets: u16 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of electing voters to put in the snapshot. At the moment, snapshots\n       * are only over a single block, but once multi-block elections are introduced they will\n       * take place over multiple blocks.\n       **/\n      maxElectingVoters: u32 & AugmentedConst<ApiType>;\n      /**\n       * The priority of the unsigned transaction submitted in the unsigned-phase\n       **/\n      minerTxPriority: u64 & AugmentedConst<ApiType>;\n      /**\n       * The repeat threshold of the offchain worker.\n       * \n       * For example, if it is 5, that means that at least 5 blocks will elapse between attempts\n       * to submit the worker's solution.\n       **/\n      offchainRepeat: u32 & AugmentedConst<ApiType>;\n      /**\n       * Base deposit for a signed solution.\n       **/\n      signedDepositBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * Per-byte deposit for a signed solution.\n       **/\n      signedDepositByte: u128 & AugmentedConst<ApiType>;\n      /**\n       * Per-weight deposit for a signed solution.\n       **/\n      signedDepositWeight: u128 & AugmentedConst<ApiType>;\n      /**\n       * The maximum amount of unchecked solutions to refund the call fee for.\n       **/\n      signedMaxRefunds: u32 & AugmentedConst<ApiType>;\n      /**\n       * Maximum number of signed submissions that can be queued.\n       * \n       * It is best to avoid adjusting this during an election, as it impacts downstream data\n       * structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you\n       * update this value during an election, you _must_ ensure that\n       * `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,\n       * attempts to submit new solutions may cause a runtime panic.\n       **/\n      signedMaxSubmissions: u32 & AugmentedConst<ApiType>;\n      /**\n       * Maximum weight of a signed solution.\n       * \n       * If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of\n       * this pallet), then [`MinerConfig::solution_weight`] is used to compare against\n       * this value.\n       **/\n      signedMaxWeight: u64 & AugmentedConst<ApiType>;\n      /**\n       * Duration of the signed phase.\n       **/\n      signedPhase: u32 & AugmentedConst<ApiType>;\n      /**\n       * Base reward for a signed solution\n       **/\n      signedRewardBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * Duration of the unsigned phase.\n       **/\n      unsignedPhase: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    feeProxy: {\n      /**\n       * The native token asset Id (managed by pallet-balances)\n       **/\n      feeAssetId: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    grandpa: {\n      /**\n       * Max Authorities in use\n       **/\n      maxAuthorities: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    imOnline: {\n      /**\n       * A configuration for base priority of unsigned transactions.\n       * \n       * This is exposed so that it can be tuned for particular runtime, when\n       * multiple pallets send unsigned transactions.\n       **/\n      unsignedPriority: u64 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    nft: {\n      /**\n       * Default auction / sale length in blocks\n       **/\n      defaultListingDuration: u32 & AugmentedConst<ApiType>;\n      /**\n       * This pallet's Id, used for deriving a sovereign account ID\n       **/\n      palletId: FrameSupportPalletId & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    nftPeg: {\n      delayLength: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    proxy: {\n      /**\n       * The base amount of currency needed to reserve for creating an announcement.\n       * \n       * This is held when a new storage item holding a `Balance` is created (typically 16\n       * bytes).\n       **/\n      announcementDepositBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * The amount of currency needed per announcement made.\n       * \n       * This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)\n       * into a pre-existing storage value.\n       **/\n      announcementDepositFactor: u128 & AugmentedConst<ApiType>;\n      /**\n       * The maximum amount of time-delayed announcements that are allowed to be pending.\n       **/\n      maxPending: u32 & AugmentedConst<ApiType>;\n      /**\n       * The maximum amount of proxies allowed for a single account.\n       **/\n      maxProxies: u32 & AugmentedConst<ApiType>;\n      /**\n       * The base amount of currency needed to reserve for creating a proxy.\n       * \n       * This is held for an additional storage item whose value size is\n       * `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.\n       **/\n      proxyDepositBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * The amount of currency needed per proxy added.\n       * \n       * This is held for adding 32 bytes plus an instance of `ProxyType` more into a\n       * pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take\n       * into account `32 + proxy_type.encode().len()` bytes of data.\n       **/\n      proxyDepositFactor: u128 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    recovery: {\n      /**\n       * The base amount of currency needed to reserve for creating a recovery configuration.\n       * \n       * This is held for an additional storage item whose value size is\n       * `2 + sizeof(BlockNumber, Balance)` bytes.\n       **/\n      configDepositBase: u128 & AugmentedConst<ApiType>;\n      /**\n       * The amount of currency needed per additional user when creating a recovery\n       * configuration.\n       * \n       * This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage\n       * value.\n       **/\n      friendDepositFactor: u128 & AugmentedConst<ApiType>;\n      /**\n       * The maximum amount of friends allowed in a recovery configuration.\n       * \n       * NOTE: The threshold programmed in this Pallet uses u16, so it does\n       * not really make sense to have a limit here greater than u16::MAX.\n       * But also, that is a lot more than you should probably set this value\n       * to anyway...\n       **/\n      maxFriends: u32 & AugmentedConst<ApiType>;\n      /**\n       * The base amount of currency needed to reserve for starting a recovery.\n       * \n       * This is primarily held for deterring malicious recovery attempts, and should\n       * have a value large enough that a bad actor would choose not to place this\n       * deposit. It also acts to fund additional storage item whose value size is\n       * `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable\n       * threshold.\n       **/\n      recoveryDeposit: u128 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    scheduler: {\n      /**\n       * The maximum weight that may be scheduled per block for any dispatchables of less\n       * priority than `schedule::HARD_DEADLINE`.\n       **/\n      maximumWeight: u64 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of scheduled calls in the queue for a single block.\n       * Not strictly enforced, but used for weight estimation.\n       **/\n      maxScheduledPerBlock: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    staking: {\n      /**\n       * Number of eras that staked funds must remain bonded for.\n       **/\n      bondingDuration: u32 & AugmentedConst<ApiType>;\n      /**\n       * Maximum number of nominations per nominator.\n       **/\n      maxNominations: u32 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of nominators rewarded for each validator.\n       * \n       * For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can\n       * claim their reward. This used to limit the i/o cost for the nominator payout.\n       **/\n      maxNominatorRewardedPerValidator: u32 & AugmentedConst<ApiType>;\n      /**\n       * The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively\n       * determines how many unique eras a staker may be unbonding in.\n       **/\n      maxUnlockingChunks: u32 & AugmentedConst<ApiType>;\n      /**\n       * Number of sessions per era.\n       **/\n      sessionsPerEra: u32 & AugmentedConst<ApiType>;\n      /**\n       * Number of eras that slashes are deferred by, after computation.\n       * \n       * This should be less than the bonding duration. Set to 0 if slashes\n       * should be applied immediately, without opportunity for intervention.\n       **/\n      slashDeferDuration: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    system: {\n      /**\n       * Maximum number of block number to block hash mappings to keep (oldest pruned first).\n       **/\n      blockHashCount: u32 & AugmentedConst<ApiType>;\n      /**\n       * The maximum length of a block (in bytes).\n       **/\n      blockLength: FrameSystemLimitsBlockLength & AugmentedConst<ApiType>;\n      /**\n       * Block & extrinsics weights: base values and limits.\n       **/\n      blockWeights: FrameSystemLimitsBlockWeights & AugmentedConst<ApiType>;\n      /**\n       * The weight of runtime database operations the runtime can invoke.\n       **/\n      dbWeight: FrameSupportWeightsRuntimeDbWeight & AugmentedConst<ApiType>;\n      /**\n       * The designated SS85 prefix of this chain.\n       * \n       * This replaces the \"ss58Format\" property declared in the chain spec. Reason is\n       * that the runtime should know about the prefix in order to make use of it as\n       * an identifier of the chain.\n       **/\n      ss58Prefix: u16 & AugmentedConst<ApiType>;\n      /**\n       * Get the chain's current version.\n       **/\n      version: SpVersionRuntimeVersion & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    timestamp: {\n      /**\n       * The minimum period between blocks. Beware that this is different to the *expected*\n       * period that the block production apparatus provides. Your chosen consensus system will\n       * generally work with this to determine a sensible block time. e.g. For Aura, it will be\n       * double this period on default settings.\n       **/\n      minimumPeriod: u64 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    transactionPayment: {\n      /**\n       * A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their\n       * `priority`\n       * \n       * This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later\n       * added to a tip component in regular `priority` calculations.\n       * It means that a `Normal` transaction can front-run a similarly-sized `Operational`\n       * extrinsic (with no tip), by including a tip value greater than the virtual tip.\n       * \n       * ```rust,ignore\n       * // For `Normal`\n       * let priority = priority_calc(tip);\n       * \n       * // For `Operational`\n       * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;\n       * let priority = priority_calc(tip + virtual_tip);\n       * ```\n       * \n       * Note that since we use `final_fee` the multiplier applies also to the regular `tip`\n       * sent with the transaction. So, not only does the transaction get a priority bump based\n       * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`\n       * transactions.\n       **/\n      operationalFeeMultiplier: u8 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    txFeePot: {\n      txFeePotId: FrameSupportPalletId & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    utility: {\n      /**\n       * The limit on the number of batched calls.\n       **/\n      batchedCallsLimit: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    voterList: {\n      /**\n       * The list of thresholds separating the various bags.\n       * \n       * Ids are separated into unsorted bags according to their score. This specifies the\n       * thresholds separating the bags. An id's bag is the largest bag for which the id's score\n       * is less than or equal to its upper threshold.\n       * \n       * When ids are iterated, higher bags are iterated completely before lower bags. This means\n       * that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower\n       * score, but peer ids within a particular bag are sorted in insertion order.\n       * \n       * # Expressing the constant\n       * \n       * This constant must be sorted in strictly increasing order. Duplicate items are not\n       * permitted.\n       * \n       * There is an implied upper limit of `Score::MAX`; that value does not need to be\n       * specified within the bag. For any two threshold lists, if one ends with\n       * `Score::MAX`, the other one does not, and they are otherwise equal, the two\n       * lists will behave identically.\n       * \n       * # Calculation\n       * \n       * It is recommended to generate the set of thresholds in a geometric series, such that\n       * there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *\n       * constant_ratio).max(threshold[k] + 1)` for all `k`.\n       * \n       * The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.\n       * \n       * # Examples\n       * \n       * - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and\n       * iteration is strictly in insertion order.\n       * - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to\n       * the procedure given above, then the constant ratio is equal to 2.\n       * - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to\n       * the procedure given above, then the constant ratio is approximately equal to 1.248.\n       * - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall\n       * into bag 0, an id with score 2 will fall into bag 1, etc.\n       * \n       * # Migration\n       * \n       * In the event that this list ever changes, a copy of the old bags list must be retained.\n       * With that `List::migrate` can be called, which will perform the appropriate migration.\n       **/\n      bagThresholds: Vec<u64> & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n    xrplBridge: {\n      /**\n       * Challenge Period to wait for a challenge before processing the transaction\n       **/\n      challengePeriod: u32 & AugmentedConst<ApiType>;\n      /**\n       * Clear Period to wait for a transaction to be cleared from settled storages\n       **/\n      clearTxPeriod: u32 & AugmentedConst<ApiType>;\n      /**\n       * XRP Asset Id set at runtime\n       **/\n      xrpAssetId: u32 & AugmentedConst<ApiType>;\n      /**\n       * Generic const\n       **/\n      [key: string]: Codec;\n    };\n  } // AugmentedConsts\n} // declare module\n"],"version":3}