889247a2c5db6dad57df700adca9e43c
"use strict";
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
// import type lookup before we augment - in some environments
// this is required to allow for ambient/previous definitions
require("@polkadot/api-base/types/consts");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,