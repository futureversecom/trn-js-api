{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/dex.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/dex.e2e.ts"],"sourcesContent":["\nimport {ApiPromise, Keyring, WsProvider} from \"@polkadot/api\";\nimport {options} from \"@therootnetwork/api\";\nimport {hexToU8a} from \"@polkadot/util\";\n\nexport const ALITH_PRIVATE_KEY = \"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133\";\nexport const BOB_PRIVATE_KEY = \"0x79c3b7fc0b7697b9414cb87adcb37317d1cab32818ae18c0e97ad76395d1fdcf\";\nconst TOKEN_ID = 1124;\nexport const GAS_TOKEN_ID = 2;\n\ndescribe('DEX RPC calls testing', () => {\n  let api;\n  let alith, bob;\n  beforeAll(async () => {\n    const providerUrl = 'ws://127.0.0.1:9944/';\n    const provider = new WsProvider(providerUrl);\n    console.log('providerUrl', providerUrl);\n    api = new ApiPromise(options({ provider }));\n    await api.isReady;\n    const keyring = new Keyring({ type: \"ethereum\" });\n    alith = keyring.addFromSeed(hexToU8a(ALITH_PRIVATE_KEY));\n    bob = keyring.addFromSeed(hexToU8a(BOB_PRIVATE_KEY));\n  });\n\n  afterAll(async () => {\n    api.disconnect();\n  });\n\n  describe('Queries()', () => {\n\n    it.skip(\"Deposit liquidity in DEX asset's pool\",  async () => {\n      const txs = [\n        api.tx.assetsExt.createAsset(\"test\", \"TEST\", 18, 1, alith.address), // create asset\n        api.tx.assets.mint(TOKEN_ID, alith.address, \"10000000000000000\"),\n        api.tx.dex.addLiquidity(\n            // provide liquidity\n            TOKEN_ID,\n            GAS_TOKEN_ID,\n            \"1000000000000000\",\n            250_000_000,\n            \"10000000000000000\",\n            250_000_000,\n            0,\n        ),\n      ];\n\n      await new Promise<void>((resolve, reject) => {\n        api.tx.utility\n            .batch(txs)\n            .signAndSend(alith, ({ events, status }) => {\n              if (status.isInBlock) {\n                console.log(`setup block hash: ${status.asInBlock}`);\n                  for (const {event} of events) {\n                    if (event.method === 'AddLiquidity') {\n                      resolve();\n                    }\n                  }\n              }\n            })\n            .catch((err) => reject(err));\n      });\n\n      console.log(\"done setting up dex liquidity.\");\n          });\n\n    it(\"getAmountsOut rpc works\", async () => {\n      const result = await (api.rpc as any).dex.getAmountsOut(100, [GAS_TOKEN_ID, TOKEN_ID]);\n      expect(result.toJSON()).toEqual({\"Ok\":[100, 398799840]});\n    });\n\n    it(\"quote rpc works\", async () => {\n      const result = await api.rpc.dex.quote(1, 5, 10);\n      expect(result.toJSON()).toEqual({\"Ok\":2});\n    });\n\n    /// TODO add more test for happy and sad flow\n  });\n});\n"],"version":3}