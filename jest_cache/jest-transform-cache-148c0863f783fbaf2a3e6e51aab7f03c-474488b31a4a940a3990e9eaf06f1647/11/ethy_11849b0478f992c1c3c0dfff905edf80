c89f864d36f1135984977f8fa4dc1374
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    rpc: {
        "getEventProof": {
            "description": "Get ETH event proof for event Id",
            "params": [
                {
                    "name": "eventId",
                    "type": "EventProofId"
                }
            ],
            "type": "Option<EthEventProofResponse>"
        },
        "getXrplTxProof": {
            "description": "Get XRPL event proof for event Id",
            "params": [
                {
                    "name": "eventId",
                    "type": "EventProofId"
                }
            ],
            "type": "Option<XrplEventProofResponse>"
        },
        subscribeEventProofs: {
            alias: ['ethy_subscribeEventProofs', 'ethy_unsubscribeEventProofs'],
            description: 'Subscribe to Eth event proof.',
            params: [],
            pubsub: [
                'subscribeEventProofs',
                'unsubscribeEventProofs',
            ],
            type: 'Null'
        },
    },
    types: {
        VersionedEventProof: {
            _enum: {
                sentinel: null,
                EventProof: "EventProof",
            },
        },
        ExtrinsicSignature: "EthereumSignature",
        EthyId: "[u8; 32]",
        EthyEventId: "u64",
        EthEventProofResponse: {
            "event_id": "EventProofId",
            "signatures": "Vec<Bytes>",
            "validators": "Vec<AccountId20>",
            "validator_set_id": "ValidatorSetId",
            "block": "H256",
            "tag": "Option<Bytes>"
        },
        EventProofId: "u64",
        EthereumSignature: {
            r: "H256",
            s: "H256",
            v: "U8",
        },
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL3R5cGUtZGVmaW5pdGlvbnMvc3JjL2V0aHkudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQkFBZTtJQUNiLEdBQUcsRUFBRTtRQUNILGVBQWUsRUFBRTtZQUNmLGFBQWEsRUFBRSxrQ0FBa0M7WUFDakQsUUFBUSxFQUFFO2dCQUNSO29CQUNFLE1BQU0sRUFBRSxTQUFTO29CQUNqQixNQUFNLEVBQUUsY0FBYztpQkFDdkI7YUFDRjtZQUNELE1BQU0sRUFBRSwrQkFBK0I7U0FDeEM7UUFDRCxnQkFBZ0IsRUFBRTtZQUNoQixhQUFhLEVBQUUsbUNBQW1DO1lBQ2xELFFBQVEsRUFBRTtnQkFDUjtvQkFDRSxNQUFNLEVBQUUsU0FBUztvQkFDakIsTUFBTSxFQUFFLGNBQWM7aUJBQ3ZCO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsZ0NBQWdDO1NBQ3pDO1FBQ0Qsb0JBQW9CLEVBQUU7WUFDcEIsS0FBSyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLENBQUM7WUFDbkUsV0FBVyxFQUFFLCtCQUErQjtZQUM1QyxNQUFNLEVBQUUsRUFBRTtZQUNWLE1BQU0sRUFBRTtnQkFDTixzQkFBc0I7Z0JBQ3RCLHdCQUF3QjthQUN6QjtZQUNELElBQUksRUFBRSxNQUFNO1NBQ2I7S0FDRjtJQUNELEtBQUssRUFBRTtRQUNMLG1CQUFtQixFQUFFO1lBQ25CLEtBQUssRUFBRTtnQkFDTCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxVQUFVLEVBQUUsWUFBWTthQUN6QjtTQUNGO1FBQ0Qsa0JBQWtCLEVBQUUsbUJBQW1CO1FBQ3ZDLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLHFCQUFxQixFQUFFO1lBQ3JCLFVBQVUsRUFBRSxjQUFjO1lBQzFCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFlBQVksRUFBRSxrQkFBa0I7WUFDaEMsa0JBQWtCLEVBQUUsZ0JBQWdCO1lBQ3BDLE9BQU8sRUFBRSxNQUFNO1lBQ2YsS0FBSyxFQUFFLGVBQWU7U0FDdkI7UUFDRCxZQUFZLEVBQUUsS0FBSztRQUNuQixpQkFBaUIsRUFBRTtZQUNqQixDQUFDLEVBQUUsTUFBTTtZQUNULENBQUMsRUFBRSxNQUFNO1lBQ1QsQ0FBQyxFQUFFLElBQUk7U0FDUjtLQUNGO0NBQ0YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2FyaXNobWEvd29yay9mdXR1cmV2ZXJzZS90cm4tcm9vdG5ldC1hcGkvcGFja2FnZXMvdHlwZS1kZWZpbml0aW9ucy9zcmMvZXRoeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIHJwYzoge1xuICAgIFwiZ2V0RXZlbnRQcm9vZlwiOiB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2V0IEVUSCBldmVudCBwcm9vZiBmb3IgZXZlbnQgSWRcIixcbiAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImV2ZW50SWRcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJFdmVudFByb29mSWRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJ0eXBlXCI6IFwiT3B0aW9uPEV0aEV2ZW50UHJvb2ZSZXNwb25zZT5cIlxuICAgIH0sXG4gICAgXCJnZXRYcnBsVHhQcm9vZlwiOiB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2V0IFhSUEwgZXZlbnQgcHJvb2YgZm9yIGV2ZW50IElkXCIsXG4gICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJldmVudElkXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiRXZlbnRQcm9vZklkXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIk9wdGlvbjxYcnBsRXZlbnRQcm9vZlJlc3BvbnNlPlwiXG4gICAgfSxcbiAgICBzdWJzY3JpYmVFdmVudFByb29mczoge1xuICAgICAgYWxpYXM6IFsnZXRoeV9zdWJzY3JpYmVFdmVudFByb29mcycsICdldGh5X3Vuc3Vic2NyaWJlRXZlbnRQcm9vZnMnXSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnU3Vic2NyaWJlIHRvIEV0aCBldmVudCBwcm9vZi4nLFxuICAgICAgcGFyYW1zOiBbXSxcbiAgICAgIHB1YnN1YjogW1xuICAgICAgICAnc3Vic2NyaWJlRXZlbnRQcm9vZnMnLFxuICAgICAgICAndW5zdWJzY3JpYmVFdmVudFByb29mcycsXG4gICAgICBdLFxuICAgICAgdHlwZTogJ051bGwnXG4gICAgfSxcbiAgfSxcbiAgdHlwZXM6IHtcbiAgICBWZXJzaW9uZWRFdmVudFByb29mOiB7XG4gICAgICBfZW51bToge1xuICAgICAgICBzZW50aW5lbDogbnVsbCxcbiAgICAgICAgRXZlbnRQcm9vZjogXCJFdmVudFByb29mXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgRXh0cmluc2ljU2lnbmF0dXJlOiBcIkV0aGVyZXVtU2lnbmF0dXJlXCIsXG4gICAgRXRoeUlkOiBcIlt1ODsgMzJdXCIsXG4gICAgRXRoeUV2ZW50SWQ6IFwidTY0XCIsXG4gICAgRXRoRXZlbnRQcm9vZlJlc3BvbnNlOiB7XG4gICAgICBcImV2ZW50X2lkXCI6IFwiRXZlbnRQcm9vZklkXCIsXG4gICAgICBcInNpZ25hdHVyZXNcIjogXCJWZWM8Qnl0ZXM+XCIsXG4gICAgICBcInZhbGlkYXRvcnNcIjogXCJWZWM8QWNjb3VudElkMjA+XCIsXG4gICAgICBcInZhbGlkYXRvcl9zZXRfaWRcIjogXCJWYWxpZGF0b3JTZXRJZFwiLFxuICAgICAgXCJibG9ja1wiOiBcIkgyNTZcIixcbiAgICAgIFwidGFnXCI6IFwiT3B0aW9uPEJ5dGVzPlwiXG4gICAgfSxcbiAgICBFdmVudFByb29mSWQ6IFwidTY0XCIsXG4gICAgRXRoZXJldW1TaWduYXR1cmU6IHtcbiAgICAgIHI6IFwiSDI1NlwiLFxuICAgICAgczogXCJIMjU2XCIsXG4gICAgICB2OiBcIlU4XCIsXG4gICAgfSxcbiAgfVxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==