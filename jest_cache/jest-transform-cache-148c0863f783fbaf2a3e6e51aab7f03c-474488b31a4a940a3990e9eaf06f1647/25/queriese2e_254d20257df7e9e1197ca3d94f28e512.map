{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/queries.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/queries.e2e.ts"],"sourcesContent":["// // Copyright 2019-2020 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import { AssetInfoV41 as AssetInfo, AssetOptions, Hash, Vec, BalanceLock } from \"@cennznet/types\";\n// import { Keyring } from '@polkadot/keyring';\n// import {Reasons} from \"@polkadot/types/interfaces\";\n// import {stringToHex, u8aToString} from '@polkadot/util';\n// import { cryptoWaitReady } from '@polkadot/util-crypto';\n//\n// import initApiPromise from '../../../../jest/initApiPromise';\n//\n// describe('e2e queries', () => {\n//   let api, alice, aliceStash, bob;\n//\n//   beforeAll(async () => {\n//     await cryptoWaitReady();\n//     const keyring = new Keyring({ type: 'sr25519' });\n//     alice = keyring.addFromUri('//Alice');\n//     aliceStash = keyring.addFromUri('//Alice//stash')\n//     bob = keyring.addFromUri('//Bob');\n//     api = await initApiPromise();\n//   });\n//\n//   afterAll(async () => {\n//     await api.disconnect();\n//   });\n//\n//   describe('Query storage', () => {\n//     it('Makes the runtime, rpc, state & extrinsics available', (): void => {\n//       expect(api.genesisHash).toBeDefined();\n//       expect(api.runtimeMetadata).toBeDefined();\n//       expect(api.runtimeVersion).toBeDefined();\n//       expect(api.rpc).toBeDefined();\n//       expect(api.query).toBeDefined();\n//       expect(api.tx).toBeDefined();\n//       expect(api.derive).toBeDefined();\n//     });\n//   });\n//\n//   describe('Query storage using at', () => {\n//     it('Queries correct balance', async () => {\n//       const nextAssetId = await api.query.genericAsset.nextAssetId();\n//       const blockHash: Hash = (await api.rpc.chain.getBlockHash()) as Hash;\n//       const nextAssetIdAt = await api.query.genericAsset.nextAssetId.at(blockHash);\n//       expect(nextAssetId.toString()).toEqual(nextAssetIdAt.toString());\n//     });\n//\n//     it('Checks transaction payment', async done => {\n//       const assetBalance = await api.query.genericAsset.freeBalance(16001, bob.address);\n//       console.log('Balance before ', assetBalance.toString());\n//       const ex = await api.tx.genericAsset\n//         .transfer(16000, bob.address, 100);\n//       const payment = await api.rpc.payment.queryInfo(ex.toHex());\n//       console.log('Payment:', payment.partialFee.toString());\n//       done();\n//     });\n//   });\n//\n//   describe('Subscribe storage', () => {\n//     let unsubscribeFn;\n//     it('Emits events when storage changes', async done => {\n//       let count = 0;\n//       const reservedIdStart: number = 17000;\n//       unsubscribeFn = await api.query.genericAsset.nextAssetId((result: any) => {\n//         if (count === 0) {\n//           expect(result.toNumber()).toBeGreaterThanOrEqual(reservedIdStart);\n//           count += 1;\n//         } else {\n//           expect(result.toNumber()).toBeGreaterThanOrEqual(reservedIdStart);\n//           unsubscribeFn();\n//           done();\n//         }\n//       });\n//       const sudoKey = await api.query.sudo.key();\n//       const keyring = new Keyring({ type: 'sr25519' });\n//       keyring.addFromUri('//Alice');\n//       // Lookup from keyring (assuming we have added all, on --dev this would be `//Alice`)\n//       const sudoPair = keyring.getPair(sudoKey.toString());\n//       const owner = api.registry.createType('Owner', 0); // Owner type is enum with 0 as none/null\n//       const permissions = api.registry.createType('PermissionsV1', { update: owner, mint: owner, burn: owner});\n//       const option = {initialIssuance : 0, permissions};\n//       const assetOption: AssetOptions = api.registry.createType('AssetOptions', option);\n//       const assetInfo: AssetInfo = api.registry.createType('AssetInfo', {symbol: 'SYLO', decimalPlaces: 3, existentialDeposit: 5});\n//       await api.tx.sudo\n//         .sudo(api.tx.genericAsset\n//           .create(alice.address,\n//             assetOption,\n//             assetInfo\n//           ))\n//         .signAndSend(sudoPair);\n//     }, 12000);\n//   });\n//\n//   describe('GA rpc calls', () => {\n//     it('Gets generic asset registeredAssets through RPC call', async done => {\n//       const registeredAsset = await api.rpc.genericAsset.registeredAssets();\n//       console.log(registeredAsset.toJSON());\n//       expect(registeredAsset.length).toBeGreaterThan(0);\n//       const hasCpayAsset = ([assetId, meta]) => assetId.toString() === '16001' && u8aToString(meta.symbol) === 'CPAY' && meta.decimalPlaces.toString() === '4';\n//       const hasCennzAsset = ([assetId, meta]) => assetId.toString() === '16000' && u8aToString(meta.symbol) === 'CENNZ' && meta.decimalPlaces.toString() === '4';\n//       expect(registeredAsset.some(hasCpayAsset)).toBe(true);\n//       expect(registeredAsset.some(hasCennzAsset)).toBe(true);\n//       done();\n//     });\n//   });\n//\n//   describe('Staking account derived query', () => {\n//     it('Gets staking account details', async done => {\n//       const stashId = aliceStash.address;\n//       const activeEra = await api.query.staking.activeEra();\n//       const stakingAccount = await api.derive.stakingCennznet.accountInfo(stashId, activeEra.unwrap().index);\n//       expect(stakingAccount.accountId.toString()).toBe(stashId);\n//       expect(stakingAccount.controllerId.toString()).toBe(alice.address);\n//       expect(stakingAccount.nominators).toHaveLength(0); // Initially no nominators\n//       expect(stakingAccount.rewardDestination.toString()).toBe(stashId);\n//       expect(stakingAccount.stakers).toBeDefined();\n//       expect(stakingAccount.stakingLedger.stash.toString()).toBe(stashId);\n//       expect(stakingAccount.validatorPrefs[0]).toBe('commission');\n//       expect(stakingAccount.validatorPrefs[1].toNumber()).toBe(0);\n//       // with the latest polkadot version, session keyInfo returns object with session details\n//       const stakingSessionDetails = await api.derive.session.keyInfo(stashId);\n//       const sessionInfo = {\n//         grandpa: '0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee',\n//         babe: '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',\n//         imOnline: '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',\n//         authorityDiscovery: '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',\n//         ethBridge: '0x0204dad6fc9c291c68498de501c6d6d17bfe28aee69cfbf71b2cc849caafcb0159'\n//       };\n//       expect(stakingSessionDetails.nextSessionKeys.toJSON()).toStrictEqual(sessionInfo);\n//       expect(stakingSessionDetails.sessionKeys.toJSON()).toStrictEqual(sessionInfo);\n//       done();\n//     });\n//   });\n//\n//   describe('Generic Asset Storage', () => {\n//     it('Gets balance locks ok', async done => {\n//       const stashId = '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY'; // alice_stash\n//       const stakingAssetId = await api.query.genericAsset.stakingAssetId();\n//       const balanceLocks: Vec<BalanceLock> = await api.query.genericAsset.locks(stakingAssetId, stashId);\n//       expect(balanceLocks.isEmpty).toBeFalsy();\n//       const lockDetails = {\n//         \"id\": stringToHex(\"staking \"),\n//         \"amount\": 1000000,\n//         \"reasons\": \"All\"\n//       };\n//       expect(balanceLocks[0].toJSON()).toStrictEqual(lockDetails);\n//       let reasons: Reasons = balanceLocks[0].reasons;\n//       expect(reasons.isAll).toBeTruthy();\n//       done();\n//     });\n//   });\n// });\n"],"version":3}