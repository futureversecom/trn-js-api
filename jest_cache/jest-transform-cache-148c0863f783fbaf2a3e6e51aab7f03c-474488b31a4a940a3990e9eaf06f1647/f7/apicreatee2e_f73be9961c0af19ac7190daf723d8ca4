693ee7f451e64aa728bda36b8cc0a64f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@polkadot/api");
const api_2 = require("@therootnetwork/api");
describe('e2e api create', () => {
    it('Find lock balance for rootnet validator', async () => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const validator = "0x0Fa787f51333D9cA66a4A6563b56EececDA49a06";
        const lockBalance = await api.query.balances.locks(validator);
        expect((lockBalance.toJSON())[0].amount).toBeGreaterThanOrEqual(0);
        await api.disconnect();
    });
    // it('Should get rejected if the connection fails', async () => {
    //   const incorrectEndPoint = 'wss://unknow.chain.io/ws';
    //   const autoConnect = false;
    //   const provider = new WsProvider(incorrectEndPoint, autoConnect);
    //   const api = new ApiPromise(options({provider: provider}));
    //   await expect(api.isReady).rejects.toThrow('Timed out in 10000 ms.');
    // });
    it('subscription test', async () => {
        const providerUrl = 'wss://root.rootnet.live/ws';
        const provider = new api_1.WsProvider(providerUrl);
        console.log('providerUrl', providerUrl);
        const api = new api_1.ApiPromise((0, api_2.options)({ provider }));
        await api.isReady;
        const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {
            console.log(`Chain is at block: #${header.number}`);
            expect(header.number).toBeDefined();
            unsubscribe();
            api.disconnect();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2thcmlzaG1hL3dvcmsvZnV0dXJldmVyc2UvdHJuLXJvb3RuZXQtYXBpL3BhY2thZ2VzL2FwaS90ZXN0L2UyZS9hcGkuY3JlYXRlLmUyZS50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1RDtBQUN2RCw2Q0FBOEM7QUFDOUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUU5QixFQUFFLENBQUMseUNBQXlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckQsTUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksZ0JBQVUsQ0FBQyxJQUFBLGFBQU8sRUFBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDcEIsTUFBTSxTQUFTLEdBQUcsNENBQTRDLENBQUM7UUFDL0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsTUFBTSxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxrRUFBa0U7SUFDbEUsMERBQTBEO0lBQzFELCtCQUErQjtJQUMvQixxRUFBcUU7SUFDckUsK0RBQStEO0lBQy9ELHlFQUF5RTtJQUN6RSxNQUFNO0lBRU4sRUFBRSxDQUFDLG1CQUFtQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQy9CLE1BQU0sV0FBVyxHQUFHLDRCQUE0QixDQUFDO1FBQ2pELE1BQU0sUUFBUSxHQUFHLElBQUksZ0JBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLGdCQUFVLENBQUMsSUFBQSxhQUFPLEVBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQ3BCLE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLFdBQVcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2FyaXNobWEvd29yay9mdXR1cmV2ZXJzZS90cm4tcm9vdG5ldC1hcGkvcGFja2FnZXMvYXBpL3Rlc3QvZTJlL2FwaS5jcmVhdGUuZTJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVByb21pc2UsIFdzUHJvdmlkZXIgfSBmcm9tICdAcG9sa2Fkb3QvYXBpJztcbmltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICdAdGhlcm9vdG5ldHdvcmsvYXBpJztcbmRlc2NyaWJlKCdlMmUgYXBpIGNyZWF0ZScsICgpID0+IHtcblxuICBpdCgnRmluZCBsb2NrIGJhbGFuY2UgZm9yIHJvb3RuZXQgdmFsaWRhdG9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvdmlkZXJVcmwgPSAnd3NzOi8vcm9vdC5yb290bmV0LmxpdmUvd3MnO1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgV3NQcm92aWRlcihwcm92aWRlclVybCk7XG4gICAgICBjb25zb2xlLmxvZygncHJvdmlkZXJVcmwnLCBwcm92aWRlclVybCk7XG4gICAgICBjb25zdCBhcGkgPSBuZXcgQXBpUHJvbWlzZShvcHRpb25zKHsgcHJvdmlkZXIgfSkpO1xuICAgICAgYXdhaXQgYXBpLmlzUmVhZHk7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gXCIweDBGYTc4N2Y1MTMzM0Q5Y0E2NmE0QTY1NjNiNTZFZWNlY0RBNDlhMDZcIjtcbiAgICBjb25zdCBsb2NrQmFsYW5jZSA9IGF3YWl0IGFwaS5xdWVyeS5iYWxhbmNlcy5sb2Nrcyh2YWxpZGF0b3IpO1xuICAgIGV4cGVjdCgobG9ja0JhbGFuY2UudG9KU09OKCkpWzBdLmFtb3VudCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICBhd2FpdCBhcGkuZGlzY29ubmVjdCgpO1xuICB9KTtcblxuICAvLyBpdCgnU2hvdWxkIGdldCByZWplY3RlZCBpZiB0aGUgY29ubmVjdGlvbiBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgLy8gICBjb25zdCBpbmNvcnJlY3RFbmRQb2ludCA9ICd3c3M6Ly91bmtub3cuY2hhaW4uaW8vd3MnO1xuICAvLyAgIGNvbnN0IGF1dG9Db25uZWN0ID0gZmFsc2U7XG4gIC8vICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgV3NQcm92aWRlcihpbmNvcnJlY3RFbmRQb2ludCwgYXV0b0Nvbm5lY3QpO1xuICAvLyAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoe3Byb3ZpZGVyOiBwcm92aWRlcn0pKTtcbiAgLy8gICBhd2FpdCBleHBlY3QoYXBpLmlzUmVhZHkpLnJlamVjdHMudG9UaHJvdygnVGltZWQgb3V0IGluIDEwMDAwIG1zLicpO1xuICAvLyB9KTtcblxuICBpdCgnc3Vic2NyaXB0aW9uIHRlc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm92aWRlclVybCA9ICd3c3M6Ly9yb290LnJvb3RuZXQubGl2ZS93cyc7XG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBXc1Byb3ZpZGVyKHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdwcm92aWRlclVybCcsIHByb3ZpZGVyVXJsKTtcbiAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlQcm9taXNlKG9wdGlvbnMoeyBwcm92aWRlciB9KSk7XG4gICAgICBhd2FpdCBhcGkuaXNSZWFkeTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGF3YWl0IGFwaS5ycGMuY2hhaW4uc3Vic2NyaWJlTmV3SGVhZHMoKGhlYWRlcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coYENoYWluIGlzIGF0IGJsb2NrOiAjJHtoZWFkZXIubnVtYmVyfWApO1xuICAgICAgZXhwZWN0KGhlYWRlci5udW1iZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgYXBpLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==