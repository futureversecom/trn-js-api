{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-runtime.ts","mappings":";AAAA,mEAAmE;AACnE,oBAAoB;;AAEpB,8DAA8D;AAC9D,6DAA6D;AAC7D,0CAAwC","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/types/src/augment/api-runtime.ts"],"sourcesContent":["// Auto-generated via `yarn polkadot-types-from-chain`, do not edit\n/* eslint-disable */\n\n// import type lookup before we augment - in some environments\n// this is required to allow for ambient/previous definitions\nimport '@polkadot/api-base/types/calls';\n\nimport type { ApiTypes, AugmentedCall, DecoratedCallBase } from '@polkadot/api-base/types';\nimport type { Bytes, Null, Option, Result, U256, Vec, bool, u256, u32, u64 } from '@polkadot/types-codec';\nimport type { AnyNumber, ITuple } from '@polkadot/types-codec/types';\nimport type { BabeEquivocationProof, BabeGenesisConfiguration, Epoch, OpaqueKeyOwnershipProof } from '@polkadot/types/interfaces/babe';\nimport type { CheckInherentsResult, InherentData } from '@polkadot/types/interfaces/blockbuilder';\nimport type { BlockHash } from '@polkadot/types/interfaces/chain';\nimport type { AuthorityId } from '@polkadot/types/interfaces/consensus';\nimport type { BlockV2, EthReceiptV3, EthTransactionStatus, TransactionV2 } from '@polkadot/types/interfaces/eth';\nimport type { EvmAccount, EvmCallInfo, EvmCreateInfo } from '@polkadot/types/interfaces/evm';\nimport type { Extrinsic } from '@polkadot/types/interfaces/extrinsics';\nimport type { AuthorityList, GrandpaEquivocationProof, SetId } from '@polkadot/types/interfaces/grandpa';\nimport type { OpaqueMetadata } from '@polkadot/types/interfaces/metadata';\nimport type { FeeDetails, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';\nimport type { ApplyExtrinsicResult, DispatchError } from '@polkadot/types/interfaces/system';\nimport type { TransactionSource, TransactionValidity } from '@polkadot/types/interfaces/txqueue';\nimport type { IExtrinsic, Observable } from '@polkadot/types/types';\nimport type { AccountId, Block, H160, H256, Header, Index, KeyTypeId, Permill, Slot } from '@therootnetwork/types/interfaces/runtime';\n\nexport type __AugmentedCall<ApiType extends ApiTypes> = AugmentedCall<ApiType>;\nexport type __DecoratedCallBase<ApiType extends ApiTypes> = DecoratedCallBase<ApiType>;\n\ndeclare module '@polkadot/api-base/types/calls' {\n  interface AugmentedCalls<ApiType extends ApiTypes> {\n    /** 0xbc9d89904f5b923f/1 */\n    accountNonceApi: {\n      /**\n       * The API to query account nonce (aka transaction index)\n       **/\n      accountNonce: AugmentedCall<ApiType, (accountId: AccountId | string | Uint8Array) => Observable<Index>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xcbca25e39f142387/2 */\n    babeApi: {\n      /**\n       * Return the genesis configuration for BABE. The configuration is only read on genesis.\n       **/\n      configuration: AugmentedCall<ApiType, () => Observable<BabeGenesisConfiguration>>;\n      /**\n       * Returns information regarding the current epoch.\n       **/\n      currentEpoch: AugmentedCall<ApiType, () => Observable<Epoch>>;\n      /**\n       * Returns the slot that started the current epoch.\n       **/\n      currentEpochStart: AugmentedCall<ApiType, () => Observable<Slot>>;\n      /**\n       * Generates a proof of key ownership for the given authority in the current epoch.\n       **/\n      generateKeyOwnershipProof: AugmentedCall<ApiType, (slot: Slot | AnyNumber | Uint8Array, authorityId: AuthorityId | string | Uint8Array) => Observable<Option<OpaqueKeyOwnershipProof>>>;\n      /**\n       * Returns information regarding the next epoch (which was already previously announced).\n       **/\n      nextEpoch: AugmentedCall<ApiType, () => Observable<Epoch>>;\n      /**\n       * Submits an unsigned extrinsic to report an equivocation.\n       **/\n      submitReportEquivocationUnsignedExtrinsic: AugmentedCall<ApiType, (equivocationProof: BabeEquivocationProof | { offender?: any; slotNumber?: any; firstHeader?: any; secondHeader?: any } | string | Uint8Array, keyOwnerProof: OpaqueKeyOwnershipProof | string | Uint8Array) => Observable<Option<Null>>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0x40fe3ad401f8959a/6 */\n    blockBuilder: {\n      /**\n       * Apply the given extrinsic.\n       **/\n      applyExtrinsic: AugmentedCall<ApiType, (extrinsic: Extrinsic | IExtrinsic | string | Uint8Array) => Observable<ApplyExtrinsicResult>>;\n      /**\n       * Check that the inherents are valid.\n       **/\n      checkInherents: AugmentedCall<ApiType, (block: Block | { header?: any; extrinsics?: any } | string | Uint8Array, data: InherentData | { data?: any } | string | Uint8Array) => Observable<CheckInherentsResult>>;\n      /**\n       * Finish the current block.\n       **/\n      finalizeBlock: AugmentedCall<ApiType, () => Observable<Header>>;\n      /**\n       * Generate inherent extrinsics.\n       **/\n      inherentExtrinsics: AugmentedCall<ApiType, (inherent: InherentData | { data?: any } | string | Uint8Array) => Observable<Vec<Extrinsic>>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xe65b00e46cedd0aa/2 */\n    convertTransactionRuntimeApi: {\n      /**\n       * Converts an Ethereum-style transaction to Extrinsic\n       **/\n      convertTransaction: AugmentedCall<ApiType, (transaction: TransactionV2 | { Legacy: any } | { EIP2930: any } | { EIP1559: any } | string | Uint8Array) => Observable<Extrinsic>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0x582211f65bb14b89/4 */\n    ethereumRuntimeRPCApi: {\n      /**\n       * Returns pallet_evm::Accounts by address.\n       **/\n      accountBasic: AugmentedCall<ApiType, (address: H160 | string | Uint8Array) => Observable<EvmAccount>>;\n      /**\n       * For a given account address, returns pallet_evm::AccountCodes.\n       **/\n      accountCodeAt: AugmentedCall<ApiType, (address: H160 | string | Uint8Array) => Observable<Bytes>>;\n      /**\n       * Returns the converted FindAuthor::find_author authority id.\n       **/\n      author: AugmentedCall<ApiType, () => Observable<H160>>;\n      /**\n       * Returns a frame_ethereum::call response. If `estimate` is true,\n       **/\n      call: AugmentedCall<ApiType, (from: H160 | string | Uint8Array, to: H160 | string | Uint8Array, data: Bytes | string | Uint8Array, value: U256 | AnyNumber | Uint8Array, gasLimit: U256 | AnyNumber | Uint8Array, maxFeePerGas: Option<U256> | null | Uint8Array | U256 | AnyNumber, maxPriorityFeePerGas: Option<U256> | null | Uint8Array | U256 | AnyNumber, nonce: Option<U256> | null | Uint8Array | U256 | AnyNumber, estimate: bool | boolean | Uint8Array, accessList: Option<Vec<ITuple<[H160, Vec<H256>]>>> | null | Uint8Array | Vec<ITuple<[H160, Vec<H256>]>> | ([H160 | string | Uint8Array, Vec<H256> | (H256 | string | Uint8Array)[]])[]) => Observable<Result<EvmCallInfo, DispatchError>>>;\n      /**\n       * Returns runtime defined pallet_evm::ChainId.\n       **/\n      chainId: AugmentedCall<ApiType, () => Observable<u64>>;\n      /**\n       * Returns a frame_ethereum::call response. If `estimate` is true,\n       **/\n      create: AugmentedCall<ApiType, (from: H160 | string | Uint8Array, data: Bytes | string | Uint8Array, value: U256 | AnyNumber | Uint8Array, gasLimit: U256 | AnyNumber | Uint8Array, maxFeePerGas: Option<U256> | null | Uint8Array | U256 | AnyNumber, maxPriorityFeePerGas: Option<U256> | null | Uint8Array | U256 | AnyNumber, nonce: Option<U256> | null | Uint8Array | U256 | AnyNumber, estimate: bool | boolean | Uint8Array, accessList: Option<Vec<ITuple<[H160, Vec<H256>]>>> | null | Uint8Array | Vec<ITuple<[H160, Vec<H256>]>> | ([H160 | string | Uint8Array, Vec<H256> | (H256 | string | Uint8Array)[]])[]) => Observable<Result<EvmCreateInfo, DispatchError>>>;\n      /**\n       * Return all the current data for a block in a single runtime call.\n       **/\n      currentAll: AugmentedCall<ApiType, () => Observable<ITuple<[Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>]>>>;\n      /**\n       * Return the current block.\n       **/\n      currentBlock: AugmentedCall<ApiType, () => Observable<BlockV2>>;\n      /**\n       * Return the current receipt.\n       **/\n      currentReceipts: AugmentedCall<ApiType, () => Observable<Option<Vec<EthReceiptV3>>>>;\n      /**\n       * Return the current transaction status.\n       **/\n      currentTransactionStatuses: AugmentedCall<ApiType, () => Observable<Option<Vec<EthTransactionStatus>>>>;\n      /**\n       * Return the elasticity multiplier.\n       **/\n      elasticity: AugmentedCall<ApiType, () => Observable<Option<Permill>>>;\n      /**\n       * Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.\n       **/\n      extrinsicFilter: AugmentedCall<ApiType, (xts: Vec<Extrinsic> | (Extrinsic | IExtrinsic | string | Uint8Array)[]) => Observable<Vec<TransactionV2>>>;\n      /**\n       * Returns FixedGasPrice::min_gas_price\n       **/\n      gasPrice: AugmentedCall<ApiType, () => Observable<u256>>;\n      /**\n       * For a given account address and index, returns pallet_evm::AccountStorages.\n       **/\n      storageAt: AugmentedCall<ApiType, (address: H160 | string | Uint8Array, index: u256 | AnyNumber | Uint8Array) => Observable<H256>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xed99c5acb25eedf5/3 */\n    grandpaApi: {\n      /**\n       * Get current GRANDPA authority set id.\n       **/\n      currentSetId: AugmentedCall<ApiType, () => Observable<SetId>>;\n      /**\n       * Generates a proof of key ownership for the given authority in the given set.\n       **/\n      generateKeyOwnershipProof: AugmentedCall<ApiType, (setId: SetId | AnyNumber | Uint8Array, authorityId: AuthorityId | string | Uint8Array) => Observable<Option<OpaqueKeyOwnershipProof>>>;\n      /**\n       * Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.\n       **/\n      grandpaAuthorities: AugmentedCall<ApiType, () => Observable<AuthorityList>>;\n      /**\n       * Submits an unsigned extrinsic to report an equivocation.\n       **/\n      submitReportEquivocationUnsignedExtrinsic: AugmentedCall<ApiType, (equivocationProof: GrandpaEquivocationProof | { setId?: any; equivocation?: any } | string | Uint8Array, keyOwnerProof: OpaqueKeyOwnershipProof | string | Uint8Array) => Observable<Option<Null>>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0x37e397fc7c91f5e4/1 */\n    metadata: {\n      /**\n       * Returns the metadata of a runtime\n       **/\n      metadata: AugmentedCall<ApiType, () => Observable<OpaqueMetadata>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xf78b278be53f454c/2 */\n    offchainWorkerApi: {\n      /**\n       * Starts the off-chain task for given block header.\n       **/\n      offchainWorker: AugmentedCall<ApiType, (header: Header | { parentHash?: any; number?: any; stateRoot?: any; extrinsicsRoot?: any; digest?: any } | string | Uint8Array) => Observable<Null>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xab3c0572291feb8b/1 */\n    sessionKeys: {\n      /**\n       * Decode the given public session keys.\n       **/\n      decodeSessionKeys: AugmentedCall<ApiType, (encoded: Bytes | string | Uint8Array) => Observable<Option<Vec<ITuple<[Bytes, KeyTypeId]>>>>>;\n      /**\n       * Generate a set of session keys with optionally using the given seed.\n       **/\n      generateSessionKeys: AugmentedCall<ApiType, (seed: Option<Bytes> | null | Uint8Array | Bytes | string) => Observable<Bytes>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0xd2bc9897eed08f15/3 */\n    taggedTransactionQueue: {\n      /**\n       * Validate the transaction.\n       **/\n      validateTransaction: AugmentedCall<ApiType, (source: TransactionSource | 'InBlock' | 'Local' | 'External' | number | Uint8Array, tx: Extrinsic | IExtrinsic | string | Uint8Array, blockHash: BlockHash | string | Uint8Array) => Observable<TransactionValidity>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n    /** 0x37c8bb1350a9a2a8/1 */\n    transactionPaymentApi: {\n      /**\n       * The transaction fee details\n       **/\n      queryFeeDetails: AugmentedCall<ApiType, (uxt: Extrinsic | IExtrinsic | string | Uint8Array, len: u32 | AnyNumber | Uint8Array) => Observable<FeeDetails>>;\n      /**\n       * The transaction info\n       **/\n      queryInfo: AugmentedCall<ApiType, (uxt: Extrinsic | IExtrinsic | string | Uint8Array, len: u32 | AnyNumber | Uint8Array) => Observable<RuntimeDispatchInfo>>;\n      /**\n       * Generic call\n       **/\n      [key: string]: DecoratedCallBase<ApiType>;\n    };\n  } // AugmentedCalls\n} // declare module\n"],"version":3}