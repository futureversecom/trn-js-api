{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/src/index.ts","mappings":";;;AAGA,iDAAwL;AAExL,yDAAyD;AAE5C,QAAA,cAAc,GAAe;IACxC,KAAK,EAAE,aAAY;IACnB,GAAG,EAAE,WAAU;CAChB,CAAC;AAEK,MAAM,OAAO,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,EAChC,OAAO,GAAG,EAAE,EACZ,gBAAgB,EAChB,KAAK,GAAG,EAAE,EACV,UAAU,GAAG,EAAE,EACf,WAAW,GAAG,EAAE,EAChB,GAAG,YAAY,KAAiB,EAAE,EAAc,EAAE,CAAC,CAAC;IACpD,KAAK,EAAE;QACL,GAAG,aAAY;QACf,GAAI,mBAA+C;QACnD,GAAG,KAAK;KACT;IACD,GAAG,EAAE;QACH,GAAG,WAAU;QACb,GAAG,GAAG;KACP;IACD,UAAU,EAAE;QACV,GAAG,kBAAiB;QACpB,GAAG,UAAU;KACd;IACD,WAAW,EAAE;QACX,GAAG,WAAW;QACd,IAAI,EAAE;YACJ,GAAG,WAAW,CAAC,IAAI;YACnB,OAAO,EAAE;gBACP,GAAG,mBAAkB,EAAE,IAAI,EAAE,OAAO;gBACpC,GAAG,WAAW,EAAE,IAAI,EAAE,OAAO;aAC9B;YACD,OAAO,EAAE;gBACP,GAAG,mBAAkB,EAAE,IAAI,EAAE,OAAO;gBACpC,GAAG,WAAW,EAAE,IAAI,EAAE,OAAO;aAC9B;SACF;KACF;IACD,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,KAAK;IACL,GAAG,YAAY;CAChB,CAAC,CAAC;AAvCU,QAAA,OAAO,WAuCjB","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/src/index.ts"],"sourcesContent":["import type { ApiOptions } from '@polkadot/api/types';\nimport type { RegistryTypes } from '@polkadot/types/types';\n\nimport { lookupTypes as rootnetLookupTypes, rpc as rootnetRpc, types as rootnetTypes, typesAlias as rootnetTypesAlias, typesBundle as rootnetTypesBundle } from '@therootnetwork/types';\n\n// import { runtime as rootnetRuntime } from './runtime';\n\nexport const defaultOptions: ApiOptions = {\n  types: rootnetTypes,\n  rpc: rootnetRpc\n};\n\nexport const options = ({ rpc = {},\n  runtime = {},\n  signedExtensions,\n  types = {},\n  typesAlias = {},\n  typesBundle = {},\n  ...otherOptions }: ApiOptions = {}): ApiOptions => ({\n  types: {\n    ...rootnetTypes,\n    ...(rootnetLookupTypes as unknown as RegistryTypes), // TODO: RegistryTypes's own issue?\n    ...types\n  },\n  rpc: {\n    ...rootnetRpc,\n    ...rpc\n  },\n  typesAlias: {\n    ...rootnetTypesAlias,\n    ...typesAlias\n  },\n  typesBundle: {\n    ...typesBundle,\n    spec: {\n      ...typesBundle.spec,\n      rootnet: {\n        ...rootnetTypesBundle?.spec?.rootnet,\n        ...typesBundle?.spec?.rootnet\n      },\n      porcini: {\n        ...rootnetTypesBundle?.spec?.porcini,\n        ...typesBundle?.spec?.porcini\n      },\n    }\n  },\n  // runtime: {\n  //   ...rootnetRuntime,\n  //   ...runtime\n  // },\n  ...otherOptions\n});\n"],"version":3}