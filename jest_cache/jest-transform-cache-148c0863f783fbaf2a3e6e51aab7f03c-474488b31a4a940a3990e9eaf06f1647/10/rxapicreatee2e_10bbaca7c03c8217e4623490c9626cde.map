{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rxapi.create.e2e.ts","mappings":";AAAA,wDAAwD;AACxD,KAAK;AACL,qEAAqE;AACrE,sEAAsE;AACtE,6CAA6C;AAC7C,KAAK;AACL,oDAAoD;AACpD,KAAK;AACL,yEAAyE;AACzE,uEAAuE;AACvE,8EAA8E;AAC9E,yEAAyE;AACzE,oCAAoC;AACpC,EAAE;AACF,yCAAyC;AACzC,sDAAsD;AACtD,qCAAqC;AACrC,2CAA2C;AAC3C,EAAE;AACF,wCAAwC;AACxC,8DAA8D;AAC9D,EAAE;AACF,6BAA6B;AAC7B,cAAc;AACd,QAAQ;AACR,EAAE;AACF,gFAAgF;AAChF,uCAAuC;AACvC,2CAA2C;AAC3C,EAAE;AACF,uDAAuD;AACvD,oCAAoC;AACpC,gBAAgB;AAChB,UAAU;AACV,QAAQ;AACR,EAAE;AACF,4EAA4E;AAC5E,sEAAsE;AACtE,iEAAiE;AACjE,4EAA4E;AAC5E,4DAA4D;AAC5D,8BAA8B;AAC9B,cAAc;AACd,QAAQ;AACR,EAAE;AACF,8EAA8E;AAC9E,sEAAsE;AACtE,gGAAgG;AAChG,4EAA4E;AAC5E,4DAA4D;AAC5D,8BAA8B;AAC9B,cAAc;AACd,QAAQ;AACR,EAAE;AACF,gGAAgG;AAChG,iBAAiB;AACjB,eAAe;AACf,0EAA0E;AAC1E,yEAAyE;AACzE,4EAA4E;AAC5E,sCAAsC;AACtC,6CAA6C;AAC7C,UAAU;AACV,mEAAmE;AACnE,sCAAsC;AACtC,oCAAoC;AACpC,SAAS;AACT,cAAc;AACd,QAAQ;AACR,EAAE;AACF,8EAA8E;AAC9E,gIAAgI;AAChI,0CAA0C;AAC1C,uDAAuD;AACvD,oCAAoC;AACpC,gBAAgB;AAChB,UAAU;AACV,QAAQ;AACR,EAAE;AACF,4EAA4E;AAC5E,uCAAuC;AACvC,2CAA2C;AAC3C,uDAAuD;AACvD,oCAAoC;AACpC,gBAAgB;AAChB,UAAU;AACV,QAAQ;AACR,EAAE;AACF,iEAAiE;AACjE,gFAAgF;AAChF,mFAAmF;AACnF,QAAQ;AACR,EAAE;AACF,+FAA+F;AAC/F,gEAAgE;AAChE,wFAAwF;AACxF,QAAQ;AACR,MAAM","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/rxapi.create.e2e.ts"],"sourcesContent":["// // Copyright 2019-2020 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n//\n// import {ApiRx} from '../../src/ApiRx';\n// import initApiRx from '../../../../jest/initApiRx';\n// import {Api} from \"@cennznet/api\";\n// import config from '../../../../config';\n//\n// describe('e2e rx api create', () => {\n//   const incorrectEndPoint = 'wss://rimu.centrality.cloud/';\n//\n//   afterAll(async done => {\n//     done();\n//   });\n//\n//   it('Should create an Api instance with the timeout option', async done => {\n//     const apiRx = await initApiRx();\n//     const api = await apiRx.toPromise();\n//\n//     api.rpc.chain.getBlockHash().subscribe(hash => {\n//       expect(hash).toBeDefined();\n//       done();\n//     });\n//   });\n//\n//   it ('Should create rx api instance with slim metadata', async done => {\n//     const provider = config.wsProvider[`${process.env.TEST_TYPE}`];\n//     const api = await Api.create({provider, fullMeta: false});\n//     const stakingAssetId = await api.query.genericAsset.stakingAssetId();\n//     expect(stakingAssetId.toNumber()).toBeGreaterThan(0);\n//     await api.disconnect();\n//     done();\n//   });\n//\n//   it ('Should create rx api instance with custom metadata', async done => {\n//     const provider = config.wsProvider[`${process.env.TEST_TYPE}`];\n//     const api = await Api.create({provider, modules:['TransactionPayment', 'GenericAsset']});\n//     const stakingAssetId = await api.query.genericAsset.stakingAssetId();\n//     expect(stakingAssetId.toNumber()).toBeGreaterThan(0);\n//     await api.disconnect();\n//     done();\n//   });\n//\n//   it('Should connect to all available networks on cennznet via network name', async done => {\n//     let apiRx;\n//     let api;\n//     const networkNames = ['azalea', 'nikau', 'rata', 'local'] as const;\n//     const connectionPromises = networkNames.map(async networkName => {\n//       apiRx = await ApiRx.create({network: networkName, timeout: 10000});\n//       api = await apiRx.toPromise()\n//       return api.rpc.chain.getBlockHash();\n//     });\n//     const networkHashes = await Promise.all(connectionPromises);\n//     networkHashes.forEach(hash => {\n//       expect(hash).toBeDefined();\n//     })\n//     done();\n//   });\n//\n//   it('Should connect to use network name and not provider', async done => {\n//     const apiRx = await ApiRx.create({ network: 'local', provider: 'wss://should/not/use/this/provider.io', timeout: 10000});\n//     const api = await apiRx.toPromise()\n//     api.rpc.chain.getBlockHash().subscribe(hash => {\n//       expect(hash).toBeDefined();\n//       done();\n//     });\n//   });\n//\n//   it('Should create Api without timeout if timeout is 0', async done => {\n//     const apiRx = await initApiRx();\n//     const api = await apiRx.toPromise();\n//     api.rpc.chain.getBlockHash().subscribe(hash => {\n//       expect(hash).toBeDefined();\n//       done();\n//     });\n//   });\n//\n//   it('Should get error if the connection fails', async () => {\n//     const incorrectApiRx = await ApiRx.create({provider: incorrectEndPoint});\n//     await expect(incorrectApiRx.toPromise()).rejects.toThrow(/Connection fail/);\n//   });\n//\n//   it('Should get rejected if it is not resolved in a specific period of time', async () => {\n//     const incorrectApiRx = await ApiRx.create({timeout: -1});\n//     await expect(incorrectApiRx.toPromise()).rejects.toThrow(/Timeout has occurred/);\n//   });\n// });\n"],"version":3}