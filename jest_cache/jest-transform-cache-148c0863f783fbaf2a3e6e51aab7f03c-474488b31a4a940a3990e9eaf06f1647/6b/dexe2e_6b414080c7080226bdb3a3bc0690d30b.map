{"file":"/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/dex.e2e.ts","mappings":"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","names":[],"sources":["/Users/karishma/work/futureverse/trn-rootnet-api/packages/api/test/e2e/dex.e2e.ts"],"sourcesContent":["// // Copyright 2019-2020 Centrality Investments Limited\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n// import { Api } from '@cennznet/api';\n// import {SignerOptions} from \"@polkadot/api/types\";\n// import { Keyring } from '@polkadot/keyring';\n// import {BN} from \"@polkadot/util\";\n// import { cryptoWaitReady } from '@polkadot/util-crypto';\n// import initApiPromise from '../../../../jest/initApiPromise';\n// import {Balance, LiquidityPriceResponse, LiquidityValueResponse} from '@cennznet/types';\n// const CENNZ = '16000';\n// const CENTRAPAY = '16001';\n// const PLUG = '16003';\n//\n\nexport const ALITH_PRIVATE_KEY = \"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133\";\nexport const BOB_PRIVATE_KEY = \"0x79c3b7fc0b7697b9414cb87adcb37317d1cab32818ae18c0e97ad76395d1fdcf\";\nconst TOKEN_ID = 1124;\nexport const GAS_TOKEN_ID = 2;\n\nimport {ApiPromise, Keyring, WsProvider} from \"@polkadot/api\";\nimport {options} from \"@therootnetwork/api\";\nimport {hexToU8a} from \"@polkadot/util\";\n\ndescribe('DEX RPC calls testing', () => {\n  let api;\n  let alith, bob;\n  beforeAll(async () => {\n    const providerUrl = 'ws://127.0.0.1:9944/';\n    const provider = new WsProvider(providerUrl);\n    console.log('providerUrl', providerUrl);\n    api = new ApiPromise(options({ provider }));\n    await api.isReady;\n    const keyring = new Keyring({ type: \"ethereum\" });\n    alith = keyring.addFromSeed(hexToU8a(ALITH_PRIVATE_KEY));\n    bob = keyring.addFromSeed(hexToU8a(BOB_PRIVATE_KEY));\n  });\n\n  afterAll(async () => {\n    api.disconnect();\n  });\n\n  describe('Queries()', () => {\n\n    it(\"Deposit liquidity in CENNZ asset's pool\",  async () => {\n\n      const txs = [\n        api.tx.assetsExt.createAsset(\"test\", \"TEST\", 18, 1, alith.address), // create asset\n        api.tx.assets.mint(TOKEN_ID, alith.address, \"10000000000000000\"),\n        api.tx.dex.addLiquidity(\n            // provide liquidity\n            TOKEN_ID,\n            GAS_TOKEN_ID,\n            \"1000000000000000\",\n            250_000_000,\n            \"10000000000000000\",\n            250_000_000,\n            0,\n        ),\n      ];\n\n      await new Promise<void>((resolve, reject) => {\n        api.tx.utility\n            .batch(txs)\n            .signAndSend(alith, ({ events, status }) => {\n              if (status.isInBlock) {\n                console.log(`setup block hash: ${status.asInBlock}`);\n                if (status.isFinalized) {\n                  for (const {event} of events) {\n                    if (event.method === 'AddLiquidity') {\n                      resolve();\n                    }\n                  }\n                }\n              }\n            })\n            .catch((err) => reject(err));\n      });\n\n      console.log(\"done setting up dex liquidity.\");\n          });\n\n    it(\"getAmountsOut rpc works [library]\", async () => {\n      const result = await (api.rpc as any).dex.getAmountsOut(100, [GAS_TOKEN_ID, TOKEN_ID]);\n      expect(result.OK).toEqual([100, 398799840958623]);\n    });\n\n    it(\"quote rpc works [http - axios]\", async () => {\n      const result = await api.rpc.dex.quote(1, 5, 10);\n      expect(result.OK).toEqual(2);\n    });\n\n    // it(\"Get the liquidity value for CENNZ asset in Alice's account\", async done => {\n    //   const liquidityValue: LiquidityValueResponse = await api.rpc.cennzx.liquidityValue(alice.address, CENNZ);\n    //   expect(liquidityValue.liquidity.isZero()).toBe(false);\n    //   expect(liquidityValue.core.isZero()).toBe(false);\n    //   expect(liquidityValue.asset.isZero()).toBe(false);\n    //   done();\n    // });\n    //\n    // describe('Positive flow with liquidity in pool', () => {\n    //   it(\"Calculate the buy price when buying CENTRAPAY for CENNZ\", async done => {\n    //     const amount = 100;\n    //     const poolAssetBalance = await api.derive.cennzx.poolAssetBalance(CENNZ);\n    //     const poolCoreAssetBalance = await api.derive.cennzx.poolCoreAssetBalance(CENNZ);\n    //     console.log('Amount of asset in CENNZ pool:', poolAssetBalance.toString());\n    //     console.log('Amount of core in CENNZ pool:', poolCoreAssetBalance.toString());\n    //     // How much CENTRAPAY will it cost to buy 100 (amount) CENNZ\n    //     const buyPrice = await api.rpc.cennzx.buyPrice(CENTRAPAY, amount, CENNZ);\n    //     console.log('Buy price:', buyPrice.toString());\n    //     expect(buyPrice.price.toNumber()).toBeGreaterThan(0);\n    //     done();\n    //   });\n    //\n    //   it(\"Calculate the sell price when selling CENNZ for CENTRAPAY \", async done => {\n    //     const amount = 1000;\n    //     // when I sell 1000(amount) CENNZ, how much of CENTRAPAY will I get in return\n    //     const sellPrice = await api.rpc.cennzx\n    //       .sellPrice(CENNZ, amount, CENTRAPAY);\n    //     expect(sellPrice.price.toNumber()).toBeGreaterThan(0);\n    //     done();\n    //   });\n    //\n    //   describe('feeExchange derive queries with positive flow', () => {\n    //     it('Query estimated fee in CENTRAPAY(default fee currency)', async done => {\n    //       const assetBalanceBefore = await api.query.genericAsset.freeBalance(CENTRAPAY, alice.address);\n    //       const extrinsic = api.tx.genericAsset\n    //         .transfer(CENNZ, bob.address, 10000);\n    //       const feeFromQuery = await api.derive.fees.estimateFee({extrinsic, userFeeAssetId:CENTRAPAY});\n    //\n    //       await extrinsic.signAndSend(alice,  async ({events, status}) => {\n    //         if (status.isFinalized) {\n    //           events.forEach(({phase, event: {data, method, section}}) => {\n    //             console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n    //           });\n    //           const assetBalanceAfter = await api.query.genericAsset.freeBalance(CENTRAPAY, alice.address);\n    //           expect((assetBalanceBefore as Balance).toBn().sub((assetBalanceAfter as Balance).toBn()).toString()).toEqual(feeFromQuery.toString());\n    //           done();\n    //         }\n    //       });\n    //     });\n    //\n    //     it('Query estimated fee in different currency (CENNZ)', async done => {\n    //       const maxPayment = '50000000000000000';\n    //       const assetId = api.registry.createType('AssetId', CENNZ);\n    //       const feeExchange = api.registry.createType('FeeExchange', {assetId, maxPayment}, 0);\n    //       const transactionPayment = api.registry.createType('ChargeTransactionPayment', {tip: 0, feeExchange});\n    //       const royaltiesSchedule = null;\n    //       const extrinsic = api.tx.nft.createCollection(\n    //         'collectionName',\n    //         royaltiesSchedule\n    //       );\n    //\n    //       const feeFromQuery = await api.derive.fees.estimateFee({extrinsic, userFeeAssetId: CENNZ, maxPayment});\n    //       await extrinsic.signAndSend(alice,  {transactionPayment} as Partial<SignerOptions>, async ({events, status}) => {\n    //         if (status.isFinalized) {\n    //           events.forEach(({phase, event: {data, method, section}}) => {\n    //             if (method === 'AssetBought') {\n    //               const price = data[3];\n    //               console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n    //               expect(feeFromQuery.toString()).toEqual(price.toString());\n    //               done();\n    //             }\n    //           });\n    //         }\n    //       });\n    //     });\n    //   });\n    // });\n    //\n    // describe('Negative flow with no liquidity in pool', () => {\n    //   it(\"Calculate the buy price when buying CENTRAPAY for PLUG\", async done => {\n    //     const amount = 100;\n    //     const poolAssetBalance = await api.derive.cennzx.poolAssetBalance(PLUG);\n    //     const poolCoreAssetBalance = await api.derive.cennzx.poolCoreAssetBalance(PLUG);\n    //     console.log('Amount of asset in PLUG pool:', poolAssetBalance.toString());\n    //     console.log('Amount of core in PLUG pool:', poolCoreAssetBalance.toString());\n    //     // How much CENTRAPAY will it cost to buy 100 (amount) PLUG\n    //     await expect(api.rpc.cennzx.buyPrice(CENTRAPAY, amount, PLUG)).rejects.toThrow(\n    //       '2: Cannot exchange for requested amount.:'\n    //     );\n    //     done();\n    //   });\n    //\n    //   it(\"Calculate the sell price when selling PLUG for CENTRAPAY when no liquidity exist \", async done => {\n    //     const amount = 1000;\n    //     // when I sell 1000(amount) PLUG, how much of CENTRAPAY will I get in return\n    //     await expect(api.rpc.cennzx\n    //       .sellPrice(PLUG, amount, CENTRAPAY)).rejects.toThrow(\n    //       '2: Cannot exchange by requested amount.'\n    //     );\n    //     done();\n    //   });\n    //\n    //   describe('feeExchange derive queries with negative flow', () => {\n    //\n    //     it('Query estimated fee in different currency (PLUG)', async done => {\n    //       const maxPayment = '50000000000000000';\n    //       const extrinsic = api.tx.genericAsset\n    //         .transfer(CENNZ, bob.address, 10000);\n    //       const feeFromQuery = await api.derive.fees.estimateFee({extrinsic, userFeeAssetId:PLUG, maxPayment});\n    //       expect(feeFromQuery).toEqual(new Error('2: Cannot exchange for requested amount.: '));\n    //       done();\n    //     });\n    //   });\n    // });\n\n  });\n});\n"],"version":3}