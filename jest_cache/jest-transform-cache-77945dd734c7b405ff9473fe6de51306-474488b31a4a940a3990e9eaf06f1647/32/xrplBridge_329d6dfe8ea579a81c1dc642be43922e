84037895d8cb873c0fa343f687dfc281
"use strict";

/* istanbul ignore next */
function cov_1kml89v6rq() {
  var path = "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/xrplBridge.js";
  var hash = "728d08a0a822407a3606caad75b9b34d491b1206";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/xrplBridge.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 21,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "728d08a0a822407a3606caad75b9b34d491b1206"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kml89v6rq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kml89v6rq();
cov_1kml89v6rq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1kml89v6rq().s[1]++;
exports.default = {
  rpc: {},
  types: {
    XRPLTxData: {
      _enum: {
        Payment: {
          amount: "Balance",
          destination: "H160"
        },
        CurrencyPayment: {
          amount: "Balance",
          address: "H160",
          currencyId: "H256"
        }
      }
      //eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWttbDg5djZycSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJycGMiLCJ0eXBlcyIsIlhSUExUeERhdGEiLCJfZW51bSIsIlBheW1lbnQiLCJhbW91bnQiLCJkZXN0aW5hdGlvbiIsIkN1cnJlbmN5UGF5bWVudCIsImFkZHJlc3MiLCJjdXJyZW5jeUlkIl0sInNvdXJjZXMiOlsieHJwbEJyaWRnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBycGM6IHt9LFxuICAgIHR5cGVzOiB7XG4gICAgICAgIFhSUExUeERhdGE6IHtcbiAgICAgICAgICAgIF9lbnVtOiB7XG4gICAgICAgICAgICAgICAgUGF5bWVudDoge1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFwiQmFsYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogXCJIMTYwXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBDdXJyZW5jeVBheW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBcIkJhbGFuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJIMTYwXCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5SWQ6IFwiSDI1NlwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB9LFxuICAgIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUM7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtJQUFBQyxTQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtJQUFBQyxDQUFBO0lBQUFDLGVBQUE7SUFBQWYsSUFBQTtFQUFBO0VBQUEsSUFBQWdCLFFBQUEsR0FBQWYsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUFhLFFBQUEsQ0FBQWpCLElBQUEsS0FBQWlCLFFBQUEsQ0FBQWpCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFnQixRQUFBLENBQUFqQixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFhLGNBQUEsR0FBQUQsUUFBQSxDQUFBakIsSUFBQTtFQUFBO0lBZUQ7SUFBQUQsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQW1CLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFuQixjQUFBO0FBQUFBLGNBQUEsR0FBQWMsQ0FBQTtBQWRaTSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFBQztBQUFBdkIsY0FBQSxHQUFBYyxDQUFBO0FBQzlEUSxPQUFPLENBQUNFLE9BQU8sR0FBRztFQUNkQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ1BDLEtBQUssRUFBRTtJQUNIQyxVQUFVLEVBQUU7TUFDUkMsS0FBSyxFQUFFO1FBQ0hDLE9BQU8sRUFBRTtVQUNMQyxNQUFNLEVBQUUsU0FBUztVQUNqQkMsV0FBVyxFQUFFO1FBQ2pCLENBQUM7UUFDREMsZUFBZSxFQUFFO1VBQ2JGLE1BQU0sRUFBRSxTQUFTO1VBQ2pCRyxPQUFPLEVBQUUsTUFBTTtVQUNmQyxVQUFVLEVBQUU7UUFDaEI7TUFDSjtNQUNBO0lBQ0o7RUFDSjtBQUNKLENBQUMifQ==