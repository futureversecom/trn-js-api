3ceeac9bb942a2649b80f23f8b88e8ae
"use strict";

/* istanbul ignore next */
function cov_bvrtkgb8t() {
  var path = "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/nft.js";
  var hash = "51a6b72b878ca0fc58b8cad5c439ef6b68f78639";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/nft.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 37,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "51a6b72b878ca0fc58b8cad5c439ef6b68f78639"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bvrtkgb8t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bvrtkgb8t();
cov_bvrtkgb8t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bvrtkgb8t().s[1]++;
exports.default = {
  rpc: {
    "ownedTokens": {
      "description": "Get all NFTs owned by an account",
      "params": [{
        "name": "collectionId",
        "type": "CollectionUuid"
      }, {
        "name": "who",
        "type": "AccountId"
      }, {
        "name": "cursor",
        "type": "SerialNumber"
      }, {
        "name": "limit",
        "type": "u16"
      }],
      "type": "Json"
    },
    "tokenUri": {
      "description": "Get the URI of a token",
      "params": [{
        "name": "tokenId",
        "type": "TokenId"
      }],
      "type": "Json"
    }
  },
  types: {
    "CollectionUuid": "u32",
    "SerialNumber": "u32",
    "TokenId": "(CollectionUuid, SerialNumber)"
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYnZydGtnYjh0IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInJwYyIsInR5cGVzIl0sInNvdXJjZXMiOlsibmZ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIHJwYzoge1xuICAgICAgICBcIm93bmVkVG9rZW5zXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZXQgYWxsIE5GVHMgb3duZWQgYnkgYW4gYWNjb3VudFwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29sbGVjdGlvbklkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkNvbGxlY3Rpb25VdWlkXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hvXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkFjY291bnRJZFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IFwibmFtZVwiOiBcImN1cnNvclwiLCBcInR5cGVcIjogXCJTZXJpYWxOdW1iZXJcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJuYW1lXCI6IFwibGltaXRcIiwgXCJ0eXBlXCI6IFwidTE2XCIgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkpzb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInRva2VuVXJpXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZXQgdGhlIFVSSSBvZiBhIHRva2VuXCIsXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0b2tlbklkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlRva2VuSWRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJKc29uXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdHlwZXM6IHtcbiAgICAgICAgXCJDb2xsZWN0aW9uVXVpZFwiOiBcInUzMlwiLFxuICAgICAgICBcIlNlcmlhbE51bWJlclwiOiBcInUzMlwiLFxuICAgICAgICBcIlRva2VuSWRcIjogXCIoQ29sbGVjdGlvblV1aWQsIFNlcmlhbE51bWJlcilcIlxuICAgIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDO0FBQUEsU0FBQUEsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7SUFBQUMsU0FBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7SUFBQUMsQ0FBQTtJQUFBQyxlQUFBO0lBQUFmLElBQUE7RUFBQTtFQUFBLElBQUFnQixRQUFBLEdBQUFmLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBYSxRQUFBLENBQUFqQixJQUFBLEtBQUFpQixRQUFBLENBQUFqQixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBZ0IsUUFBQSxDQUFBakIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBYSxjQUFBLEdBQUFELFFBQUEsQ0FBQWpCLElBQUE7RUFBQTtJQWVEO0lBQUFELGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFtQixjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBbkIsYUFBQTtBQUFBQSxhQUFBLEdBQUFjLENBQUE7QUFkWk0sTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQUM7QUFBQXZCLGFBQUEsR0FBQWMsQ0FBQTtBQUM5RFEsT0FBTyxDQUFDRSxPQUFPLEdBQUc7RUFDZEMsR0FBRyxFQUFFO0lBQ0QsYUFBYSxFQUFFO01BQ1gsYUFBYSxFQUFFLGtDQUFrQztNQUNqRCxRQUFRLEVBQUUsQ0FDTjtRQUNJLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLE1BQU0sRUFBRTtNQUNaLENBQUMsRUFDRDtRQUNJLE1BQU0sRUFBRSxLQUFLO1FBQ2IsTUFBTSxFQUFFO01BQ1osQ0FBQyxFQUNEO1FBQUUsTUFBTSxFQUFFLFFBQVE7UUFBRSxNQUFNLEVBQUU7TUFBZSxDQUFDLEVBQzVDO1FBQUUsTUFBTSxFQUFFLE9BQU87UUFBRSxNQUFNLEVBQUU7TUFBTSxDQUFDLENBQ3JDO01BQ0QsTUFBTSxFQUFFO0lBQ1osQ0FBQztJQUNELFVBQVUsRUFBRTtNQUNSLGFBQWEsRUFBRSx3QkFBd0I7TUFDdkMsUUFBUSxFQUFFLENBQ047UUFDSSxNQUFNLEVBQUUsU0FBUztRQUNqQixNQUFNLEVBQUU7TUFDWixDQUFDLENBQ0o7TUFDRCxNQUFNLEVBQUU7SUFDWjtFQUNKLENBQUM7RUFDREMsS0FBSyxFQUFFO0lBQ0gsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixjQUFjLEVBQUUsS0FBSztJQUNyQixTQUFTLEVBQUU7RUFDZjtBQUNKLENBQUMifQ==