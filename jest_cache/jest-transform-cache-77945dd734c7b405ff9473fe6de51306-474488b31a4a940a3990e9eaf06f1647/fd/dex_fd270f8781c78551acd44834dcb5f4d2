58dfd7ba2b3fab9608a273bc2293bdab
"use strict";

/* istanbul ignore next */
function cov_1w4uy485cl() {
  var path = "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/dex.js";
  var hash = "4c8875b05f3fd9a8d084f42ba45be58924b36a85";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/dex.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 95,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4c8875b05f3fd9a8d084f42ba45be58924b36a85"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w4uy485cl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w4uy485cl();
cov_1w4uy485cl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1w4uy485cl().s[1]++;
exports.default = {
  rpc: {
    "quote": {
      "description": "Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset",
      "params": [{
        "name": "amountA",
        "type": "u128"
      }, {
        "name": "reserveA",
        "type": "u128"
      }, {
        "name": "reserveB",
        "type": "u128"
      }],
      "type": "Json"
    },
    "getAmountsOut": {
      "description": "Given an array of AssetIds, return amounts out for an amount in",
      "params": [{
        "name": "amountIn",
        "type": "Balance"
      }, {
        "name": "path",
        "type": "Vec<AssetId>"
      }],
      "type": "Json"
    },
    "getAmountsIn": {
      "description": "Given an array of AssetIds, return amounts in for an amount out",
      "params": [{
        "name": "amountOut",
        "type": "Balance"
      }, {
        "name": "path",
        "type": "Vec<AssetId>"
      }],
      "type": "Json"
    },
    "getLPTokenID": {
      "description": "Given two AssetIds, return liquidity token created for the pair",
      "params": [{
        "name": "assetA",
        "type": "AssetId"
      }, {
        "name": "assetB",
        "type": "AssetId"
      }],
      "type": "Json"
    },
    "getLiquidity": {
      "description": "Given two AssetIds, return liquidity",
      "params": [{
        "name": "assetA",
        "type": "AssetId"
      }, {
        "name": "assetB",
        "type": "AssetId"
      }],
      "type": "Json"
    },
    "getTradingPairStatus": {
      "description": "Given two AssetIds, return whether trading pair is enabled or disabled",
      "params": [{
        "name": "assetA",
        "type": "AssetId"
      }, {
        "name": "assetB",
        "type": "AssetId"
      }],
      "type": "hex"
    }
  },
  types: {}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXc0dXk0ODVjbCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJycGMiLCJ0eXBlcyJdLCJzb3VyY2VzIjpbImRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBycGM6IHtcbiAgICAgICAgXCJxdW90ZVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2l2ZW4gc29tZSBhbW91bnQgb2YgYW4gYXNzZXQgYW5kIHBhaXIgcmVzZXJ2ZXMsIHJldHVybnMgYW4gZXF1aXZhbGVudCBhbW91bnQgb2YgdGhlIG90aGVyIGFzc2V0XCIsXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhbW91bnRBXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInUxMjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJyZXNlcnZlQVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1MTI4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVzZXJ2ZUJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidTEyOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkpzb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImdldEFtb3VudHNPdXRcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdpdmVuIGFuIGFycmF5IG9mIEFzc2V0SWRzLCByZXR1cm4gYW1vdW50cyBvdXQgZm9yIGFuIGFtb3VudCBpblwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYW1vdW50SW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQmFsYW5jZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVmVjPEFzc2V0SWQ+XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiSnNvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0QW1vdW50c0luXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHaXZlbiBhbiBhcnJheSBvZiBBc3NldElkcywgcmV0dXJuIGFtb3VudHMgaW4gZm9yIGFuIGFtb3VudCBvdXRcIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFtb3VudE91dFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJCYWxhbmNlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJWZWM8QXNzZXRJZD5cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJKc29uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRMUFRva2VuSURcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdpdmVuIHR3byBBc3NldElkcywgcmV0dXJuIGxpcXVpZGl0eSB0b2tlbiBjcmVhdGVkIGZvciB0aGUgcGFpclwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXNzZXRBXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkFzc2V0SWRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhc3NldEJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQXNzZXRJZFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkpzb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImdldExpcXVpZGl0eVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2l2ZW4gdHdvIEFzc2V0SWRzLCByZXR1cm4gbGlxdWlkaXR5XCIsXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhc3NldEFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQXNzZXRJZFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFzc2V0QlwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJBc3NldElkXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiSnNvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0VHJhZGluZ1BhaXJTdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdpdmVuIHR3byBBc3NldElkcywgcmV0dXJuIHdoZXRoZXIgdHJhZGluZyBwYWlyIGlzIGVuYWJsZWQgb3IgZGlzYWJsZWRcIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFzc2V0QVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJBc3NldElkXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXNzZXRCXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkFzc2V0SWRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJoZXhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB0eXBlczoge31cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUM7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFB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