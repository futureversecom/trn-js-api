85d978edf109ff78748f0d83a80dcfc6
"use strict";

/* istanbul ignore next */
function cov_1go962g87() {
  var path = "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/spec/rootnet.js";
  var hash = "7b2dacc7fae4fdc33dcd169db0ccb029a173dc68";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/karishma/work/futureverse/trn-rootnet-api/packages/type-definitions/build/spec/rootnet.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 70,
          column: 1
        }
      },
      "2": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 28
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7b2dacc7fae4fdc33dcd169db0ccb029a173dc68"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1go962g87 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1go962g87();
cov_1go962g87().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const versioned =
/* istanbul ignore next */
(cov_1go962g87().s[1]++, [{
  "minmax": [0, null],
  "types": {
    "AccountId": "EthereumAccountId",
    "AccountId20": "EthereumAccountId",
    "AccountId32": "EthereumAccountId",
    "Address": "AccountId",
    "LookupSource": "AccountId",
    "Lookup0": "AccountId",
    "AssetId": "u32",
    "Balance": "u128",
    "EventProofId": "u64",
    "ValidatorSetId": "u64",
    "EthereumSignature": {
      "r": "H256",
      "s": "H256",
      "v": "U8"
    },
    "ExtrinsicSignature": "EthereumSignature",
    "EthyId": "[u8; 32]",
    "EthWalletCall": {
      "nonce": "u32"
    },
    "XRPLTxData": {
      "_enum": {
        Payment: {
          amount: "Balance",
          destination: "H160"
        },
        CurrencyPayment: {
          "amount": "Balance",
          "address": "H160",
          "currencyId": "H256"
        }
      }
    },
    "EthEventProofResponse": {
      "event_id": "EventProofId",
      "signatures": "Vec<Bytes>",
      "validators": "Vec<AccountId20>",
      "validator_set_id": "ValidatorSetId",
      "block": "H256",
      "tag": "Option<Bytes>"
    },
    "XrplEventProofResponse": {
      "event_id": "EventProofId",
      "signatures": "Vec<Bytes>",
      "validators": "Vec<Bytes>",
      "validator_set_id": "ValidatorSetId",
      "block": "H256",
      "tag": "Option<Bytes>"
    },
    "VersionedEventProof": {
      "_enum": {
        "sentinel": null,
        "EventProof": "EventProof"
      }
    },
    "CollectionUuid": "u32",
    "SerialNumber": "u32",
    "TokenId": "(CollectionUuid, SerialNumber)"
  }
}]);
/* istanbul ignore next */
cov_1go962g87().s[2]++;
exports.default = versioned;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWdvOTYyZzg3IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmVyc2lvbmVkIiwiUGF5bWVudCIsImFtb3VudCIsImRlc3RpbmF0aW9uIiwiQ3VycmVuY3lQYXltZW50IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbInJvb3RuZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2ZXJzaW9uZWQgPSBbXG4gICAge1xuICAgICAgICBcIm1pbm1heFwiOiBbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICBdLFxuICAgICAgICBcInR5cGVzXCI6IHtcbiAgICAgICAgICAgIFwiQWNjb3VudElkXCI6IFwiRXRoZXJldW1BY2NvdW50SWRcIixcbiAgICAgICAgICAgIFwiQWNjb3VudElkMjBcIjogXCJFdGhlcmV1bUFjY291bnRJZFwiLFxuICAgICAgICAgICAgXCJBY2NvdW50SWQzMlwiOiBcIkV0aGVyZXVtQWNjb3VudElkXCIsXG4gICAgICAgICAgICBcIkFkZHJlc3NcIjogXCJBY2NvdW50SWRcIixcbiAgICAgICAgICAgIFwiTG9va3VwU291cmNlXCI6IFwiQWNjb3VudElkXCIsXG4gICAgICAgICAgICBcIkxvb2t1cDBcIjogXCJBY2NvdW50SWRcIixcbiAgICAgICAgICAgIFwiQXNzZXRJZFwiOiBcInUzMlwiLFxuICAgICAgICAgICAgXCJCYWxhbmNlXCI6IFwidTEyOFwiLFxuICAgICAgICAgICAgXCJFdmVudFByb29mSWRcIjogXCJ1NjRcIixcbiAgICAgICAgICAgIFwiVmFsaWRhdG9yU2V0SWRcIjogXCJ1NjRcIixcbiAgICAgICAgICAgIFwiRXRoZXJldW1TaWduYXR1cmVcIjoge1xuICAgICAgICAgICAgICAgIFwiclwiOiBcIkgyNTZcIixcbiAgICAgICAgICAgICAgICBcInNcIjogXCJIMjU2XCIsXG4gICAgICAgICAgICAgICAgXCJ2XCI6IFwiVThcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiRXh0cmluc2ljU2lnbmF0dXJlXCI6IFwiRXRoZXJldW1TaWduYXR1cmVcIixcbiAgICAgICAgICAgIFwiRXRoeUlkXCI6IFwiW3U4OyAzMl1cIixcbiAgICAgICAgICAgIFwiRXRoV2FsbGV0Q2FsbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJub25jZVwiOiBcInUzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJYUlBMVHhEYXRhXCI6IHtcbiAgICAgICAgICAgICAgICBcIl9lbnVtXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgUGF5bWVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBcIkJhbGFuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBcIkgxNjBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBDdXJyZW5jeVBheW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYW1vdW50XCI6IFwiQmFsYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRyZXNzXCI6IFwiSDE2MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW5jeUlkXCI6IFwiSDI1NlwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJFdGhFdmVudFByb29mUmVzcG9uc2VcIjoge1xuICAgICAgICAgICAgICAgIFwiZXZlbnRfaWRcIjogXCJFdmVudFByb29mSWRcIixcbiAgICAgICAgICAgICAgICBcInNpZ25hdHVyZXNcIjogXCJWZWM8Qnl0ZXM+XCIsXG4gICAgICAgICAgICAgICAgXCJ2YWxpZGF0b3JzXCI6IFwiVmVjPEFjY291bnRJZDIwPlwiLFxuICAgICAgICAgICAgICAgIFwidmFsaWRhdG9yX3NldF9pZFwiOiBcIlZhbGlkYXRvclNldElkXCIsXG4gICAgICAgICAgICAgICAgXCJibG9ja1wiOiBcIkgyNTZcIixcbiAgICAgICAgICAgICAgICBcInRhZ1wiOiBcIk9wdGlvbjxCeXRlcz5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiWHJwbEV2ZW50UHJvb2ZSZXNwb25zZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJldmVudF9pZFwiOiBcIkV2ZW50UHJvb2ZJZFwiLFxuICAgICAgICAgICAgICAgIFwic2lnbmF0dXJlc1wiOiBcIlZlYzxCeXRlcz5cIixcbiAgICAgICAgICAgICAgICBcInZhbGlkYXRvcnNcIjogXCJWZWM8Qnl0ZXM+XCIsXG4gICAgICAgICAgICAgICAgXCJ2YWxpZGF0b3Jfc2V0X2lkXCI6IFwiVmFsaWRhdG9yU2V0SWRcIixcbiAgICAgICAgICAgICAgICBcImJsb2NrXCI6IFwiSDI1NlwiLFxuICAgICAgICAgICAgICAgIFwidGFnXCI6IFwiT3B0aW9uPEJ5dGVzPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJWZXJzaW9uZWRFdmVudFByb29mXCI6IHtcbiAgICAgICAgICAgICAgICBcIl9lbnVtXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJzZW50aW5lbFwiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcIkV2ZW50UHJvb2ZcIjogXCJFdmVudFByb29mXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJDb2xsZWN0aW9uVXVpZFwiOiBcInUzMlwiLFxuICAgICAgICAgICAgXCJTZXJpYWxOdW1iZXJcIjogXCJ1MzJcIixcbiAgICAgICAgICAgIFwiVG9rZW5JZFwiOiBcIihDb2xsZWN0aW9uVXVpZCwgU2VyaWFsTnVtYmVyKVwiXG4gICAgICAgIH1cbiAgICB9XG5dO1xuZXhwb3J0cy5kZWZhdWx0ID0gdmVyc2lvbmVkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDO0FBQUEsU0FBQUEsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtJQUFBQyxTQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO0lBQUFDLENBQUE7SUFBQUMsZUFBQTtJQUFBZixJQUFBO0VBQUE7RUFBQSxJQUFBZ0IsUUFBQSxHQUFBZixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWEsUUFBQSxDQUFBakIsSUFBQSxLQUFBaUIsUUFBQSxDQUFBakIsSUFBQSxFQUFBQyxJQUFBLEtBQUFBLElBQUE7SUFBQWdCLFFBQUEsQ0FBQWpCLElBQUEsSUFBQUssWUFBQTtFQUFBO0VBQUEsSUFBQWEsY0FBQSxHQUFBRCxRQUFBLENBQUFqQixJQUFBO0VBQUE7SUFlRDtJQUFBRCxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBbUIsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQW5CLGFBQUE7QUFBQUEsYUFBQSxHQUFBYyxDQUFBO0FBZFpNLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RCxNQUFNQyxTQUFTO0FBQUE7QUFBQSxDQUFBeEIsYUFBQSxHQUFBYyxDQUFBLE9BQUcsQ0FDZDtFQUNJLFFBQVEsRUFBRSxDQUNOLENBQUMsRUFDRCxJQUFJLENBQ1A7RUFDRCxPQUFPLEVBQUU7SUFDTCxXQUFXLEVBQUUsbUJBQW1CO0lBQ2hDLGFBQWEsRUFBRSxtQkFBbUI7SUFDbEMsYUFBYSxFQUFFLG1CQUFtQjtJQUNsQyxTQUFTLEVBQUUsV0FBVztJQUN0QixjQUFjLEVBQUUsV0FBVztJQUMzQixTQUFTLEVBQUUsV0FBVztJQUN0QixTQUFTLEVBQUUsS0FBSztJQUNoQixTQUFTLEVBQUUsTUFBTTtJQUNqQixjQUFjLEVBQUUsS0FBSztJQUNyQixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLG1CQUFtQixFQUFFO01BQ2pCLEdBQUcsRUFBRSxNQUFNO01BQ1gsR0FBRyxFQUFFLE1BQU07TUFDWCxHQUFHLEVBQUU7SUFDVCxDQUFDO0lBQ0Qsb0JBQW9CLEVBQUUsbUJBQW1CO0lBQ3pDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLGVBQWUsRUFBRTtNQUNiLE9BQU8sRUFBRTtJQUNiLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDVixPQUFPLEVBQUU7UUFDTFcsT0FBTyxFQUFFO1VBQ0xDLE1BQU0sRUFBRSxTQUFTO1VBQ2pCQyxXQUFXLEVBQUU7UUFDakIsQ0FBQztRQUNEQyxlQUFlLEVBQUU7VUFDYixRQUFRLEVBQUUsU0FBUztVQUNuQixTQUFTLEVBQUUsTUFBTTtVQUNqQixZQUFZLEVBQUU7UUFDbEI7TUFDSjtJQUNKLENBQUM7SUFDRCx1QkFBdUIsRUFBRTtNQUNyQixVQUFVLEVBQUUsY0FBYztNQUMxQixZQUFZLEVBQUUsWUFBWTtNQUMxQixZQUFZLEVBQUUsa0JBQWtCO01BQ2hDLGtCQUFrQixFQUFFLGdCQUFnQjtNQUNwQyxPQUFPLEVBQUUsTUFBTTtNQUNmLEtBQUssRUFBRTtJQUNYLENBQUM7SUFDRCx3QkFBd0IsRUFBRTtNQUN0QixVQUFVLEVBQUUsY0FBYztNQUMxQixZQUFZLEVBQUUsWUFBWTtNQUMxQixZQUFZLEVBQUUsWUFBWTtNQUMxQixrQkFBa0IsRUFBRSxnQkFBZ0I7TUFDcEMsT0FBTyxFQUFFLE1BQU07TUFDZixLQUFLLEVBQUU7SUFDWCxDQUFDO0lBQ0QscUJBQXFCLEVBQUU7TUFDbkIsT0FBTyxFQUFFO1FBQ0wsVUFBVSxFQUFFLElBQUk7UUFDaEIsWUFBWSxFQUFFO01BQ2xCO0lBQ0osQ0FBQztJQUNELGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsY0FBYyxFQUFFLEtBQUs7SUFDckIsU0FBUyxFQUFFO0VBQ2Y7QUFDSixDQUFDLENBQ0o7QUFBQztBQUFBNUIsYUFBQSxHQUFBYyxDQUFBO0FBQ0ZRLE9BQU8sQ0FBQ08sT0FBTyxHQUFHTCxTQUFTIn0=