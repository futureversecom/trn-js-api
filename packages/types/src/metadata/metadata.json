{
  "magicNumber": "1,635,018,093",
  "metadata": {
    "V14": {
      "lookup": {
        "types": [
          {
            "id": "0",
            "type": {
              "path": [
                "seed_primitives",
                "signature",
                "AccountId20"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "1",
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "1",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "20",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "2",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": "3",
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": "4"
                },
                {
                  "name": "AccountData",
                  "type": "5"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": "4",
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": "4",
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": "4",
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": "4",
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": "5",
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "4",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": "5",
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "misc_frozen",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee_frozen",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "6",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": "7",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "8"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": "8",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": "8",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": "8",
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "8",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": "9",
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "10",
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "10",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "32",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "11",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "12",
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": "13",
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "13",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "14"
                }
              },
              "docs": []
            }
          },
          {
            "id": "14",
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": "15",
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": "15",
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": "15",
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": "8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "15",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "4",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "16",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "17"
                }
              },
              "docs": []
            }
          },
          {
            "id": "17",
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": "18"
                },
                {
                  "name": "T",
                  "type": "9"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": "128",
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": "18",
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": "109",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "18",
            "type": {
              "path": [
                "seed_runtime",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": "19",
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": "28",
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": "34",
                          "typeName": "pallet_utility::Event",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": "35",
                          "typeName": "pallet_recovery::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "33",
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": "36",
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": "38",
                          "typeName": "pallet_assets::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "AssetsExt",
                      "fields": [
                        {
                          "name": null,
                          "type": "40",
                          "typeName": "pallet_assets_ext::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": "44",
                          "typeName": "pallet_staking::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "Offences",
                      "fields": [
                        {
                          "name": null,
                          "type": "48",
                          "typeName": "pallet_offences::Event",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": "50",
                          "typeName": "pallet_session::Event",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": "51",
                          "typeName": "pallet_grandpa::Event",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": []
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": "56",
                          "typeName": "pallet_im_online::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": "65",
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": "67",
                          "typeName": "pallet_transaction_payment::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": []
                    },
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": "68",
                          "typeName": "pallet_dex::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": []
                    },
                    {
                      "name": "Nft",
                      "fields": [
                        {
                          "name": null,
                          "type": "71",
                          "typeName": "pallet_nft::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": []
                    },
                    {
                      "name": "XRPLBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": "85",
                          "typeName": "pallet_xrpl_bridge::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": []
                    },
                    {
                      "name": "Echo",
                      "fields": [
                        {
                          "name": null,
                          "type": "89",
                          "typeName": "pallet_echo::Event",
                          "docs": []
                        }
                      ],
                      "index": "21",
                      "docs": []
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": "90",
                          "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "22",
                      "docs": []
                    },
                    {
                      "name": "VoterList",
                      "fields": [
                        {
                          "name": null,
                          "type": "93",
                          "typeName": "pallet_bags_list::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "23",
                      "docs": []
                    },
                    {
                      "name": "EthBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": "94",
                          "typeName": "pallet_ethy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "25",
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": "99",
                          "typeName": "pallet_ethereum::Event",
                          "docs": []
                        }
                      ],
                      "index": "26",
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": "107",
                          "typeName": "pallet_evm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "27",
                      "docs": []
                    },
                    {
                      "name": "EVMChainId",
                      "fields": [
                        {
                          "name": null,
                          "type": "110",
                          "typeName": "pallet_evm_chain_id::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "41",
                      "docs": []
                    },
                    {
                      "name": "Erc20Peg",
                      "fields": [
                        {
                          "name": null,
                          "type": "111",
                          "typeName": "pallet_erc20_peg::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "29",
                      "docs": []
                    },
                    {
                      "name": "NftPeg",
                      "fields": [
                        {
                          "name": null,
                          "type": "112",
                          "typeName": "pallet_nft_peg::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "30",
                      "docs": []
                    },
                    {
                      "name": "FeeProxy",
                      "fields": [
                        {
                          "name": null,
                          "type": "118",
                          "typeName": "pallet_fee_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "31",
                      "docs": []
                    },
                    {
                      "name": "FeeControl",
                      "fields": [
                        {
                          "name": null,
                          "type": "119",
                          "typeName": "pallet_fee_control::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "40",
                      "docs": []
                    },
                    {
                      "name": "Xls20",
                      "fields": [
                        {
                          "name": null,
                          "type": "120",
                          "typeName": "pallet_xls20::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "42",
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": "124",
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "32",
                      "docs": []
                    },
                    {
                      "name": "Futurepass",
                      "fields": [
                        {
                          "name": null,
                          "type": "127",
                          "typeName": "pallet_futurepass::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "34",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "19",
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": "20",
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": "23",
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": "20",
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": "9",
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": "20",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": "21",
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": "22",
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "21",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "22",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "23",
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": "24",
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": "25",
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": "26",
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": "27",
                          "typeName": "TransactionalError",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "24",
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": "2",
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": "15",
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "25",
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "26",
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "27",
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "NoLayer",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "28",
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": "29",
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": "30",
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": "29",
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": "30",
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": "33",
                          "typeName": "LookupError",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": "29",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "30",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "11"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "11",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "31",
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "32"
                },
                {
                  "name": "E",
                  "type": "23"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": "32",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": "23",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "32",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": []
              },
              "docs": []
            }
          },
          {
            "id": "33",
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "BadFormat",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "34",
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": "23",
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": "23",
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "35",
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A recovery process has been set up for an account."
                      ]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "A recovery process has been initiated for lost account by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A recovery process for lost account by rescuer account has been vouched for by sender."
                      ]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A recovery process for lost account by rescuer account has been closed."
                      ]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Lost account has been successfully recovered by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "A recovery process has been removed for an account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": "36",
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": "37",
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "37",
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "38",
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": "2",
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "39",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": "40",
            "type": {
              "path": [
                "pallet_assets_ext",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PlaceHold",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "pallet_id",
                          "type": "41",
                          "typeName": "PalletIdValue",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Some assets have been placed on hold by a pallet"
                      ]
                    },
                    {
                      "name": "ReleaseHold",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "pallet_id",
                          "type": "41",
                          "typeName": "PalletIdValue",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Some held assets have been released by a pallet"
                      ]
                    },
                    {
                      "name": "SpendHold",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "spends",
                          "type": "42",
                          "typeName": "Vec<(T::AccountId, Balance)>",
                          "docs": []
                        },
                        {
                          "name": "pallet_id",
                          "type": "41",
                          "typeName": "PalletIdValue",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Some held assets were spend by a pallet"
                      ]
                    },
                    {
                      "name": "SplitTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "transfers",
                          "type": "42",
                          "typeName": "Vec<(T::AccountId, Balance)>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Multi-part transfer of assets from who"
                      ]
                    },
                    {
                      "name": "CreateAsset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "initial_balance",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "New asset has been created"
                      ]
                    },
                    {
                      "name": "InternalWithdraw",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Assets were withdrawn from this account by the system e.g. paying tx fees"
                      ]
                    },
                    {
                      "name": "InternalDeposit",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Assets were deposited into this account by the system e.g. refunding gas"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "41",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "8",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "42",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "43"
                }
              },
              "docs": []
            }
          },
          {
            "id": "43",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "44",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "EraPaid",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "EraIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "The era payout has been set; the first balance is the validator-payout; the second is",
                        "the remainder from the maximum amount of reward.",
                        "\\[era_index, validator_payout, remainder\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "The nominator has been rewarded by this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "One validator (and its nominators) has been slashed by the given amount.",
                        "\\[validator, amount\\]"
                      ]
                    },
                    {
                      "name": "OldSlashingReportDiscarded",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "An old slashing report from a prior era was discarded because it could",
                        "not be processed. \\[session_index\\]"
                      ]
                    },
                    {
                      "name": "StakersElected",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "A new set of stakers was elected."
                      ]
                    },
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "An account has bonded this amount. \\[stash, amount\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "Unbonded",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "An account has unbonded this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                        "from the unlocking queue. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Kicked",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "A nominator has been kicked from a validator. \\[nominator, stash\\]"
                      ]
                    },
                    {
                      "name": "StakingElectionFailed",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "The election failed. No new era is planned."
                      ]
                    },
                    {
                      "name": "Chilled",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "An account has stopped participating as either a validator or nominator.",
                        "\\[stash\\]"
                      ]
                    },
                    {
                      "name": "PayoutStarted",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "EraIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
                      ]
                    },
                    {
                      "name": "ValidatorPrefsSet",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "45",
                          "typeName": "ValidatorPrefs",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "A validator has set their preferences."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "45",
            "type": {
              "path": [
                "pallet_staking",
                "ValidatorPrefs"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "commission",
                      "type": "46",
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "blocked",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "46",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "47"
                }
              },
              "docs": []
            }
          },
          {
            "id": "47",
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "48",
            "type": {
              "path": [
                "pallet_offences",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "name": "kind",
                          "type": "49",
                          "typeName": "Kind",
                          "docs": []
                        },
                        {
                          "name": "timeslot",
                          "type": "11",
                          "typeName": "OpaqueTimeSlot",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": "49",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "16",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "50",
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": "4",
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "51",
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": "52",
                          "typeName": "AuthorityList",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "52",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "53"
                }
              },
              "docs": []
            }
          },
          {
            "id": "53",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "54",
                  "8"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "54",
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "55",
                      "typeName": "ed25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "55",
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "10",
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "56",
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "HeartbeatReceived",
                      "fields": [
                        {
                          "name": "authority_id",
                          "type": "57",
                          "typeName": "T::AuthorityId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A new heartbeat was received from `AuthorityId`."
                      ]
                    },
                    {
                      "name": "AllGood",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "At the end of the session, no offence was committed."
                      ]
                    },
                    {
                      "name": "SomeOffline",
                      "fields": [
                        {
                          "name": "offline",
                          "type": "59",
                          "typeName": "Vec<IdentificationTuple<T>>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "At the end of the session, at least one validator was found to be offline."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "57",
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "58",
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "58",
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "10",
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "59",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "60"
                }
              },
              "docs": []
            }
          },
          {
            "id": "60",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "61"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "61",
            "type": {
              "path": [
                "pallet_staking",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": "62",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "own",
                      "type": "62",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "others",
                      "type": "63",
                      "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "62",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "6"
                }
              },
              "docs": []
            }
          },
          {
            "id": "63",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "64"
                }
              },
              "docs": []
            }
          },
          {
            "id": "64",
            "type": {
              "path": [
                "pallet_staking",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": "62",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "65",
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "66",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "0"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "67",
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "actual_fee",
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "tip",
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "68",
            "type": {
              "path": [
                "pallet_dex",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "AddProvision",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "add provision success \\[who, asset_id_0, contribution_0,",
                        "asset_id_1, contribution_1\\]"
                      ]
                    },
                    {
                      "name": "AddLiquidity",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Add liquidity success. \\[who, asset_id_0, reserve_0_increment,",
                        "asset_id_1, reserve_1_increment, share_increment\\]"
                      ]
                    },
                    {
                      "name": "RemoveLiquidity",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Remove liquidity from the trading pool success. \\[who,",
                        "asset_id_0, reserve_0_decrement, asset_id_1, reserve_1_decrement,",
                        "share_decrement\\]"
                      ]
                    },
                    {
                      "name": "Swap",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "69",
                          "typeName": "Vec<AssetId>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Use supply Asset to swap target Asset. \\[trader, trading_path,",
                        "supply_Asset_amount, target_Asset_amount\\]"
                      ]
                    },
                    {
                      "name": "EnableTradingPair",
                      "fields": [
                        {
                          "name": null,
                          "type": "70",
                          "typeName": "TradingPair",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Enable trading pair. \\[trading_pair\\]"
                      ]
                    },
                    {
                      "name": "DisableTradingPair",
                      "fields": [
                        {
                          "name": null,
                          "type": "70",
                          "typeName": "TradingPair",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Disable trading pair. \\[trading_pair\\]"
                      ]
                    },
                    {
                      "name": "ProvisioningToEnabled",
                      "fields": [
                        {
                          "name": null,
                          "type": "70",
                          "typeName": "TradingPair",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Provisioning trading pair convert to Enabled. \\[trading_pair,",
                        "pool_0_amount, pool_1_amount, total_share_amount\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "69",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "4"
                }
              },
              "docs": []
            }
          },
          {
            "id": "70",
            "type": {
              "path": [
                "pallet_dex",
                "types",
                "TradingPair"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "4",
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": "4",
                      "typeName": "AssetId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "71",
            "type": {
              "path": [
                "pallet_nft",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CollectionCreate",
                      "fields": [
                        {
                          "name": "collection_uuid",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "initial_issuance",
                          "type": "4",
                          "typeName": "TokenCount",
                          "docs": []
                        },
                        {
                          "name": "max_issuance",
                          "type": "72",
                          "typeName": "Option<TokenCount>",
                          "docs": []
                        },
                        {
                          "name": "collection_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "metadata_scheme",
                          "type": "73",
                          "typeName": "MetadataScheme",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "CollectionNameType",
                          "docs": []
                        },
                        {
                          "name": "royalties_schedule",
                          "type": "75",
                          "typeName": "Option<RoyaltiesSchedule<T::AccountId>>",
                          "docs": []
                        },
                        {
                          "name": "origin_chain",
                          "type": "80",
                          "typeName": "OriginChain",
                          "docs": []
                        },
                        {
                          "name": "compatibility",
                          "type": "81",
                          "typeName": "CrossChainCompatibility",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A new collection of tokens was created"
                      ]
                    },
                    {
                      "name": "Mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "start",
                          "type": "4",
                          "typeName": "SerialNumber",
                          "docs": []
                        },
                        {
                          "name": "end",
                          "type": "4",
                          "typeName": "SerialNumber",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Token(s) were minted"
                      ]
                    },
                    {
                      "name": "BridgedMint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Token(s) were bridged"
                      ]
                    },
                    {
                      "name": "OwnerSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A new owner was set"
                      ]
                    },
                    {
                      "name": "MaxIssuanceSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "max_issuance",
                          "type": "4",
                          "typeName": "TokenCount",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Max issuance was set"
                      ]
                    },
                    {
                      "name": "BaseUriSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "base_uri",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Base URI was set"
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "previous_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "A token was transferred"
                      ]
                    },
                    {
                      "name": "Burn",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_number",
                          "type": "4",
                          "typeName": "SerialNumber",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "A token was burned"
                      ]
                    },
                    {
                      "name": "FixedPriceSaleList",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "seller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "A fixed price sale has been listed"
                      ]
                    },
                    {
                      "name": "FixedPriceSaleComplete",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "buyer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "seller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "A fixed price sale has completed"
                      ]
                    },
                    {
                      "name": "FixedPriceSaleClose",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "reason",
                          "type": "83",
                          "typeName": "FixedPriceClosureReason",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "A fixed price sale has closed without selling"
                      ]
                    },
                    {
                      "name": "FixedPriceSalePriceUpdate",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "new_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "A fixed price sale has had its price updated"
                      ]
                    },
                    {
                      "name": "AuctionOpen",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "reserve_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        },
                        {
                          "name": "seller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "An auction has opened"
                      ]
                    },
                    {
                      "name": "AuctionSold",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "hammer_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "winner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": [
                        "An auction has sold"
                      ]
                    },
                    {
                      "name": "AuctionClose",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "reason",
                          "type": "84",
                          "typeName": "AuctionClosureReason",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": [
                        "An auction has closed without selling"
                      ]
                    },
                    {
                      "name": "Bid",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "bidder",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "A new highest bid was placed"
                      ]
                    },
                    {
                      "name": "MarketplaceRegister",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "entitlement",
                          "type": "79",
                          "typeName": "Permill",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "4",
                          "typeName": "MarketplaceId",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": [
                        "An account has been registered as a marketplace"
                      ]
                    },
                    {
                      "name": "Offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        },
                        {
                          "name": "buyer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": [
                        "An offer has been made on an NFT"
                      ]
                    },
                    {
                      "name": "OfferCancel",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": [
                        "An offer has been cancelled"
                      ]
                    },
                    {
                      "name": "OfferAccept",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        }
                      ],
                      "index": "19",
                      "docs": [
                        "An offer has been accepted"
                      ]
                    },
                    {
                      "name": "CollectionClaimed",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        }
                      ],
                      "index": "20",
                      "docs": [
                        "Collection has been claimed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "72",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "73",
            "type": {
              "path": [
                "seed_primitives",
                "nft",
                "MetadataScheme"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "74",
                      "typeName": "BoundedVec<u8, ConstU32<METADATA_SCHEME_LIMIT>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "74",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "2"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "75",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "76"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "76",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "76",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "RoyaltiesSchedule"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "entitlements",
                      "type": "77",
                      "typeName": "Vec<(AccountId, Permill)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "77",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "78"
                }
              },
              "docs": []
            }
          },
          {
            "id": "78",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "79"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "79",
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "80",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "OriginChain"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ethereum",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Root",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "81",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "CrossChainCompatibility"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "xrpl",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "82",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "69",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "83",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "FixedPriceClosureReason"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "VendorCancelled",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Expired",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "84",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "AuctionClosureReason"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ExpiredNoBids",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "SettlementFailed",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "VendorCancelled",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "85",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "TransactionAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "LedgerIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "TransactionChallenge",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "LedgerIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "ProcessingOk",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "LedgerIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Processing an event succeeded"
                      ]
                    },
                    {
                      "name": "ProcessingFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "LedgerIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "23",
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Processing an event failed"
                      ]
                    },
                    {
                      "name": "NotSupportedTransaction",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Transaction not supported"
                      ]
                    },
                    {
                      "name": "WithdrawRequest",
                      "fields": [
                        {
                          "name": "proof_id",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "XrplAccountId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Request to withdraw some XRP amount to XRPL"
                      ]
                    },
                    {
                      "name": "RelayerAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "RelayerRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "DoorAddressSet",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "XrplAccountId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "DoorNextTicketSequenceParamSet",
                      "fields": [
                        {
                          "name": "ticket_sequence_start_next",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ticket_bucket_size_next",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "DoorTicketSequenceParamSet",
                      "fields": [
                        {
                          "name": "ticket_sequence",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ticket_sequence_start",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ticket_bucket_size",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": []
                    },
                    {
                      "name": "TicketSequenceThresholdReached",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "86",
            "type": {
              "path": [
                "primitive_types",
                "H512"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "87",
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "87",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "64",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "88",
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "1",
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "89",
            "type": {
              "path": [
                "pallet_echo",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PingSent",
                      "fields": [
                        {
                          "name": "session_id",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "event_proof_id",
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A ping message was sent to Ethereum"
                      ]
                    },
                    {
                      "name": "PongReceived",
                      "fields": [
                        {
                          "name": "session_id",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "A pong response was received from Ethereum"
                      ]
                    },
                    {
                      "name": "PingReceived",
                      "fields": [
                        {
                          "name": "session_id",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A ping was received from Ethereum"
                      ]
                    },
                    {
                      "name": "PongSent",
                      "fields": [
                        {
                          "name": "session_id",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "event_proof_id",
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A pong message was sent to Ethereum"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "90",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "SolutionStored",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": "91",
                          "typeName": "ElectionCompute",
                          "docs": []
                        },
                        {
                          "name": "prev_ejected",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A solution was stored with the given compute.",
                        "",
                        "If the solution is signed, this means that it hasn't yet been processed. If the",
                        "solution is unsigned, this means that it has also been processed.",
                        "",
                        "The `bool` is `true` when a previous solution was ejected to make room for this one."
                      ]
                    },
                    {
                      "name": "ElectionFinalized",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": "92",
                          "typeName": "Option<ElectionCompute>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "The election has been finalized, with `Some` of the given computation, or else if the",
                        "election failed, `None`."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "An account has been rewarded for their signed submission being finalized."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "An account has been slashed for submitting an invalid signed submission."
                      ]
                    },
                    {
                      "name": "SignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "The signed phase of the given round has started."
                      ]
                    },
                    {
                      "name": "UnsignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "The unsigned phase of the given round has started."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "91",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "OnChain",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Unsigned",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Fallback",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "Emergency",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "92",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "91"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "91",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "93",
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Rebagged",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": "8",
                          "typeName": "T::Score",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": "8",
                          "typeName": "T::Score",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Moved an account from one bag to another."
                      ]
                    },
                    {
                      "name": "ScoreUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new_score",
                          "type": "8",
                          "typeName": "T::Score",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Updated the score of some account to the given amount."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "94",
            "type": {
              "path": [
                "pallet_ethy",
                "RawEvent"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "BlockNumber",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Verified",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Verifying an event succeeded"
                      ]
                    },
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Verifying an event failed"
                      ]
                    },
                    {
                      "name": "AuthoritySetChange",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A notary (validator) set change is in motion (event_id, new_validator_set_id)",
                        "A proof for the change will be generated with the given `event_id`"
                      ]
                    },
                    {
                      "name": "XrplAuthoritySetChange",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A notary (validator) set change for Xrpl is in motion (event_id, new_validator_set_id)",
                        "A proof for the change will be generated with the given `event_id`"
                      ]
                    },
                    {
                      "name": "ProofDelayed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Generating event proof delayed as bridge is paused"
                      ]
                    },
                    {
                      "name": "ProcessingOk",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Processing an event succeeded"
                      ]
                    },
                    {
                      "name": "ProcessingFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "95",
                          "typeName": "EventRouterError",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Processing an event failed"
                      ]
                    },
                    {
                      "name": "Challenged",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "An event has been challenged (claim_id, challenger)"
                      ]
                    },
                    {
                      "name": "ProcessAtExtended",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "The event is still awaiting consensus. Process block pushed out (claim_id, process_at)"
                      ]
                    },
                    {
                      "name": "EventSend",
                      "fields": [
                        {
                          "name": "event_proof_id",
                          "type": "8",
                          "typeName": "EventProofId",
                          "docs": []
                        },
                        {
                          "name": "signing_request",
                          "type": "96",
                          "typeName": "EthySigningRequest",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "An event proof has been sent for signing by ethy-gadget"
                      ]
                    },
                    {
                      "name": "EventSubmit",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "98",
                          "typeName": "EventClaim",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "An event has been submitted from Ethereum (event_claim_id, event_claim, process_at)"
                      ]
                    },
                    {
                      "name": "RelayerBondDeposit",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "An account has deposited a relayer bond"
                      ]
                    },
                    {
                      "name": "RelayerBondWithdraw",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "An account has withdrawn a relayer bond"
                      ]
                    },
                    {
                      "name": "RelayerSet",
                      "fields": [
                        {
                          "name": null,
                          "type": "66",
                          "typeName": "Option<AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": [
                        "A new relayer has been set"
                      ]
                    },
                    {
                      "name": "XrplDoorSignersSet",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "Xrpl Door signers are set"
                      ]
                    },
                    {
                      "name": "FinaliseScheduleFail",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "The schedule to unpause the bridge has failed (scheduled_block)"
                      ]
                    },
                    {
                      "name": "SetContractAddress",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": [
                        "The bridge contract address has been set"
                      ]
                    },
                    {
                      "name": "XrplAuthoritySetChangeRequestFailed",
                      "fields": [],
                      "index": "17",
                      "docs": [
                        "Xrpl authority set change request failed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events for this module.",
                ""
              ]
            }
          },
          {
            "id": "95",
            "type": {
              "path": [
                "seed_pallet_common",
                "EventRouterError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "FailedProcessing",
                      "fields": [
                        {
                          "name": null,
                          "type": "23",
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "NoReceiver",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "96",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "EthySigningRequest"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": "97",
                          "typeName": "EthereumEventInfo",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "XrplTx",
                      "fields": [
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "97",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "EthereumEventInfo"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "source",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": "11",
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "validator_set_id",
                      "type": "8",
                      "typeName": "ValidatorSetId",
                      "docs": []
                    },
                    {
                      "name": "event_proof_id",
                      "type": "8",
                      "typeName": "EventProofId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "98",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "EventClaim"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "tx_hash",
                      "type": "9",
                      "typeName": "EthHash",
                      "docs": []
                    },
                    {
                      "name": "source",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": "11",
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "99",
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "transaction_hash",
                          "type": "9",
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "exit_reason",
                          "type": "100",
                          "typeName": "ExitReason",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "100",
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": "101",
                          "typeName": "ExitSucceed",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": "102",
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": "105",
                          "typeName": "ExitRevert",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": "106",
                          "typeName": "ExitFatal",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "101",
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Returned",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Suicided",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "102",
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [],
                      "index": "14",
                      "docs": []
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [],
                      "index": "10",
                      "docs": []
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [],
                      "index": "11",
                      "docs": []
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [],
                      "index": "12",
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": "103",
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "103",
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "104"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "104",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "104",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": "105",
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "106",
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": "102",
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": "103",
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "107",
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": "108",
                          "typeName": "Log",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "A contract has been created at given address."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "108",
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": "88",
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": "109",
                      "typeName": "Vec<H256>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": "11",
                      "typeName": "Bytes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "109",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "9"
                }
              },
              "docs": []
            }
          },
          {
            "id": "110",
            "type": {
              "path": [
                "pallet_evm_chain_id",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ChainIdSet",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "111",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "RawEvent"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "BlockNumber",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Erc20DepositDelayed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "DelayedPaymentId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "An erc20 deposit has been delayed.(payment_id, scheduled block, amount, beneficiary)"
                      ]
                    },
                    {
                      "name": "Erc20WithdrawalDelayed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "DelayedPaymentId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "A withdrawal has been delayed.(payment_id, scheduled block, amount, beneficiary)"
                      ]
                    },
                    {
                      "name": "DelayedErc20DepositFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "DelayedPaymentId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A delayed erc20 deposit has failed (payment_id, beneficiary)"
                      ]
                    },
                    {
                      "name": "DelayedErc20WithdrawalFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A delayed erc20 withdrawal has failed (asset_id, beneficiary)"
                      ]
                    },
                    {
                      "name": "Erc20Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "A bridged erc20 deposit succeeded. (asset, amount, beneficiary)"
                      ]
                    },
                    {
                      "name": "Erc20Withdraw",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Tokens were burnt for withdrawal on Ethereum as ERC20s (asset, amount, beneficiary)"
                      ]
                    },
                    {
                      "name": "Erc20DepositFail",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "A bridged erc20 deposit failed. (source address, abi data)"
                      ]
                    },
                    {
                      "name": "SetContractAddress",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "The peg contract address has been set"
                      ]
                    },
                    {
                      "name": "PaymentDelaySet",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "A delay was added for an asset_id (asset_id, min_balance, delay)"
                      ]
                    },
                    {
                      "name": "NoAvailableDelayedPaymentIds",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "There are no more payment ids available, they've been exhausted"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events for this module.",
                ""
              ]
            }
          },
          {
            "id": "112",
            "type": {
              "path": [
                "pallet_nft_peg",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Erc721Deposit",
                      "fields": [
                        {
                          "name": "destination",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "An ERC721 deposit was made"
                      ]
                    },
                    {
                      "name": "Erc721Mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "113",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerMint>",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Bridged ERC721 tokens were minted"
                      ]
                    },
                    {
                      "name": "Erc721Withdraw",
                      "fields": [
                        {
                          "name": "origin",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collection_ids",
                          "type": "114",
                          "typeName": "BoundedVec<CollectionUuid, T::MaxCollectionsPerWithdraw>",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "115",
                          "typeName": "BoundedVec<BoundedVec<SerialNumber, T::MaxSerialsPerWithdraw>, T::\nMaxCollectionsPerWithdraw,>",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "An ERC721 withdraw was made"
                      ]
                    },
                    {
                      "name": "ContractAddressSet",
                      "fields": [
                        {
                          "name": "contract",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "The NFT-peg contract address was set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "113",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "69",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "114",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "69",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "115",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "116"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "117",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "116",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "69",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "117",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "116"
                }
              },
              "docs": []
            }
          },
          {
            "id": "118",
            "type": {
              "path": [
                "pallet_fee_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CallWithFeePreferences",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "max_payment",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A call was made with specified payment asset"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "119",
            "type": {
              "path": [
                "pallet_fee_control",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": []
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "120",
            "type": {
              "path": [
                "pallet_xls20",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Xls20MintRequest",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "69",
                          "typeName": "Vec<SerialNumber>",
                          "docs": []
                        },
                        {
                          "name": "token_uris",
                          "type": "121",
                          "typeName": "Vec<Vec<u8>>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Request sent to XLS20 Relayer"
                      ]
                    },
                    {
                      "name": "RelayerSet",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "A new relayer has been set"
                      ]
                    },
                    {
                      "name": "Xls20MintFeeSet",
                      "fields": [
                        {
                          "name": "new_fee",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "A new Xls20 Mint Fee has been set"
                      ]
                    },
                    {
                      "name": "Xls20MappingSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "mappings",
                          "type": "122",
                          "typeName": "Vec<(SerialNumber, Xls20TokenId)>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A new XLS20 mapping has been set"
                      ]
                    },
                    {
                      "name": "Xls20CompatibilityEnabled",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "A collection has had XLS-20 compatibility enabled"
                      ]
                    },
                    {
                      "name": "Xls20MintFeePaid",
                      "fields": [
                        {
                          "name": "collection_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_fee",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Additional mint fee for XLS-20 mint has been paid to relayer"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "121",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "11"
                }
              },
              "docs": []
            }
          },
          {
            "id": "122",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "123"
                }
              },
              "docs": []
            }
          },
          {
            "id": "123",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "87"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "124",
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "disambiguation_index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": "9",
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "125",
            "type": {
              "path": [
                "seed_runtime",
                "impls",
                "ProxyType"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Any",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Governance",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "Staking",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "126",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": "127",
            "type": {
              "path": [
                "pallet_futurepass",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "FuturepassCreated",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Futurepass creation"
                      ]
                    },
                    {
                      "name": "DelegateRegistered",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Delegate registration to Futurepass account"
                      ]
                    },
                    {
                      "name": "DelegateUnregistered",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Delegate unregistration from Futurepass account"
                      ]
                    },
                    {
                      "name": "FuturepassTransferred",
                      "fields": [
                        {
                          "name": "old_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Futurepass transfer"
                      ]
                    },
                    {
                      "name": "DefaultFuturepassSet",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "futurepass",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Futurepass set as default proxy"
                      ]
                    },
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": "31",
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "A proxy call was executed with the given call"
                      ]
                    },
                    {
                      "name": "FuturepassAssetsMigrated",
                      "fields": [
                        {
                          "name": "evm_futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": "69",
                          "typeName": "Vec<u32>",
                          "docs": []
                        },
                        {
                          "name": "collections",
                          "type": "69",
                          "typeName": "Vec<u32>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Migration of Futurepass assets"
                      ]
                    },
                    {
                      "name": "FuturepassMigratorSet",
                      "fields": [
                        {
                          "name": "migrator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Updating Futurepass migrator account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "128",
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "129",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "29"
                }
              },
              "docs": []
            }
          },
          {
            "id": "130",
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": "131",
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": "104",
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "131",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "4"
                }
              },
              "docs": []
            }
          },
          {
            "id": "132",
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": "47",
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": "133",
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": "121",
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": "11",
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "133",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "134"
                }
              },
              "docs": []
            }
          },
          {
            "id": "134",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "11",
                  "11"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "135",
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": "136",
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "136",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "137"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": "137",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": "137",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": "137",
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "137",
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": "138",
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": "138",
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": "138",
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "138",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "8"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "8",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "139",
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": "140",
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "140",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": "4",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": "4",
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": "4",
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "141",
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": "8",
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "142",
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": "104",
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": "104",
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": "143",
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": "2",
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "143",
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "144"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "144",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "144",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "145"
                }
              },
              "docs": []
            }
          },
          {
            "id": "145",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "41",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "146",
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": "147",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "148"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "150",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "148",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "149",
                  "8"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "149",
            "type": {
              "path": [
                "sp_consensus_babe",
                "app",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "58",
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "150",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "148"
                }
              },
              "docs": []
            }
          },
          {
            "id": "151",
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "152",
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": "c",
                          "type": "153",
                          "typeName": "(u64, u64)",
                          "docs": []
                        },
                        {
                          "name": "allowed_slots",
                          "type": "154",
                          "typeName": "AllowedSlots",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "153",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "8",
                  "8"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "154",
            "type": {
              "path": [
                "sp_consensus_babe",
                "AllowedSlots"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PrimarySlots",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "PrimaryAndSecondaryPlainSlots",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "PrimaryAndSecondaryVRFSlots",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "155",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "10"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "156",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "156",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "10"
                }
              },
              "docs": []
            }
          },
          {
            "id": "157",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "158"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "158",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "158",
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "PreDigest"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Primary",
                      "fields": [
                        {
                          "name": null,
                          "type": "159",
                          "typeName": "PrimaryPreDigest",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "SecondaryPlain",
                      "fields": [
                        {
                          "name": null,
                          "type": "160",
                          "typeName": "SecondaryPlainPreDigest",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "SecondaryVRF",
                      "fields": [
                        {
                          "name": null,
                          "type": "161",
                          "typeName": "SecondaryVRFPreDigest",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "159",
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "PrimaryPreDigest"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": "4",
                      "typeName": "super::AuthorityIndex",
                      "docs": []
                    },
                    {
                      "name": "slot",
                      "type": "151",
                      "typeName": "Slot",
                      "docs": []
                    },
                    {
                      "name": "vrf_output",
                      "type": "10",
                      "typeName": "VRFOutput",
                      "docs": []
                    },
                    {
                      "name": "vrf_proof",
                      "type": "87",
                      "typeName": "VRFProof",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "160",
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryPlainPreDigest"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": "4",
                      "typeName": "super::AuthorityIndex",
                      "docs": []
                    },
                    {
                      "name": "slot",
                      "type": "151",
                      "typeName": "Slot",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "161",
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryVRFPreDigest"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": "4",
                      "typeName": "super::AuthorityIndex",
                      "docs": []
                    },
                    {
                      "name": "slot",
                      "type": "151",
                      "typeName": "Slot",
                      "docs": []
                    },
                    {
                      "name": "vrf_output",
                      "type": "10",
                      "typeName": "VRFOutput",
                      "docs": []
                    },
                    {
                      "name": "vrf_proof",
                      "type": "87",
                      "typeName": "VRFProof",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "162",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "10"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "10",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "163",
            "type": {
              "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "c",
                      "type": "153",
                      "typeName": "(u64, u64)",
                      "docs": []
                    },
                    {
                      "name": "allowed_slots",
                      "type": "154",
                      "typeName": "AllowedSlots",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "164",
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": "165",
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": "168",
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": "165",
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": "168",
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported.",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "plan_config_change",
                      "fields": [
                        {
                          "name": "config",
                          "type": "152",
                          "typeName": "NextConfigDescriptor",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                        "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                        "Multiple calls to this method will replace any existing planned config change that had",
                        "not been enacted yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "165",
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": "166"
                },
                {
                  "name": "Id",
                  "type": "149"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": "149",
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "slot",
                      "type": "151",
                      "typeName": "Slot",
                      "docs": []
                    },
                    {
                      "name": "first_header",
                      "type": "166",
                      "typeName": "Header",
                      "docs": []
                    },
                    {
                      "name": "second_header",
                      "type": "166",
                      "typeName": "Header",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "166",
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": "4"
                },
                {
                  "name": "Hash",
                  "type": "167"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": "9",
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": "131",
                      "typeName": "Number",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": "9",
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "extrinsics_root",
                      "type": "9",
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "digest",
                      "type": "12",
                      "typeName": "Digest",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "167",
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "168",
            "type": {
              "path": [
                "sp_session",
                "MembershipProof"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": "4",
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": "trie_nodes",
                      "type": "121",
                      "typeName": "Vec<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": "validator_count",
                      "type": "4",
                      "typeName": "ValidatorCount",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "169",
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    },
                    {
                      "name": "InvalidConfiguration",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Submitted configuration is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "170",
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": "171",
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "171",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "8"
                }
              },
              "docs": []
            }
          },
          {
            "id": "172",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "173"
                }
              },
              "docs": []
            }
          },
          {
            "id": "173",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "174"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "174",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "174",
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": "175"
                },
                {
                  "name": "BlockNumber",
                  "type": "4"
                },
                {
                  "name": "PalletsOrigin",
                  "type": "181"
                },
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": "30",
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": "2",
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": "175",
                      "typeName": "Call",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": "178",
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": "181",
                      "typeName": "PalletsOrigin",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "175",
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "176"
                },
                {
                  "name": "Hash",
                  "type": "9"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "name": null,
                          "type": "176",
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "name": null,
                          "type": "9",
                          "typeName": "Hash",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "176",
            "type": {
              "path": [
                "seed_runtime",
                "Call"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": "132",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Babe",
                      "fields": [
                        {
                          "name": null,
                          "type": "164",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": "170",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": "177",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": "179",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": "185",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "33",
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": "187",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": "188",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "AssetsExt",
                      "fields": [
                        {
                          "name": null,
                          "type": "190",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetsExt, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "name": null,
                          "type": "192",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": "194",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": "201",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": "206",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": []
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": "217",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": "225",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": []
                    },
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": "226",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dex, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": []
                    },
                    {
                      "name": "Nft",
                      "fields": [
                        {
                          "name": null,
                          "type": "227",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nft, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": []
                    },
                    {
                      "name": "XRPLBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": "228",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XRPLBridge, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": []
                    },
                    {
                      "name": "TokenApprovals",
                      "fields": [
                        {
                          "name": null,
                          "type": "230",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TokenApprovals, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "19",
                      "docs": []
                    },
                    {
                      "name": "Echo",
                      "fields": [
                        {
                          "name": null,
                          "type": "231",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Echo, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "21",
                      "docs": []
                    },
                    {
                      "name": "Marketplace",
                      "fields": [
                        {
                          "name": null,
                          "type": "232",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Marketplace, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "44",
                      "docs": []
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": "233",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "22",
                      "docs": []
                    },
                    {
                      "name": "VoterList",
                      "fields": [
                        {
                          "name": null,
                          "type": "292",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "23",
                      "docs": []
                    },
                    {
                      "name": "EthBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": "293",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthBridge, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "25",
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": "301",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "26",
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": "313",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "27",
                      "docs": []
                    },
                    {
                      "name": "EVMChainId",
                      "fields": [
                        {
                          "name": null,
                          "type": "317",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVMChainId, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "41",
                      "docs": []
                    },
                    {
                      "name": "Erc20Peg",
                      "fields": [
                        {
                          "name": null,
                          "type": "318",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Erc20Peg, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "29",
                      "docs": []
                    },
                    {
                      "name": "NftPeg",
                      "fields": [
                        {
                          "name": null,
                          "type": "321",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NftPeg, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "30",
                      "docs": []
                    },
                    {
                      "name": "FeeProxy",
                      "fields": [
                        {
                          "name": null,
                          "type": "322",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FeeProxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "31",
                      "docs": []
                    },
                    {
                      "name": "FeeControl",
                      "fields": [
                        {
                          "name": null,
                          "type": "323",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FeeControl, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "40",
                      "docs": []
                    },
                    {
                      "name": "Xls20",
                      "fields": [
                        {
                          "name": null,
                          "type": "324",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Xls20, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "42",
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": "327",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "32",
                      "docs": []
                    },
                    {
                      "name": "Futurepass",
                      "fields": [
                        {
                          "name": null,
                          "type": "329",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Futurepass, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "34",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "177",
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": "178",
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": "2",
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "175",
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": "178",
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": "2",
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "175",
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": "178",
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": "2",
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "175",
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "after",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": "178",
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": "2",
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "175",
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "178",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "29"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "29",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "179",
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": "180",
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": "180",
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": "181",
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": "180",
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "180",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "176"
                }
              },
              "docs": []
            }
          },
          {
            "id": "181",
            "type": {
              "path": [
                "seed_runtime",
                "OriginCaller"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": "182",
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": "183",
                          "typeName": "pallet_ethereum::Origin",
                          "docs": []
                        }
                      ],
                      "index": "26",
                      "docs": []
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": "184",
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "182",
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "183",
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "184",
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "185",
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account."
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set an a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account."
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": "186",
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "delay_period",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered."
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration)."
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process."
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you."
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account."
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration)."
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "186",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "0"
                }
              },
              "docs": []
            }
          },
          {
            "id": "187",
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_reserved",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "188",
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": "6",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": "189",
                          "typeName": "DestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                        "owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "asset.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                        "can provide accurate witness information and prevent users from manipulating state",
                        "in a way that can make it harder to destroy.",
                        "",
                        "Weight: `O(c + p + a)` where:",
                        "- `c = (witness.accounts - witness.sufficients)`",
                        "- `s = witness.sufficients`",
                        "- `a = witness.approvals`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": "2",
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": "2",
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "19",
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "20",
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "21",
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "62",
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": "22",
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": "23",
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": "131",
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "allow_burn",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "24",
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "189",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "DestroyWitness"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "accounts",
                      "type": "131",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": "131",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": "131",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "190",
            "type": {
              "path": [
                "pallet_assets_ext",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "create_asset",
                      "fields": [
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": "2",
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": "191",
                          "typeName": "Option<Balance>",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Creates a new asset with unique ID according to the network asset id scheme."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "191",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "6"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "6",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "192",
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": "193",
                          "typeName": "Vec<T::Header>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "193",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "166"
                }
              },
              "docs": []
            }
          },
          {
            "id": "194",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "controller",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "payee",
                          "type": "195",
                          "typeName": "RewardDestination<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                        "be the account that controls it.",
                        "",
                        "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash account.",
                        "",
                        "Emits `Bonded`.",
                        "# <weight>",
                        "- Independent of the arguments. Moderate complexity.",
                        "- O(1).",
                        "- Three extra DB entries.",
                        "",
                        "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                        "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                        "------------------",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "max_additional",
                          "type": "62",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                        "for staking.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Use this if there are additional funds in your stash account that you wish to bond.",
                        "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                        "any limitation on the amount that can be added.",
                        "",
                        "Emits `Bonded`.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                        "period ends. If this leaves an amount actively bonded less than",
                        "T::Currency::minimum_balance(), then it is increased to the full amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                        "the funds out of management ready for transfer.",
                        "",
                        "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                        "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                        "to be called first to remove some of the chunks (if possible).",
                        "",
                        "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                        "they should call `chill` first in order to free up their bonded funds.",
                        "",
                        "Emits `Unbonded`.",
                        "",
                        "See also [`Call::withdraw_unbonded`]."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "num_slashing_spans",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Remove any unlocked chunks from the `unlocking` queue from our management.",
                        "",
                        "This essentially frees up that balance to be used by the stash account to do",
                        "whatever it wants.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller.",
                        "",
                        "Emits `Withdrawn`.",
                        "",
                        "See also [`Call::unbond`].",
                        "",
                        "# <weight>",
                        "Complexity O(S) where S is the number of slashing spans to remove",
                        "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "validate",
                      "fields": [
                        {
                          "name": "prefs",
                          "type": "45",
                          "typeName": "ValidatorPrefs",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Declare the desire to validate for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": "186",
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Declare the desire to nominate `targets` for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of `targets` (N)",
                        "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                        "- Both the reads and writes follow a similar pattern.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Declare no desire to either validate or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains one read.",
                        "- Writes are limited to the `origin` account key.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_payee",
                      "fields": [
                        {
                          "name": "payee",
                          "type": "195",
                          "typeName": "RewardDestination<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "(Re-)set the payment target for a controller.",
                        "",
                        "Effects will be felt instantly (as soon as this function is completed successfully).",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "---------",
                        "- Weight: O(1)",
                        "- DB Weight:",
                        "    - Read: Ledger",
                        "    - Write: Payee",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_controller",
                      "fields": [
                        {
                          "name": "controller",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "(Re-)set the controller of a stash.",
                        "",
                        "Effects will be felt instantly (as soon as this function is completed successfully).",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "Weight: O(1)",
                        "DB Weight:",
                        "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                        "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_validator_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": "131",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Sets the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "Write: Validator Count",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "increase_validator_count",
                      "fields": [
                        {
                          "name": "additional",
                          "type": "131",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "Increments the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "scale_validator_count",
                      "fields": [
                        {
                          "name": "factor",
                          "type": "196",
                          "typeName": "Percent",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "Scale up the ideal number of validators by a factor.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_no_eras",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "Force there to be no new eras indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "Thus the election process may be ongoing when this is called. In this case the",
                        "election will continue until the next era is triggered.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "Force there to be a new era at the end of the next session. After this, it will be",
                        "reset to normal (non-forced) behaviour.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": "186",
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": [
                        "Set the validators who cannot be slashed (if any).",
                        "",
                        "The dispatch origin must be Root."
                      ]
                    },
                    {
                      "name": "force_unstake",
                      "fields": [
                        {
                          "name": "stash",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "Force a current staker to become completely unstaked, immediately.",
                        "",
                        "The dispatch origin must be Root."
                      ]
                    },
                    {
                      "name": "force_new_era_always",
                      "fields": [],
                      "index": "16",
                      "docs": [
                        "Force there to be a new era at the end of sessions indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result."
                      ]
                    },
                    {
                      "name": "cancel_deferred_slash",
                      "fields": [
                        {
                          "name": "era",
                          "type": "4",
                          "typeName": "EraIndex",
                          "docs": []
                        },
                        {
                          "name": "slash_indices",
                          "type": "69",
                          "typeName": "Vec<u32>",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": [
                        "Cancel enactment of a deferred slash.",
                        "",
                        "Can be called by the `T::SlashCancelOrigin`.",
                        "",
                        "Parameters: era and indices of the slashes for that era to kill."
                      ]
                    },
                    {
                      "name": "payout_stakers",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "era",
                          "type": "4",
                          "typeName": "EraIndex",
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": [
                        "Pay out all the stakers behind a single validator for a single era.",
                        "",
                        "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                        "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                        "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                        "",
                        "The origin of this call must be _Signed_. Any account can call this function, even if",
                        "it is not one of the stakers.",
                        "",
                        "# <weight>",
                        "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                        "- Contains a limited number of reads and writes.",
                        "-----------",
                        "N is the Number of payouts for the validator (including the validator)",
                        "Weight:",
                        "- Reward Destination Staked: O(N)",
                        "- Reward Destination Controller (Creating): O(N)",
                        "",
                        "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                        "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "value",
                          "type": "62",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "19",
                      "docs": [
                        "Rebond a portion of the stash scheduled to be unlocked.",
                        "",
                        "The dispatch origin must be signed by the controller.",
                        "",
                        "# <weight>",
                        "- Time complexity: O(L), where L is unlocking chunks",
                        "- Bounded by `MaxUnlockingChunks`.",
                        "- Storage changes: Can't increase storage, only decrease it.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_history_depth",
                      "fields": [
                        {
                          "name": "new_history_depth",
                          "type": "131",
                          "typeName": "EraIndex",
                          "docs": []
                        },
                        {
                          "name": "era_items_deleted",
                          "type": "131",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "20",
                      "docs": [
                        "Set `HistoryDepth` value. This function will delete any history information",
                        "when `HistoryDepth` is reduced.",
                        "",
                        "Parameters:",
                        "- `new_history_depth`: The new history depth you would like to set.",
                        "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
                        "  should report all the storage items that will be deleted by clearing old era history.",
                        "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
                        "  accurate number.",
                        "",
                        "Origin must be root.",
                        "",
                        "# <weight>",
                        "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                        "- Weight: O(E)",
                        "- DB Weight:",
                        "    - Reads: Current Era, History Depth",
                        "    - Writes: History Depth",
                        "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                        "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
                        "      ErasStartSessionIndex",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reap_stash",
                      "fields": [
                        {
                          "name": "stash",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "21",
                      "docs": [
                        "Remove all data structures concerning a staker/stash once it is at a state where it can",
                        "be considered `dust` in the staking system. The requirements are:",
                        "",
                        "1. the `total_balance` of the stash is below existential deposit.",
                        "2. or, the `ledger.total` of the stash is below existential deposit.",
                        "",
                        "The former can happen in cases like a slash; the latter when a fully unbonded account",
                        "is still receiving staking rewards in `RewardDestination::Staked`.",
                        "",
                        "It can be called by anyone, as long as `stash` meets the above requirements.",
                        "",
                        "Refunds the transaction fees upon successful execution."
                      ]
                    },
                    {
                      "name": "kick",
                      "fields": [
                        {
                          "name": "who",
                          "type": "186",
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        }
                      ],
                      "index": "22",
                      "docs": [
                        "Remove the given nominations from the calling validator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "- `who`: A list of nominator stash accounts who are nominating this validator which",
                        "  should no longer be nominating this validator.",
                        "",
                        "Note: Making this call only makes sense if you first set the validator preferences to",
                        "block any further nominations."
                      ]
                    },
                    {
                      "name": "set_staking_configs",
                      "fields": [
                        {
                          "name": "min_nominator_bond",
                          "type": "197",
                          "typeName": "ConfigOp<BalanceOf<T>>",
                          "docs": []
                        },
                        {
                          "name": "min_validator_bond",
                          "type": "197",
                          "typeName": "ConfigOp<BalanceOf<T>>",
                          "docs": []
                        },
                        {
                          "name": "max_nominator_count",
                          "type": "198",
                          "typeName": "ConfigOp<u32>",
                          "docs": []
                        },
                        {
                          "name": "max_validator_count",
                          "type": "198",
                          "typeName": "ConfigOp<u32>",
                          "docs": []
                        },
                        {
                          "name": "chill_threshold",
                          "type": "199",
                          "typeName": "ConfigOp<Percent>",
                          "docs": []
                        },
                        {
                          "name": "min_commission",
                          "type": "200",
                          "typeName": "ConfigOp<Perbill>",
                          "docs": []
                        }
                      ],
                      "index": "23",
                      "docs": [
                        "Update the various staking configurations .",
                        "",
                        "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                        "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                        "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `max_validator_count`: The max number of users who can be a validator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                        "  should be filled in order for the `chill_other` transaction to work.",
                        "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                        "  This is checked only upon calling `validate`. Existing validators are not affected.",
                        "",
                        "Origin must be Root to call this function.",
                        "",
                        "NOTE: Existing nominators and validators will not be affected by this update.",
                        "to kick people under the new limits, `chill_other` should be called."
                      ]
                    },
                    {
                      "name": "chill_other",
                      "fields": [
                        {
                          "name": "controller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "24",
                      "docs": [
                        "Declare a `controller` to stop participating as either a validator or nominator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                        "",
                        "If the caller is the same as the controller being targeted, then no further checks are",
                        "enforced, and this function behaves just like `chill`.",
                        "",
                        "If the caller is different than the controller being targeted, the following conditions",
                        "must be met:",
                        "",
                        "* `controller` must belong to a nominator who has become non-decodable,",
                        "",
                        "Or:",
                        "",
                        "* A `ChillThreshold` must be set and checked which defines how close to the max",
                        "  nominators or validators we must reach before users can start chilling one-another.",
                        "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                        "  how close we are to the threshold.",
                        "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                        "  if this is a person that should be chilled because they have not met the threshold",
                        "  bond required.",
                        "",
                        "This can be helpful if bond requirements are updated, and we need to remove old users",
                        "who do not satisfy these requirements."
                      ]
                    },
                    {
                      "name": "force_apply_min_commission",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "25",
                      "docs": [
                        "Force a validator to have at least the minimum commission. This will not affect a",
                        "validator who already has a commission greater than or equal to the minimum. Any account",
                        "can call this."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "195",
            "type": {
              "path": [
                "pallet_staking",
                "RewardDestination"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Stash",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Controller",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "name": null,
                          "type": "0",
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "196",
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "2",
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "197",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "6"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Remove",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "198",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Remove",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "199",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "196"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "name": null,
                          "type": "196",
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Remove",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "200",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "47"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "name": null,
                          "type": "47",
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Remove",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "201",
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": "202",
                          "typeName": "T::Keys",
                          "docs": []
                        },
                        {
                          "name": "proof",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "202",
            "type": {
              "path": [
                "seed_runtime",
                "SessionKeys"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "babe",
                      "type": "149",
                      "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    },
                    {
                      "name": "im_online",
                      "type": "57",
                      "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    },
                    {
                      "name": "grandpa",
                      "type": "54",
                      "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    },
                    {
                      "name": "ethy",
                      "type": "203",
                      "typeName": "<EthBridge as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "203",
            "type": {
              "path": [
                "seed_primitives",
                "ethy",
                "crypto",
                "app_crypto",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "204",
                      "typeName": "ecdsa::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "204",
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "205",
                      "typeName": "[u8; 33]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "205",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "33",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "206",
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": "207",
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": "184",
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": "207",
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": "184",
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                        "",
                        "This will trigger a forced authority set change at the beginning of the next session, to",
                        "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                        "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                        "The block production rate (which may be slowed down because of finality lagging) should",
                        "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                        "authority will start voting on top of `best_finalized_block_number` for new finalized",
                        "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                        "block of all validators of the new authority set.",
                        "",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "207",
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": "9"
                },
                {
                  "name": "N",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": "8",
                      "typeName": "SetId",
                      "docs": []
                    },
                    {
                      "name": "equivocation",
                      "type": "208",
                      "typeName": "Equivocation<H, N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "208",
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": "9"
                },
                {
                  "name": "N",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "name": null,
                          "type": "209",
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "name": null,
                          "type": "214",
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "209",
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": "54"
                },
                {
                  "name": "V",
                  "type": "210"
                },
                {
                  "name": "S",
                  "type": "211"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": "54",
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": "213",
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": "213",
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "210",
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": "9"
                },
                {
                  "name": "N",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": "9",
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": "4",
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "211",
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "212",
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "212",
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "87",
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "213",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "210",
                  "211"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "214",
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": "54"
                },
                {
                  "name": "V",
                  "type": "215"
                },
                {
                  "name": "S",
                  "type": "211"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": "54",
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": "216",
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": "216",
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "215",
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": "9"
                },
                {
                  "name": "N",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": "9",
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": "4",
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "216",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "215",
                  "211"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "217",
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "heartbeat",
                      "fields": [
                        {
                          "name": "heartbeat",
                          "type": "218",
                          "typeName": "Heartbeat<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": "223",
                          "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "# <weight>",
                        "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                        "  length of `heartbeat.network_state.external_address`",
                        "  - `O(K)`: decoding of length `K`",
                        "  - `O(E)`: decoding/encoding of length `E`",
                        "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                        "  `ReceivedHeartbeats`",
                        "- DbWrites: `ReceivedHeartbeats`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "218",
            "type": {
              "path": [
                "pallet_im_online",
                "Heartbeat"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": "4",
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "network_state",
                      "type": "219",
                      "typeName": "OpaqueNetworkState",
                      "docs": []
                    },
                    {
                      "name": "session_index",
                      "type": "4",
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": "authority_index",
                      "type": "4",
                      "typeName": "AuthIndex",
                      "docs": []
                    },
                    {
                      "name": "validators_len",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "219",
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueNetworkState"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": "220",
                      "typeName": "OpaquePeerId",
                      "docs": []
                    },
                    {
                      "name": "external_addresses",
                      "type": "221",
                      "typeName": "Vec<OpaqueMultiaddr>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "220",
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "221",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "222"
                }
              },
              "docs": []
            }
          },
          {
            "id": "222",
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueMultiaddr"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "223",
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "224",
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "224",
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "87",
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "225",
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": "8",
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": "0",
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "226",
            "type": {
              "path": [
                "pallet_dex",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "swap_with_exact_supply",
                      "fields": [
                        {
                          "name": "amount_in",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_out_min",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "path",
                          "type": "69",
                          "typeName": "Vec<AssetId>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Trading with DEX, swap with exact supply amount. Specify your input; retrieve variable",
                        "output.",
                        "- note: analogous to Uniswapv2 `swapExactTokensForTokens`",
                        "",
                        "- `path`: trading path.",
                        "- `amount_in`: exact supply amount.",
                        "- `amount_out_min`: acceptable minimum target amount."
                      ]
                    },
                    {
                      "name": "swap_with_exact_target",
                      "fields": [
                        {
                          "name": "amount_out",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_in_max",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "path",
                          "type": "69",
                          "typeName": "Vec<AssetId>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Trading with DEX, swap with exact target amount. Specify your output; supply variable",
                        "input.",
                        "- note: analogous to Uniswapv2 `swapTokensForExactTokens`",
                        "",
                        "- `amount_out`: exact target amount.",
                        "- `amount_in_max`: acceptable maximum supply amount.",
                        "- `path`: trading path."
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "asset_id_a",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_id_b",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "amount_a_desired",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_b_desired",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_a_min",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_b_min",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_share_increment",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Add liquidity to Enabled trading pair, or add provision to Provisioning trading pair.",
                        "- Add liquidity success will issue shares in current price which decided by the",
                        "  liquidity scale. Shares are temporarily not",
                        "allowed to transfer and trade, it represents the proportion of",
                        "assets in liquidity pool.",
                        "- Add provision success will record the provision, issue shares to caller in the initial",
                        "  price when trading pair convert to Enabled.",
                        "- Creates and enables TradingPair LP token if it does not exist for trading pair.",
                        "- Fails to add liquidity for `NotEnabled` trading pair.",
                        "",
                        "- `asset_id_a`: Asset id A.",
                        "- `asset_id_b`: Asset id B.",
                        "- `amount_a_desired`: amount a desired to add.",
                        "- `amount_b_desired`: amount b desired to add.",
                        "- `amount_a_min`: amount a minimum willing to add.",
                        "- `amount_b_min`: amount b minimum willing to add.",
                        "- `min_share_increment`: minimum expected lp token shares to be recieved."
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "asset_id_a",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_id_b",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "remove_liquidity",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_withdrawn_a",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_withdrawn_b",
                          "type": "62",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Remove liquidity from specific liquidity pool in the form of burning",
                        "shares, and withdrawing currencies in trading pairs from liquidity",
                        "pool in proportion, and withdraw liquidity incentive interest.",
                        "- note: liquidity can still be withdrawn for `NotEnabled` trading pairs.",
                        "",
                        "- `asset_id_a`: Asset id A.",
                        "- `asset_id_b`: Asset id B.",
                        "- `remove_liquidity`: liquidity amount to remove.",
                        "- `min_withdrawn_a`: minimum amount of asset A to be withdrawn from LP token.",
                        "- `min_withdrawn_b`: minimum amount of asset B to be withdrawn from LP token."
                      ]
                    },
                    {
                      "name": "reenable_trading_pair",
                      "fields": [
                        {
                          "name": "asset_id_a",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_id_b",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Re enable a `NotEnabled` trading pair.",
                        "- Requires LP token to be created and in the `NotEnabled` status",
                        "- Only root can enable a disabled trading pair",
                        "",
                        "- `asset_id_a`: Asset id A.",
                        "- `asset_id_b`: Asset id B."
                      ]
                    },
                    {
                      "name": "disable_trading_pair",
                      "fields": [
                        {
                          "name": "asset_id_a",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_id_b",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Disable an `Enabled` trading pair.",
                        "- Requires LP token to be created and in the `Enabled` status",
                        "- Only root can disable trading pair",
                        "",
                        "- `asset_id_a`: Asset id A.",
                        "- `asset_id_b`: Asset id B."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "227",
            "type": {
              "path": [
                "pallet_nft",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "claim_unowned_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Bridged collections from Ethereum will initially lack an owner. These collections will",
                        "be assigned to the pallet. This allows for claiming those collections assuming they were",
                        "assigned to the pallet"
                      ]
                    },
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Set the owner of a collection",
                        "Caller must be the current collection owner"
                      ]
                    },
                    {
                      "name": "set_max_issuance",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "max_issuance",
                          "type": "4",
                          "typeName": "TokenCount",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Set the max issuance of a collection",
                        "Caller must be the current collection owner"
                      ]
                    },
                    {
                      "name": "set_base_uri",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "base_uri",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Set the base URI of a collection",
                        "Caller must be the current collection owner"
                      ]
                    },
                    {
                      "name": "register_marketplace",
                      "fields": [
                        {
                          "name": "marketplace_account",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "entitlement",
                          "type": "79",
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Flag an account as a marketplace",
                        "",
                        "`marketplace_account` - if specified, this account will be registered",
                        "`entitlement` - Permill, percentage of sales to go to the marketplace",
                        "If no marketplace is specified the caller will be registered"
                      ]
                    },
                    {
                      "name": "create_collection",
                      "fields": [
                        {
                          "name": "name",
                          "type": "11",
                          "typeName": "CollectionNameType",
                          "docs": []
                        },
                        {
                          "name": "initial_issuance",
                          "type": "4",
                          "typeName": "TokenCount",
                          "docs": []
                        },
                        {
                          "name": "max_issuance",
                          "type": "72",
                          "typeName": "Option<TokenCount>",
                          "docs": []
                        },
                        {
                          "name": "token_owner",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "metadata_scheme",
                          "type": "73",
                          "typeName": "MetadataScheme",
                          "docs": []
                        },
                        {
                          "name": "royalties_schedule",
                          "type": "75",
                          "typeName": "Option<RoyaltiesSchedule<T::AccountId>>",
                          "docs": []
                        },
                        {
                          "name": "cross_chain_compatibility",
                          "type": "81",
                          "typeName": "CrossChainCompatibility",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Create a new collection",
                        "Additional tokens can be minted via `mint_additional`",
                        "",
                        "`name` - the name of the collection",
                        "`initial_issuance` - number of tokens to mint now",
                        "`max_issuance` - maximum number of tokens allowed in collection",
                        "`token_owner` - the token owner, defaults to the caller",
                        "`metadata_scheme` - The off-chain metadata referencing scheme for tokens in this",
                        "`royalties_schedule` - defacto royalties plan for secondary sales, this will",
                        "apply to all tokens in the collection by default."
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "quantity",
                          "type": "4",
                          "typeName": "TokenCount",
                          "docs": []
                        },
                        {
                          "name": "token_owner",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Mint tokens for an existing collection",
                        "",
                        "`collection_id` - the collection to mint tokens in",
                        "`quantity` - how many tokens to mint",
                        "`token_owner` - the token owner, defaults to the caller if unspecified",
                        "Caller must be the collection owner",
                        "-----------",
                        "Weight is O(N) where N is `quantity`"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Transfer ownership of an NFT",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Burn a token 🔥",
                        "",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "sell",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "buyer",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "fixed_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": "72",
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Sell a bundle of tokens at a fixed price",
                        "- Tokens must be from the same collection",
                        "- Tokens with individual royalties schedules cannot be sold with this method",
                        "",
                        "`buyer` optionally, the account to receive the NFT. If unspecified, then any account may",
                        "purchase `asset_id` fungible asset Id to receive as payment for the NFT",
                        "`fixed_price` ask price",
                        "`duration` listing duration time in blocks from now",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": [
                        "Buy a token listing for its specified price"
                      ]
                    },
                    {
                      "name": "auction",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "reserve_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": "72",
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": [
                        "Auction a bundle of tokens on the open market to the highest bidder",
                        "- Tokens must be from the same collection",
                        "- Tokens with individual royalties schedules cannot be sold in bundles",
                        "",
                        "Caller must be the token owner",
                        "- `payment_asset` fungible asset Id to receive payment with",
                        "- `reserve_price` winning bid must be over this threshold",
                        "- `duration` length of the auction (in blocks), uses default duration if unspecified"
                      ]
                    },
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": [
                        "Place a bid on an open auction",
                        "- `amount` to bid (in the seller's requested payment asset)"
                      ]
                    },
                    {
                      "name": "cancel_sale",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": [
                        "Close a sale or auction returning tokens",
                        "Requires no successful bids have been made for an auction.",
                        "Caller must be the listed seller"
                      ]
                    },
                    {
                      "name": "update_fixed_price",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "new_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": [
                        "Update fixed price for a single token sale",
                        "",
                        "`listing_id` id of the fixed price listing",
                        "`new_price` new fixed price",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "make_simple_offer",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": [
                        "Create an offer on a token",
                        "Locks funds until offer is accepted, rejected or cancelled",
                        "An offer can't be made on a token currently in an auction",
                        "(This follows the behaviour of Opensea and forces the buyer to bid rather than create an",
                        "offer)"
                      ]
                    },
                    {
                      "name": "cancel_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": [
                        "Cancels an offer on a token",
                        "Caller must be the offer buyer"
                      ]
                    },
                    {
                      "name": "accept_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": [
                        "Accepts an offer on a token",
                        "Caller must be token owner"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "228",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "submit_transaction",
                      "fields": [
                        {
                          "name": "ledger_index",
                          "type": "8",
                          "typeName": "LedgerIndex",
                          "docs": []
                        },
                        {
                          "name": "transaction_hash",
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        },
                        {
                          "name": "transaction",
                          "type": "229",
                          "typeName": "XrplTxData",
                          "docs": []
                        },
                        {
                          "name": "timestamp",
                          "type": "8",
                          "typeName": "Timestamp",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Submit xrp transaction"
                      ]
                    },
                    {
                      "name": "submit_challenge",
                      "fields": [
                        {
                          "name": "transaction_hash",
                          "type": "86",
                          "typeName": "XrplTxHash",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Submit xrp transaction challenge"
                      ]
                    },
                    {
                      "name": "withdraw_xrp",
                      "fields": [
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "XrplAccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Withdraw xrp transaction"
                      ]
                    },
                    {
                      "name": "add_relayer",
                      "fields": [
                        {
                          "name": "relayer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "add a relayer"
                      ]
                    },
                    {
                      "name": "remove_relayer",
                      "fields": [
                        {
                          "name": "relayer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "remove a relayer"
                      ]
                    },
                    {
                      "name": "set_door_tx_fee",
                      "fields": [
                        {
                          "name": "fee",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Set the door tx fee amount"
                      ]
                    },
                    {
                      "name": "set_door_address",
                      "fields": [
                        {
                          "name": "door_address",
                          "type": "88",
                          "typeName": "XrplAccountId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Set XRPL door address managed by this pallet"
                      ]
                    },
                    {
                      "name": "set_ticket_sequence_next_allocation",
                      "fields": [
                        {
                          "name": "start_ticket_sequence",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ticket_bucket_size",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Set the door account ticket sequence params for the next allocation"
                      ]
                    },
                    {
                      "name": "set_ticket_sequence_current_allocation",
                      "fields": [
                        {
                          "name": "ticket_sequence",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "start_ticket_sequence",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ticket_bucket_size",
                          "type": "4",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Set the door account current ticket sequence params for current allocation - force set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "229",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "helpers",
                "XrplTxData"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Payment",
                      "fields": [
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "CurrencyPayment",
                      "fields": [
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": "9",
                          "typeName": "H256",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Xls20",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "230",
            "type": {
              "path": [
                "pallet_token_approvals",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "erc721_approval",
                      "fields": [
                        {
                          "name": "caller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "operator_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Set approval for a single NFT",
                        "Mapping from token_id to operator",
                        "clears approval on transfer",
                        "mapping(uint256 => address) private _tokenApprovals;"
                      ]
                    },
                    {
                      "name": "erc721_remove_approval",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Public method which allows users to remove approvals on a token they own"
                      ]
                    },
                    {
                      "name": "erc20_approval",
                      "fields": [
                        {
                          "name": "caller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "spender",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Set approval for an account to transfer an amount of tokens on behalf of the caller",
                        "Mapping from caller to spender and amount",
                        "mapping(address => mapping(address => uint256)) private _allowances;"
                      ]
                    },
                    {
                      "name": "erc20_update_approval",
                      "fields": [
                        {
                          "name": "caller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "spender",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Removes an approval over an account and asset_id",
                        "mapping(address => mapping(address => uint256)) private _allowances;"
                      ]
                    },
                    {
                      "name": "erc721_approval_for_all",
                      "fields": [
                        {
                          "name": "caller",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "operator_account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collection_uuid",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "approved",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Set approval for an account (or contract) to transfer any tokens from a collection",
                        "mapping(address => mapping(address => bool)) private _operatorApprovals;"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "231",
            "type": {
              "path": [
                "pallet_echo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ping",
                      "fields": [
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Ping extrinsic sends an event to the bridge containing a message"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "232",
            "type": {
              "path": [
                "pallet_marketplace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "register_marketplace",
                      "fields": [
                        {
                          "name": "marketplace_account",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "entitlement",
                          "type": "79",
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Flag an account as a marketplace",
                        "",
                        "`marketplace_account` - if specified, this account will be registered",
                        "`entitlement` - Permill, percentage of sales to go to the marketplace",
                        "If no marketplace is specified the caller will be registered"
                      ]
                    },
                    {
                      "name": "sell_nft",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "buyer",
                          "type": "66",
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "fixed_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": "72",
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Sell a bundle of tokens at a fixed price",
                        "- Tokens must be from the same collection",
                        "- Tokens with individual royalties schedules cannot be sold with this method",
                        "",
                        "`buyer` optionally, the account to receive the NFT. If unspecified, then any account may",
                        "purchase `asset_id` fungible asset Id to receive as payment for the NFT",
                        "`fixed_price` ask price",
                        "`duration` listing duration time in blocks from now",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "update_fixed_price",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "new_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Update fixed price for a single token sale",
                        "",
                        "`listing_id` id of the fixed price listing",
                        "`new_price` new fixed price",
                        "Caller must be the token owner"
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Buy a token listing for its specified price"
                      ]
                    },
                    {
                      "name": "auction_nft",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "82",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerCollection>",
                          "docs": []
                        },
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "reserve_price",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": "72",
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Auction a bundle of tokens on the open market to the highest bidder",
                        "- Tokens must be from the same collection",
                        "- Tokens with individual royalties schedules cannot be sold in bundles",
                        "",
                        "Caller must be the token owner",
                        "- `payment_asset` fungible asset Id to receive payment with",
                        "- `reserve_price` winning bid must be over this threshold",
                        "- `duration` length of the auction (in blocks), uses default duration if unspecified"
                      ]
                    },
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Place a bid on an open auction",
                        "- `amount` to bid (in the seller's requested payment asset)"
                      ]
                    },
                    {
                      "name": "cancel_sale",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Close a sale or auction returning tokens",
                        "Requires no successful bids have been made for an auction.",
                        "Caller must be the listed seller"
                      ]
                    },
                    {
                      "name": "make_simple_offer",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": "29",
                          "typeName": "TokenId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": "72",
                          "typeName": "Option<MarketplaceId>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Create an offer on a token",
                        "Locks funds until offer is accepted, rejected or cancelled",
                        "An offer can't be made on a token currently in an auction",
                        "(This follows the behaviour of Opensea and forces the buyer to bid rather than create an",
                        "offer)"
                      ]
                    },
                    {
                      "name": "cancel_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Cancels an offer on a token",
                        "Caller must be the offer buyer"
                      ]
                    },
                    {
                      "name": "accept_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": "8",
                          "typeName": "OfferId",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Accepts an offer on a token",
                        "Caller must be token owner"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "233",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "submit_unsigned",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": "234",
                          "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": "287",
                          "typeName": "SolutionOrSnapshotSize",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Submit a solution for the unsigned phase.",
                        "",
                        "The dispatch origin fo this call must be __none__.",
                        "",
                        "This submission is checked on the fly. Moreover, this unsigned solution is only",
                        "validated when submitted to the pool from the **local** node. Effectively, this means",
                        "that only active validators can submit this transaction when authoring a block (similar",
                        "to an inherent).",
                        "",
                        "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                        "panic if the solution submitted by the validator is invalid in any way, effectively",
                        "putting their authoring reward at risk.",
                        "",
                        "No deposit or reward is associated with this submission."
                      ]
                    },
                    {
                      "name": "set_minimum_untrusted_score",
                      "fields": [
                        {
                          "name": "maybe_next_score",
                          "type": "288",
                          "typeName": "Option<ElectionScore>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Set a new value for `MinimumUntrustedScore`.",
                        "",
                        "Dispatch origin must be aligned with `T::ForceOrigin`.",
                        "",
                        "This check can be turned off by setting the value to `None`."
                      ]
                    },
                    {
                      "name": "set_emergency_election_result",
                      "fields": [
                        {
                          "name": "supports",
                          "type": "289",
                          "typeName": "Supports<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                        "call to `ElectionProvider::elect`.",
                        "",
                        "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                        "",
                        "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                        "feasibility check itself can in principle cause the election process to fail (due to",
                        "memory/weight constrains)."
                      ]
                    },
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": "234",
                          "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Submit a solution for the signed phase.",
                        "",
                        "The dispatch origin fo this call must be __signed__.",
                        "",
                        "The solution is potentially queued, based on the claimed score and processed at the end",
                        "of the signed phase.",
                        "",
                        "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                        "might be rewarded, slashed, or get all or a part of the deposit back."
                      ]
                    },
                    {
                      "name": "governance_fallback",
                      "fields": [
                        {
                          "name": "maybe_max_voters",
                          "type": "72",
                          "typeName": "Option<u32>",
                          "docs": []
                        },
                        {
                          "name": "maybe_max_targets",
                          "type": "72",
                          "typeName": "Option<u32>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Trigger the governance fallback.",
                        "",
                        "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                        "calling [`Call::set_emergency_election_result`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "234",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
              ],
              "params": [
                {
                  "name": "S",
                  "type": "235"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "solution",
                      "type": "235",
                      "typeName": "S",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "type": "286",
                      "typeName": "ElectionScore",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "235",
            "type": {
              "path": [
                "seed_runtime",
                "NposCompactSolution16"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "votes1",
                      "type": "236",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes2",
                      "type": "239",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes3",
                      "type": "244",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes4",
                      "type": "247",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes5",
                      "type": "250",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes6",
                      "type": "253",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes7",
                      "type": "256",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes8",
                      "type": "259",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes9",
                      "type": "262",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes10",
                      "type": "265",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes11",
                      "type": "268",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes12",
                      "type": "271",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes13",
                      "type": "274",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes14",
                      "type": "277",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes15",
                      "type": "280",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": "votes16",
                      "type": "283",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "236",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "237"
                }
              },
              "docs": []
            }
          },
          {
            "id": "237",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "238",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "126"
                }
              },
              "docs": []
            }
          },
          {
            "id": "239",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "240"
                }
              },
              "docs": []
            }
          },
          {
            "id": "240",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "241",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "241",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "238",
                  "242"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "242",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Compact": {
                  "type": "243"
                }
              },
              "docs": []
            }
          },
          {
            "id": "243",
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "126",
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "244",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "245"
                }
              },
              "docs": []
            }
          },
          {
            "id": "245",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "246",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "246",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "2",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "247",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "248"
                }
              },
              "docs": []
            }
          },
          {
            "id": "248",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "249",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "249",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "3",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "250",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "251"
                }
              },
              "docs": []
            }
          },
          {
            "id": "251",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "252",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "252",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "4",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "253",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "254"
                }
              },
              "docs": []
            }
          },
          {
            "id": "254",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "255",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "255",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "5",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "256",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "257"
                }
              },
              "docs": []
            }
          },
          {
            "id": "257",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "258",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "258",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "6",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "259",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "260"
                }
              },
              "docs": []
            }
          },
          {
            "id": "260",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "261",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "261",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "7",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "262",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "263"
                }
              },
              "docs": []
            }
          },
          {
            "id": "263",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "264",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "264",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "8",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "265",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "266"
                }
              },
              "docs": []
            }
          },
          {
            "id": "266",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "267",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "267",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "9",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "268",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "269"
                }
              },
              "docs": []
            }
          },
          {
            "id": "269",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "270",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "270",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "10",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "271",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "272"
                }
              },
              "docs": []
            }
          },
          {
            "id": "272",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "273",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "273",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "11",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "274",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "275"
                }
              },
              "docs": []
            }
          },
          {
            "id": "275",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "276",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "276",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "12",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "277",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "278"
                }
              },
              "docs": []
            }
          },
          {
            "id": "278",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "279",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "279",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "13",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "280",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "281"
                }
              },
              "docs": []
            }
          },
          {
            "id": "281",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "282",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "282",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "14",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "283",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "284"
                }
              },
              "docs": []
            }
          },
          {
            "id": "284",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "131",
                  "285",
                  "238"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "285",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "15",
                  "type": "241"
                }
              },
              "docs": []
            }
          },
          {
            "id": "286",
            "type": {
              "path": [
                "sp_npos_elections",
                "ElectionScore"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "minimal_stake",
                      "type": "6",
                      "typeName": "ExtendedBalance",
                      "docs": []
                    },
                    {
                      "name": "sum_stake",
                      "type": "6",
                      "typeName": "ExtendedBalance",
                      "docs": []
                    },
                    {
                      "name": "sum_stake_squared",
                      "type": "6",
                      "typeName": "ExtendedBalance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "287",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": "131",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "targets",
                      "type": "131",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "288",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "286"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "286",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "289",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "290"
                }
              },
              "docs": []
            }
          },
          {
            "id": "290",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "291"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "291",
            "type": {
              "path": [
                "sp_npos_elections",
                "Support"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": "6",
                      "typeName": "ExtendedBalance",
                      "docs": []
                    },
                    {
                      "name": "voters",
                      "type": "42",
                      "typeName": "Vec<(AccountId, ExtendedBalance)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "292",
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "rebag",
                      "fields": [
                        {
                          "name": "dislocated",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                        "changed its score that it should properly fall into a different bag than its current",
                        "one.",
                        "",
                        "Anyone can call this function about any potentially dislocated account.",
                        "",
                        "Will always update the stored score of `dislocated` to the correct score, based on",
                        "`ScoreProvider`.",
                        "",
                        "If `dislocated` does not exists, it returns an error."
                      ]
                    },
                    {
                      "name": "put_in_front_of",
                      "fields": [
                        {
                          "name": "lighter",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Move the caller's Id directly in front of `lighter`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                        "the account going in front of `lighter`.",
                        "",
                        "Only works if",
                        "- both nodes are within the same bag,",
                        "- and `origin` has a greater `Score` than `lighter`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "293",
            "type": {
              "path": [
                "pallet_ethy",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_xrpl_door_signers",
                      "fields": [
                        {
                          "name": "new_signers",
                          "type": "294",
                          "typeName": "Vec<T::EthyId>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "set_relayer",
                      "fields": [
                        {
                          "name": "relayer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "deposit_relayer_bond",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "withdraw_relayer_bond",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "set_event_block_confirmations",
                      "fields": [
                        {
                          "name": "confirmations",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "set_delayed_event_proofs_per_block",
                      "fields": [
                        {
                          "name": "count",
                          "type": "2",
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "set_challenge_period",
                      "fields": [
                        {
                          "name": "blocks",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "set_contract_address",
                      "fields": [
                        {
                          "name": "contract_address",
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "set_bridge_paused",
                      "fields": [
                        {
                          "name": "paused",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "finalise_authorities_change",
                      "fields": [
                        {
                          "name": "next_notary_keys",
                          "type": "294",
                          "typeName": "Vec<T::EthyId>",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "submit_event",
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": "9",
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "event",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": []
                    },
                    {
                      "name": "submit_challenge",
                      "fields": [
                        {
                          "name": "event_claim_id",
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": []
                    },
                    {
                      "name": "submit_notarization",
                      "fields": [
                        {
                          "name": "payload",
                          "type": "295",
                          "typeName": "NotarizationPayload",
                          "docs": []
                        },
                        {
                          "name": "_signature",
                          "type": "298",
                          "typeName": "<<T as Config>::EthyId as RuntimeAppPublic>::Signature",
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchable calls.",
                "",
                "Each variant of this enum maps to a dispatchable function from the associated module."
              ]
            }
          },
          {
            "id": "294",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "203"
                }
              },
              "docs": []
            }
          },
          {
            "id": "295",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "NotarizationPayload"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": "call_id",
                          "type": "8",
                          "typeName": "EthCallId",
                          "docs": []
                        },
                        {
                          "name": "authority_index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": "296",
                          "typeName": "CheckedEthCallResult",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Event",
                      "fields": [
                        {
                          "name": "event_claim_id",
                          "type": "8",
                          "typeName": "EventClaimId",
                          "docs": []
                        },
                        {
                          "name": "authority_index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": "297",
                          "typeName": "EventClaimResult",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "296",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "CheckedEthCallResult"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": "10",
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "ReturnDataExceedsLimit",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "ReturnDataEmpty",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "DataProviderErr",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "InvalidEthBlock",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "InvalidTimestamp",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "297",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "EventClaimResult"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Valid",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "DataProviderErr",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "TxStatusFailed",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "UnexpectedContractAddress",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "NoTxLogs",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "NotEnoughConfirmations",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "UnexpectedData",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "NoTxReceipt",
                      "fields": [],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "UnexpectedSource",
                      "fields": [],
                      "index": "8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "298",
            "type": {
              "path": [
                "seed_primitives",
                "ethy",
                "crypto",
                "app_crypto",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "299",
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "299",
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "300",
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "300",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "65",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "301",
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": "302",
                          "typeName": "Transaction",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "302",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": "303",
                          "typeName": "LegacyTransaction",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": "309",
                          "typeName": "EIP2930Transaction",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": "312",
                          "typeName": "EIP1559Transaction",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "303",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": "306",
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": "11",
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": "307",
                      "typeName": "TransactionSignature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "304",
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "305",
                      "typeName": "[u64; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "305",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "4",
                  "type": "8"
                }
              },
              "docs": []
            }
          },
          {
            "id": "306",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Create",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "307",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": "308",
                      "typeName": "TransactionRecoveryId",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "308",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "309",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": "306",
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": "11",
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": "310",
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "310",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "311"
                }
              },
              "docs": []
            }
          },
          {
            "id": "311",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": "88",
                      "typeName": "Address",
                      "docs": []
                    },
                    {
                      "name": "storage_keys",
                      "type": "109",
                      "typeName": "Vec<H256>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "312",
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": "306",
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": "11",
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": "310",
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "313",
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "6",
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": "315",
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": "315",
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": "11",
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "salt",
                          "type": "9",
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": "8",
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": "314",
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": "315",
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "314",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "304"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "304",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "315",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "316"
                }
              },
              "docs": []
            }
          },
          {
            "id": "316",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "88",
                  "109"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "317",
            "type": {
              "path": [
                "pallet_evm_chain_id",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_chain_id",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": "171",
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "318",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "activate_deposits",
                      "fields": [
                        {
                          "name": "activate",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Activate/deactivate deposits (root only)"
                      ]
                    },
                    {
                      "name": "activate_withdrawals",
                      "fields": [
                        {
                          "name": "activate",
                          "type": "39",
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Activate/deactivate withdrawals (root only)"
                      ]
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "set_contract_address",
                      "fields": [
                        {
                          "name": "eth_address",
                          "type": "88",
                          "typeName": "EthAddress",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "set_erc20_meta",
                      "fields": [
                        {
                          "name": "details",
                          "type": "319",
                          "typeName": "Vec<(EthAddress, Vec<u8>, u8)>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "set_payment_delay",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchable calls.",
                "",
                "Each variant of this enum maps to a dispatchable function from the associated module."
              ]
            }
          },
          {
            "id": "319",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "320"
                }
              },
              "docs": []
            }
          },
          {
            "id": "320",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "88",
                  "11",
                  "2"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "321",
            "type": {
              "path": [
                "pallet_nft_peg",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_contract_address",
                      "fields": [
                        {
                          "name": "contract",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "collection_ids",
                          "type": "114",
                          "typeName": "BoundedVec<CollectionUuid, T::MaxCollectionsPerWithdraw>",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "115",
                          "typeName": "BoundedVec<BoundedVec<SerialNumber, T::MaxSerialsPerWithdraw>, T::\nMaxCollectionsPerWithdraw,>",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": "88",
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "322",
            "type": {
              "path": [
                "pallet_fee_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "call_with_fee_preferences",
                      "fields": [
                        {
                          "name": "payment_asset",
                          "type": "4",
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "max_payment",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Call an internal call with specified gas token",
                        "payment_asset: The token to be used for paying gas fees. This is exchanged in",
                        "               OnChargeTransaction::withdraw_fee()",
                        "max_payment: The limit of how many tokens will be used to perform the exchange",
                        "call: The inner call to be performed after the exchange"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "323",
            "type": {
              "path": [
                "pallet_fee_control",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_evm_base_fee",
                      "fields": [
                        {
                          "name": "value",
                          "type": "304",
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "set_weight_multiplier",
                      "fields": [
                        {
                          "name": "value",
                          "type": "47",
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "324",
            "type": {
              "path": [
                "pallet_xls20",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_relayer",
                      "fields": [
                        {
                          "name": "relayer",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Set the relayer address"
                      ]
                    },
                    {
                      "name": "set_xls20_fee",
                      "fields": [
                        {
                          "name": "new_fee",
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Set the xls20 mint fee which is paid per token by the collection owner",
                        "This covers the additional costs incurred by the relayer for the following:",
                        " - Minting the token on XRPL",
                        " - Calling fulfill_xls20_mint on The Root Network"
                      ]
                    },
                    {
                      "name": "enable_xls20_compatibility",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Enables XLS-20 compatibility on a collection",
                        " - Collection must not have any tokens minted",
                        " - Caller must be collection owner"
                      ]
                    },
                    {
                      "name": "re_request_xls20_mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "serial_numbers",
                          "type": "325",
                          "typeName": "BoundedVec<SerialNumber, T::MaxTokensPerXls20Mint>",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "fulfill_xls20_mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": "4",
                          "typeName": "CollectionUuid",
                          "docs": []
                        },
                        {
                          "name": "token_mappings",
                          "type": "326",
                          "typeName": "BoundedVec<(SerialNumber, Xls20TokenId), T::MaxTokensPerXls20Mint>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Submit XLS-20 token ids to The Root Network",
                        "Only callable by the trusted relayer account",
                        "Can apply multiple mappings from the same collection in one transaction"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "325",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "69",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "326",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "123"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "122",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "327",
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": "328",
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": "126",
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "height",
                          "type": "131",
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "ext_index",
                          "type": "131",
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": "9",
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": "9",
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": "9",
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "real",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": "328",
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "328",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "125"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "125",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "329",
            "type": {
              "path": [
                "pallet_futurepass",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "account",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "Create a futurepass account for the delegator that is able to make calls on behalf of",
                        "futurepass.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The delegated account for the futurepass."
                      ]
                    },
                    {
                      "name": "register_delegate",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": "125",
                          "typeName": "T::ProxyType",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": [
                        "Register a delegator to an existing futurepass account.",
                        "Note: Only futurepass owner account can add more delegates.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `futurepass`: Futurepass account to register the account as delegate.",
                        "- `proxy_type`: Delegate permission level",
                        "- `delegate`: The delegated account for the futurepass.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unregister_delegate",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": [
                        "Unregister a delegate from a futurepass account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `futurepass`: Futurepass account to unregister the delegate from.",
                        "- `delegate`: The delegated account for the futurepass. Note: if caller is futurepass",
                        "  holder onwer,",
                        "they can remove any delegate (including themselves); otherwise the caller must be the",
                        "delegate (can only remove themself).",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_futurepass",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": [
                        "Transfer ownership of a futurepass to a new account.",
                        "The new owner must not already own a futurepass.",
                        "This removes all delegates from the futurepass.",
                        "The new owner will be the only delegate; they can add more delegates.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be the current owner of the",
                        "futurepass.",
                        "",
                        "Parameters:",
                        "- `new_owner`: The new account that will become the owner of the futurepass."
                      ]
                    },
                    {
                      "name": "proxy_extrinsic",
                      "fields": [
                        {
                          "name": "futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": "176",
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": [
                        "Dispatch the given call through Futurepass account. Transaction fees will be paid by the",
                        "Futurepass The dispatch origin for this call must be _Signed_",
                        "",
                        "Parameters:",
                        "- `futurepass`: The Futurepass account though which the call is dispatched",
                        "- `call`: The Call that needs to be dispatched through the Futurepass account",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_futurepass_migrator",
                      "fields": [
                        {
                          "name": "migrator",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": [
                        "Update futurepass native assets migrator admin account.",
                        "",
                        "The dispatch origin for this call must be sudo/root origin.",
                        "",
                        "Parameters:",
                        "- `migrator`: The new account that will become the futurepass asset migrator."
                      ]
                    },
                    {
                      "name": "migrate_evm_futurepass",
                      "fields": [
                        {
                          "name": "owner",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "evm_futurepass",
                          "type": "0",
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset_ids",
                          "type": "69",
                          "typeName": "Vec<u32>",
                          "docs": []
                        },
                        {
                          "name": "collection_ids",
                          "type": "69",
                          "typeName": "Vec<u32>",
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": [
                        "This extrinsic migrates EVM-based Futurepass assets to the Substrate-based Futurepass",
                        "(native).",
                        "",
                        "Parameters:",
                        "- `owner` - The account ID of the owner of the EVM-based Futurepass.",
                        "- `evm_futurepass` - The account ID of the EVM-based Futurepass.",
                        "- `asset_ids` - A vector of asset IDs representing the assets to be migrated.",
                        "- `collection_ids` - A vector of collection IDs representing the NFTs collections to be",
                        "  migrated.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of collections migrated; not the tokens migrated.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": "330",
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "331",
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "332",
            "type": {
              "path": [
                "pallet_recovery",
                "RecoveryConfig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": "4"
                },
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "Friends",
                  "type": "333"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": "4",
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": "333",
                      "typeName": "Friends",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": "126",
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "333",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "0"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "186",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "334",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "0"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "335",
            "type": {
              "path": [
                "pallet_recovery",
                "ActiveRecovery"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": "4"
                },
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "Friends",
                  "type": "333"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": "4",
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": "333",
                      "typeName": "Friends",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "336",
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "User is not allowed to make a call on behalf of this account"
                      ]
                    },
                    {
                      "name": "ZeroThreshold",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Threshold must be greater than zero"
                      ]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Friends list must be greater than zero and threshold"
                      ]
                    },
                    {
                      "name": "MaxFriends",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Friends list must be less than max friends"
                      ]
                    },
                    {
                      "name": "NotSorted",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Friends list must be sorted and free of duplicates"
                      ]
                    },
                    {
                      "name": "NotRecoverable",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "This account is not set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyStarted",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "A recovery process has already started for this account"
                      ]
                    },
                    {
                      "name": "NotStarted",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "A recovery process has not started for this rescuer"
                      ]
                    },
                    {
                      "name": "NotFriend",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "This account is not a friend who can vouch"
                      ]
                    },
                    {
                      "name": "DelayPeriod",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "The friend must wait until the delay period to vouch for this recovery"
                      ]
                    },
                    {
                      "name": "AlreadyVouched",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "This user has already vouched for this recovery"
                      ]
                    },
                    {
                      "name": "Threshold",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "The threshold for recovering this account has not been met"
                      ]
                    },
                    {
                      "name": "StillActive",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "There are still active recovery attempts that need to be closed"
                      ]
                    },
                    {
                      "name": "AlreadyProxy",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [],
                      "index": "15",
                      "docs": [
                        "Some internal state is broken."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "337",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "338"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "340",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "338",
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": "41",
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": "339",
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "339",
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "340",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "338"
                }
              },
              "docs": []
            }
          },
          {
            "id": "341",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "342"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "343",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "342",
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": "41"
                },
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": "41",
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "343",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "342"
                }
              },
              "docs": []
            }
          },
          {
            "id": "344",
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "345",
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "346",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "DepositBalance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "supply",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "accounts",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "347",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "0"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "348",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "DepositBalance",
                  "type": "6"
                },
                {
                  "name": "Extra",
                  "type": "32"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "reason",
                      "type": "349",
                      "typeName": "ExistenceReason<DepositBalance>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "type": "32",
                      "typeName": "Extra",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "349",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Sufficient",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "DepositRefunded",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "350",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "0",
                  "0"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "351",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "DepositBalance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "DepositBalance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "352",
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": "6"
                },
                {
                  "name": "BoundedString",
                  "type": "353"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": "353",
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "type": "353",
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "type": "2",
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "353",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "2"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "354",
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "355",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "356"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "357",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "356",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "41",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "357",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "356"
                }
              },
              "docs": []
            }
          },
          {
            "id": "358",
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "41",
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "359",
            "type": {
              "path": [
                "pallet_assets_ext",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoAvailableIds",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "No more Ids are available, they've been exhausted"
                      ]
                    },
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Hold balance is less then the required amount"
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The account to alter does not exist"
                      ]
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Operation would overflow"
                      ]
                    },
                    {
                      "name": "MaxHolds",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Maximum holds placed on this asset/account pair"
                      ]
                    },
                    {
                      "name": "CreateAssetFailed",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Failed to create a new asset"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "360",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "361"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "362",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "361",
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": "4"
                },
                {
                  "name": "Hash",
                  "type": "9"
                },
                {
                  "name": "Author",
                  "type": "0"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "name": null,
                          "type": "4",
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "name": null,
                          "type": "9",
                          "typeName": "Hash",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": "66",
                          "typeName": "Option<Author>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "362",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "361"
                }
              },
              "docs": []
            }
          },
          {
            "id": "363",
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "364",
            "type": {
              "path": [
                "pallet_staking",
                "StakingLedger"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "stash",
                      "type": "0",
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": "62",
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "active",
                      "type": "62",
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "unlocking",
                      "type": "365",
                      "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, MaxUnlockingChunks>",
                      "docs": []
                    },
                    {
                      "name": "claimed_rewards",
                      "type": "69",
                      "typeName": "Vec<EraIndex>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "365",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "366"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "367",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "366",
            "type": {
              "path": [
                "pallet_staking",
                "UnlockChunk"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": "62",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "type": "131",
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "367",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "366"
                }
              },
              "docs": []
            }
          },
          {
            "id": "368",
            "type": {
              "path": [
                "pallet_staking",
                "Nominations"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "targets",
                      "type": "369",
                      "typeName": "BoundedVec<T::AccountId, T::MaxNominations>",
                      "docs": []
                    },
                    {
                      "name": "submitted_in",
                      "type": "4",
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "suppressed",
                      "type": "39",
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "369",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "0"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "186",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "370",
            "type": {
              "path": [
                "pallet_staking",
                "ActiveEraInfo"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": "4",
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "start",
                      "type": "138",
                      "typeName": "Option<u64>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "371",
            "type": {
              "path": [
                "pallet_staking",
                "EraRewardPoints"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": "4",
                      "typeName": "RewardPoint",
                      "docs": []
                    },
                    {
                      "name": "individual",
                      "type": "372",
                      "typeName": "BTreeMap<AccountId, RewardPoint>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "372",
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": "0"
                },
                {
                  "name": "V",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "373",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "373",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "374"
                }
              },
              "docs": []
            }
          },
          {
            "id": "374",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "375",
            "type": {
              "path": [
                "pallet_staking",
                "Forcing"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotForcing",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "ForceNew",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "ForceNone",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "ForceAlways",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "376",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "377"
                }
              },
              "docs": []
            }
          },
          {
            "id": "377",
            "type": {
              "path": [
                "pallet_staking",
                "UnappliedSlash"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "own",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "others",
                      "type": "42",
                      "typeName": "Vec<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "reporters",
                      "type": "186",
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "378",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "47",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "379",
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SlashingSpans"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "span_index",
                      "type": "4",
                      "typeName": "SpanIndex",
                      "docs": []
                    },
                    {
                      "name": "last_start",
                      "type": "4",
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "last_nonzero_slash",
                      "type": "4",
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "type": "69",
                      "typeName": "Vec<EraIndex>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "380",
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SpanRecord"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": "6"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "slashed",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "paid_out",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "381",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "382"
                }
              },
              "docs": []
            }
          },
          {
            "id": "382",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "39"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "383",
            "type": {
              "path": [
                "pallet_staking",
                "Releases"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1_0_0Ancient",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "V3_0_0",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "V4_0_0",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "V5_0_0",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "V6_0_0",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "V7_0_0",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "V8_0_0",
                      "fields": [],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "V9_0_0",
                      "fields": [],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "V10_0_0",
                      "fields": [],
                      "index": "9",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "384",
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotController",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Not a controller account."
                      ]
                    },
                    {
                      "name": "NotStash",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Not a stash account."
                      ]
                    },
                    {
                      "name": "AlreadyBonded",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Stash is already bonded."
                      ]
                    },
                    {
                      "name": "AlreadyPaired",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Controller is already paired."
                      ]
                    },
                    {
                      "name": "EmptyTargets",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Targets cannot be empty."
                      ]
                    },
                    {
                      "name": "DuplicateIndex",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Duplicate index."
                      ]
                    },
                    {
                      "name": "InvalidSlashIndex",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Slash record index out of bounds."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Cannot have a validator or nominator role, with value less than the minimum defined by",
                        "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                        "intention, `chill` first to remove one's role as validator/nominator."
                      ]
                    },
                    {
                      "name": "NoMoreChunks",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Can not schedule more unlock chunks."
                      ]
                    },
                    {
                      "name": "NoUnlockChunk",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "Can not rebond without unlocking chunks."
                      ]
                    },
                    {
                      "name": "FundedTarget",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "Attempting to target a stash that still has funds."
                      ]
                    },
                    {
                      "name": "InvalidEraToReward",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "Invalid era to reward."
                      ]
                    },
                    {
                      "name": "InvalidNumberOfNominations",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "Invalid number of nominations."
                      ]
                    },
                    {
                      "name": "NotSortedAndUnique",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "Items are not sorted and unique."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "Rewards for this era have already been claimed for this validator."
                      ]
                    },
                    {
                      "name": "IncorrectHistoryDepth",
                      "fields": [],
                      "index": "15",
                      "docs": [
                        "Incorrect previous history depth input provided."
                      ]
                    },
                    {
                      "name": "IncorrectSlashingSpans",
                      "fields": [],
                      "index": "16",
                      "docs": [
                        "Incorrect number of slashing spans provided."
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [],
                      "index": "17",
                      "docs": [
                        "Internal state has become somehow corrupted and the operation cannot continue."
                      ]
                    },
                    {
                      "name": "TooManyTargets",
                      "fields": [],
                      "index": "18",
                      "docs": [
                        "Too many nomination targets supplied."
                      ]
                    },
                    {
                      "name": "BadTarget",
                      "fields": [],
                      "index": "19",
                      "docs": [
                        "A nomination target was supplied that was blocked or otherwise not a validator."
                      ]
                    },
                    {
                      "name": "CannotChillOther",
                      "fields": [],
                      "index": "20",
                      "docs": [
                        "The user has enough bond and thus cannot be chilled forcefully by an external person."
                      ]
                    },
                    {
                      "name": "TooManyNominators",
                      "fields": [],
                      "index": "21",
                      "docs": [
                        "There are too many nominators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "TooManyValidators",
                      "fields": [],
                      "index": "22",
                      "docs": [
                        "There are too many validators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "CommissionTooLow",
                      "fields": [],
                      "index": "23",
                      "docs": [
                        "Commission is too low. Must be at least `MinCommission`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "385",
            "type": {
              "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Reporter",
                  "type": "0"
                },
                {
                  "name": "Offender",
                  "type": "60"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": "60",
                      "typeName": "Offender",
                      "docs": []
                    },
                    {
                      "name": "reporters",
                      "type": "186",
                      "typeName": "Vec<Reporter>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "386",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "49",
                  "11"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "387",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "388"
                }
              },
              "docs": []
            }
          },
          {
            "id": "388",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "202"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "389",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "390",
                  "11"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "390",
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "15",
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "391",
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": "392",
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": "4",
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": "4",
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": "4",
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "393",
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": "4"
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": "4",
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": "4",
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "next_authorities",
                      "type": "394",
                      "typeName": "BoundedAuthorityList<Limit>",
                      "docs": []
                    },
                    {
                      "name": "forced",
                      "type": "72",
                      "typeName": "Option<N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "394",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "53"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "52",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "395",
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "396",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "57"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "397",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "397",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "57"
                }
              },
              "docs": []
            }
          },
          {
            "id": "398",
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "399"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "131",
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": "399",
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "399",
            "type": {
              "path": [
                "pallet_im_online",
                "BoundedOpaqueNetworkState"
              ],
              "params": [
                {
                  "name": "PeerIdEncodingLimit",
                  "type": null
                },
                {
                  "name": "MultiAddrEncodingLimit",
                  "type": null
                },
                {
                  "name": "AddressesLimit",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": "400",
                      "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
                      "docs": []
                    },
                    {
                      "name": "external_addresses",
                      "type": "401",
                      "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "400",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "2"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "401",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "400"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "402",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "402",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "400"
                }
              },
              "docs": []
            }
          },
          {
            "id": "403",
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidKey",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Non existent public key."
                      ]
                    },
                    {
                      "name": "DuplicatedHeartbeat",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Duplicated heartbeat."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "404",
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": "405",
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "6",
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "406",
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "407",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "6",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "408",
            "type": {
              "path": [
                "pallet_dex",
                "TradingPairStatus"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotEnabled",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Enabled",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "409",
            "type": {
              "path": [
                "pallet_dex",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "MustBeEnabled",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Trading pair must be in Enabled status"
                      ]
                    },
                    {
                      "name": "MustBeNotEnabled",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Trading pair must be in NotEnabled status"
                      ]
                    },
                    {
                      "name": "InsufficientInputAmount",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Insufficient input amount"
                      ]
                    },
                    {
                      "name": "InvalidInputAmounts",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Must provide non-zero amount of liquidity"
                      ]
                    },
                    {
                      "name": "InsufficientAmount",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Insufficent amount"
                      ]
                    },
                    {
                      "name": "InsufficientAmountA",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Insufficient asset_a liquidity amount"
                      ]
                    },
                    {
                      "name": "InsufficientAmountB",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Insufficient asset_b liquidity amount"
                      ]
                    },
                    {
                      "name": "InsufficientLiquidityBurnt",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Insufficient liquidity burnt"
                      ]
                    },
                    {
                      "name": "InsufficientWithdrawnAmountA",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Insufficient withdraw amount for token A"
                      ]
                    },
                    {
                      "name": "InsufficientWithdrawnAmountB",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "Insufficient withdraw amount for token B"
                      ]
                    },
                    {
                      "name": "InsufficientOutputAmount",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "Insufficient output amount"
                      ]
                    },
                    {
                      "name": "InvalidLiquidityIncrement",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "The increment of liquidity is invalid"
                      ]
                    },
                    {
                      "name": "InvalidConstantProduct",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "Invalid constant product K"
                      ]
                    },
                    {
                      "name": "IdenticalTokenAddress",
                      "fields": [],
                      "index": "13",
                      "docs": []
                    },
                    {
                      "name": "InvalidAssetId",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "Invalid Asset id"
                      ]
                    },
                    {
                      "name": "InvalidTradingPathLength",
                      "fields": [],
                      "index": "15",
                      "docs": [
                        "Invalid trading path length"
                      ]
                    },
                    {
                      "name": "InsufficientTargetAmount",
                      "fields": [],
                      "index": "16",
                      "docs": [
                        "Target amount is less to min_target_amount"
                      ]
                    },
                    {
                      "name": "ExcessiveSupplyAmount",
                      "fields": [],
                      "index": "17",
                      "docs": [
                        "Supply amount is more than max_supply_amount"
                      ]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "fields": [],
                      "index": "18",
                      "docs": [
                        "Liquidity is not enough"
                      ]
                    },
                    {
                      "name": "ZeroSupplyAmount",
                      "fields": [],
                      "index": "19",
                      "docs": [
                        "The supply amount is zero"
                      ]
                    },
                    {
                      "name": "ZeroTargetAmount",
                      "fields": [],
                      "index": "20",
                      "docs": [
                        "The target amount is zero"
                      ]
                    },
                    {
                      "name": "UnacceptableShareIncrement",
                      "fields": [],
                      "index": "21",
                      "docs": [
                        "The share increment is unacceptable"
                      ]
                    },
                    {
                      "name": "LiquidityProviderTokenNotCreated",
                      "fields": [],
                      "index": "22",
                      "docs": [
                        "The Liquidity Provider token does not exist"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "410",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "CollectionInformation"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "MaxTokensPerCollection",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": "11",
                      "typeName": "CollectionNameType",
                      "docs": []
                    },
                    {
                      "name": "metadata_scheme",
                      "type": "73",
                      "typeName": "MetadataScheme",
                      "docs": []
                    },
                    {
                      "name": "royalties_schedule",
                      "type": "75",
                      "typeName": "Option<RoyaltiesSchedule<AccountId>>",
                      "docs": []
                    },
                    {
                      "name": "max_issuance",
                      "type": "72",
                      "typeName": "Option<TokenCount>",
                      "docs": []
                    },
                    {
                      "name": "origin_chain",
                      "type": "80",
                      "typeName": "OriginChain",
                      "docs": []
                    },
                    {
                      "name": "next_serial_number",
                      "type": "4",
                      "typeName": "SerialNumber",
                      "docs": []
                    },
                    {
                      "name": "collection_issuance",
                      "type": "4",
                      "typeName": "TokenCount",
                      "docs": []
                    },
                    {
                      "name": "cross_chain_compatibility",
                      "type": "81",
                      "typeName": "CrossChainCompatibility",
                      "docs": []
                    },
                    {
                      "name": "owned_tokens",
                      "type": "411",
                      "typeName": "BoundedVec<TokenOwnership<AccountId, MaxTokensPerCollection>,\nMaxTokensPerCollection>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "411",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "412"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "413",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "412",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "TokenOwnership"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "MaxTokensPerCollection",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "owned_serials",
                      "type": "82",
                      "typeName": "BoundedVec<SerialNumber, MaxTokensPerCollection>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "413",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "412"
                }
              },
              "docs": []
            }
          },
          {
            "id": "414",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "TokenLockReason"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Listed",
                      "fields": [
                        {
                          "name": null,
                          "type": "6",
                          "typeName": "ListingId",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "415",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "Marketplace"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "entitlement",
                      "type": "79",
                      "typeName": "Permill",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "416",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "Listing"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "FixedPrice",
                      "fields": [
                        {
                          "name": null,
                          "type": "417",
                          "typeName": "FixedPriceListing<T>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Auction",
                      "fields": [
                        {
                          "name": null,
                          "type": "418",
                          "typeName": "AuctionListing<T>",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "417",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "FixedPriceListing"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "payment_asset",
                      "type": "4",
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fixed_price",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "close",
                      "type": "4",
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "buyer",
                      "type": "66",
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "seller",
                      "type": "0",
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "collection_id",
                      "type": "4",
                      "typeName": "CollectionUuid",
                      "docs": []
                    },
                    {
                      "name": "serial_numbers",
                      "type": "82",
                      "typeName": "BoundedVec<SerialNumber,<T as Config>::MaxTokensPerCollection>",
                      "docs": []
                    },
                    {
                      "name": "royalties_schedule",
                      "type": "76",
                      "typeName": "RoyaltiesSchedule<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "marketplace_id",
                      "type": "72",
                      "typeName": "Option<MarketplaceId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "418",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "AuctionListing"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "payment_asset",
                      "type": "4",
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "reserve_price",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "close",
                      "type": "4",
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "seller",
                      "type": "0",
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "collection_id",
                      "type": "4",
                      "typeName": "CollectionUuid",
                      "docs": []
                    },
                    {
                      "name": "serial_numbers",
                      "type": "82",
                      "typeName": "BoundedVec<SerialNumber,<T as Config>::MaxTokensPerCollection>",
                      "docs": []
                    },
                    {
                      "name": "royalties_schedule",
                      "type": "76",
                      "typeName": "RoyaltiesSchedule<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "marketplace_id",
                      "type": "72",
                      "typeName": "Option<MarketplaceId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "419",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "4",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "420",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "OfferType"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Simple",
                      "fields": [
                        {
                          "name": null,
                          "type": "421",
                          "typeName": "SimpleOffer<AccountId>",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "421",
            "type": {
              "path": [
                "pallet_nft",
                "types",
                "SimpleOffer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "token_id",
                      "type": "29",
                      "typeName": "TokenId",
                      "docs": []
                    },
                    {
                      "name": "asset_id",
                      "type": "4",
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "buyer",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "marketplace_id",
                      "type": "72",
                      "typeName": "Option<MarketplaceId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "422",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "8"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "423",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "423",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "8"
                }
              },
              "docs": []
            }
          },
          {
            "id": "424",
            "type": {
              "path": [
                "pallet_nft",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CollectionNameInvalid",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Given collection name is invalid (invalid utf-8, too long, empty)"
                      ]
                    },
                    {
                      "name": "NoAvailableIds",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "No more Ids are available, they've been exhausted"
                      ]
                    },
                    {
                      "name": "NotTokenOwner",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Origin does not own the NFT"
                      ]
                    },
                    {
                      "name": "NoToken",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The token does not exist"
                      ]
                    },
                    {
                      "name": "NotForFixedPriceSale",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The token is not listed for fixed price sale"
                      ]
                    },
                    {
                      "name": "NotForAuction",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The token is not listed for auction sale"
                      ]
                    },
                    {
                      "name": "NotCollectionOwner",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Origin is not the collection owner and is not permitted to perform the operation"
                      ]
                    },
                    {
                      "name": "TokenNotListed",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "The token is not listed for sale"
                      ]
                    },
                    {
                      "name": "MaxOffersReached",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "The maximum number of offers on this token has been reached"
                      ]
                    },
                    {
                      "name": "TokenLocked",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "Cannot operate on a listed NFT"
                      ]
                    },
                    {
                      "name": "RoyaltiesInvalid",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "Total royalties would exceed 100% of sale or an empty vec is supplied"
                      ]
                    },
                    {
                      "name": "BidTooLow",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "Auction bid was lower than reserve or current highest bid"
                      ]
                    },
                    {
                      "name": "MixedBundleSale",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "Selling tokens from different collection is not allowed"
                      ]
                    },
                    {
                      "name": "MarketplaceNotRegistered",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "The account_id hasn't been registered as a marketplace"
                      ]
                    },
                    {
                      "name": "NoCollectionFound",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "The collection does not exist"
                      ]
                    },
                    {
                      "name": "InvalidMetadataPath",
                      "fields": [],
                      "index": "15",
                      "docs": [
                        "The metadata path is invalid (non-utf8 or empty)"
                      ]
                    },
                    {
                      "name": "InvalidOffer",
                      "fields": [],
                      "index": "16",
                      "docs": [
                        "No offer exists for the given OfferId"
                      ]
                    },
                    {
                      "name": "NotBuyer",
                      "fields": [],
                      "index": "17",
                      "docs": [
                        "The caller is not the specified buyer"
                      ]
                    },
                    {
                      "name": "NotSeller",
                      "fields": [],
                      "index": "18",
                      "docs": [
                        "The caller is not the seller of the NFT"
                      ]
                    },
                    {
                      "name": "IsTokenOwner",
                      "fields": [],
                      "index": "19",
                      "docs": [
                        "The caller owns the token and can't make an offer"
                      ]
                    },
                    {
                      "name": "ZeroOffer",
                      "fields": [],
                      "index": "20",
                      "docs": [
                        "Offer amount needs to be greater than 0"
                      ]
                    },
                    {
                      "name": "TokenLimitExceeded",
                      "fields": [],
                      "index": "21",
                      "docs": [
                        "The number of tokens have exceeded the max tokens allowed"
                      ]
                    },
                    {
                      "name": "MintLimitExceeded",
                      "fields": [],
                      "index": "22",
                      "docs": [
                        "The quantity exceeds the max tokens per mint limit"
                      ]
                    },
                    {
                      "name": "TokenOnAuction",
                      "fields": [],
                      "index": "23",
                      "docs": [
                        "Cannot make an offer on a token up for auction"
                      ]
                    },
                    {
                      "name": "InvalidMaxIssuance",
                      "fields": [],
                      "index": "24",
                      "docs": [
                        "Max issuance needs to be greater than 0 and initial_issuance",
                        "Cannot exceed MaxTokensPerCollection"
                      ]
                    },
                    {
                      "name": "MaxIssuanceAlreadySet",
                      "fields": [],
                      "index": "25",
                      "docs": [
                        "The max issuance has already been set and can't be changed"
                      ]
                    },
                    {
                      "name": "MaxIssuanceReached",
                      "fields": [],
                      "index": "26",
                      "docs": [
                        "The collection max issuance has been reached and no more tokens can be minted"
                      ]
                    },
                    {
                      "name": "AttemptedMintOnBridgedToken",
                      "fields": [],
                      "index": "27",
                      "docs": [
                        "Attemped to mint a token that was bridged from a different chain"
                      ]
                    },
                    {
                      "name": "CannotClaimNonClaimableCollections",
                      "fields": [],
                      "index": "28",
                      "docs": [
                        "Cannot claim already claimed collections"
                      ]
                    },
                    {
                      "name": "InitialIssuanceNotZero",
                      "fields": [],
                      "index": "29",
                      "docs": [
                        "Initial issuance on XLS-20 compatible collections must be zero"
                      ]
                    },
                    {
                      "name": "CollectionIssuanceNotZero",
                      "fields": [],
                      "index": "30",
                      "docs": [
                        "Total issuance of collection must be zero to add xls20 compatibility"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "425",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "86"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "426",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "426",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "86"
                }
              },
              "docs": []
            }
          },
          {
            "id": "427",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "8",
                  "428",
                  "0"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "428",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "helpers",
                "XrpTransaction"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": "86",
                      "typeName": "XrplTxHash",
                      "docs": []
                    },
                    {
                      "name": "transaction",
                      "type": "229",
                      "typeName": "XrplTxData",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "429",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "helpers",
                "XrplTicketSequenceParams"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "start_sequence",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "bucket_size",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "430",
            "type": {
              "path": [
                "pallet_xrpl_bridge",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotPermitted",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "RelayerDoesNotExists",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "WithdrawInvalidAmount",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Withdraw amount must be non-zero and <= u64"
                      ]
                    },
                    {
                      "name": "DoorAddressNotSet",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The door address has not been configured"
                      ]
                    },
                    {
                      "name": "TooManySigners",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "XRPL does not allow more than 8 signers for door address"
                      ]
                    },
                    {
                      "name": "InvalidSigners",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The signers are not known by ethy"
                      ]
                    },
                    {
                      "name": "TxReplay",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Submitted a duplicate transaction hash"
                      ]
                    },
                    {
                      "name": "NextTicketSequenceParamsNotSet",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "The NextTicketSequenceParams has not been set"
                      ]
                    },
                    {
                      "name": "NextTicketSequenceParamsInvalid",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "The NextTicketSequenceParams is invalid"
                      ]
                    },
                    {
                      "name": "TicketSequenceParamsInvalid",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "The TicketSequenceParams is invalid"
                      ]
                    },
                    {
                      "name": "CannotProcessMoreTransactionsAtThatBlock",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "Cannot process more transactions at that block"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "431",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "347"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "432",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "374",
                  "0"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "433",
            "type": {
              "path": [
                "pallet_token_approvals",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoToken",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "The token doesn't exist"
                      ]
                    },
                    {
                      "name": "NotTokenOwner",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "The account is not the owner of the token"
                      ]
                    },
                    {
                      "name": "NotTokenOwnerOrApproved",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The account is not the owner of the token or an approved account"
                      ]
                    },
                    {
                      "name": "CallerNotOperator",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The caller account can't be the same as the operator account"
                      ]
                    },
                    {
                      "name": "ApprovedAmountTooLow",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The caller is not approved for the requested amount"
                      ]
                    },
                    {
                      "name": "CallerNotApproved",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "The caller isn't approved for any amount"
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Address is already approved"
                      ]
                    },
                    {
                      "name": "ApprovalDoesntExist",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "There is no approval set for this token"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "434",
            "type": {
              "path": [
                "pallet_echo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoAvailableIds",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "There are no remaining session ids"
                      ]
                    },
                    {
                      "name": "InvalidParameter",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Invalid ping_or_pong parameter, must be 0 or 1"
                      ]
                    },
                    {
                      "name": "InvalidAbiEncoding",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The abi received does not match the encoding scheme"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "435",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
              ],
              "params": [
                {
                  "name": "Bn",
                  "type": "4"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Off",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Unsigned",
                      "fields": [
                        {
                          "name": null,
                          "type": "436",
                          "typeName": "(bool, Bn)",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Emergency",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "436",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "39",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "437",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
              ],
              "params": [
                {
                  "name": "A",
                  "type": "0"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "supports",
                      "type": "289",
                      "typeName": "Supports<A>",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "type": "286",
                      "typeName": "ElectionScore",
                      "docs": []
                    },
                    {
                      "name": "compute",
                      "type": "91",
                      "typeName": "ElectionCompute",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "438",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": "439",
                      "typeName": "Vec<VoterOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "targets",
                      "type": "186",
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "439",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "440"
                }
              },
              "docs": []
            }
          },
          {
            "id": "440",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "0",
                  "8",
                  "369"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "441",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": "286"
                },
                {
                  "name": "V",
                  "type": "4"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "442",
                      "typeName": "BTreeMap<K, V>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "442",
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": "286"
                },
                {
                  "name": "V",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "443",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "443",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "444"
                }
              },
              "docs": []
            }
          },
          {
            "id": "444",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "286",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "445",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "Balance",
                  "type": "6"
                },
                {
                  "name": "Solution",
                  "type": "235"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "raw_solution",
                      "type": "234",
                      "typeName": "RawSolution<Solution>",
                      "docs": []
                    },
                    {
                      "name": "call_fee",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "446",
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PreDispatchEarlySubmission",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Submission was too early."
                      ]
                    },
                    {
                      "name": "PreDispatchWrongWinnerCount",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Wrong number of winners presented."
                      ]
                    },
                    {
                      "name": "PreDispatchWeakSubmission",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Submission was too weak, score-wise."
                      ]
                    },
                    {
                      "name": "SignedQueueFull",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The queue was full, and the solution was not better than any of the existing ones."
                      ]
                    },
                    {
                      "name": "SignedCannotPayDeposit",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The origin failed to pay the deposit."
                      ]
                    },
                    {
                      "name": "SignedInvalidWitness",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Witness data to dispatchable is invalid."
                      ]
                    },
                    {
                      "name": "SignedTooMuchWeight",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "The signed submission consumes too much weight"
                      ]
                    },
                    {
                      "name": "OcwCallWrongEra",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "OCW submitted solution for wrong round"
                      ]
                    },
                    {
                      "name": "MissingSnapshotMetadata",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Snapshot metadata should exist but didn't."
                      ]
                    },
                    {
                      "name": "InvalidSubmissionIndex",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "`Self::insert_submission` returned an invalid index."
                      ]
                    },
                    {
                      "name": "CallNotAllowed",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "The call is not allowed at this point."
                      ]
                    },
                    {
                      "name": "FallbackFailed",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "The fallback failed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error of the pallet that can be returned in response to dispatches."
              ]
            }
          },
          {
            "id": "447",
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Node"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": "0",
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prev",
                      "type": "66",
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "next",
                      "type": "66",
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "bag_upper",
                      "type": "8",
                      "typeName": "T::Score",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "type": "8",
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "448",
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Bag"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "head",
                      "type": "66",
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "tail",
                      "type": "66",
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "449",
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "List",
                      "fields": [
                        {
                          "name": null,
                          "type": "450",
                          "typeName": "ListError",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": [
                        "A error in the list interface implementation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "450",
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "ListError"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "NotHeavier",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "NotInSameBag",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "NodeNotFound",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "451",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "8",
                  "203"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "452",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "EventClaimStatus"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Challenged",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "ProvenValid",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "453",
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": "296"
                },
                {
                  "name": "V",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "454",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "454",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "455"
                }
              },
              "docs": []
            }
          },
          {
            "id": "455",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "296",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "456",
            "type": {
              "path": [
                "pallet_ethy",
                "types",
                "CheckedEthCallRequest"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "input",
                      "type": "11",
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_block_look_behind",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "try_block_number",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "check_timestamp",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "457",
            "type": {
              "path": [
                "pallet_ethy",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoLocalSigningAccount",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "OffchainUnsignedTxSignedPayload",
                      "fields": [],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "InvalidNotarization",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "A notarization was invalid"
                      ]
                    },
                    {
                      "name": "HttpFetch",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "InvalidClaim",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Claim was invalid e.g. not properly ABI encoded"
                      ]
                    },
                    {
                      "name": "OcwConfig",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "offchain worker not configured properly"
                      ]
                    },
                    {
                      "name": "EventReplayPending",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Event was already submitted and is pending"
                      ]
                    },
                    {
                      "name": "EventReplayProcessed",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Event was already submitted and is complete"
                      ]
                    },
                    {
                      "name": "BridgePaused",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "The bridge is paused pending validator set changes (once every era / 24 hours)",
                        "It will reactive after ~10 minutes"
                      ]
                    },
                    {
                      "name": "Internal",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "Some internal operation failed"
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": "10",
                      "docs": [
                        "Caller does not have permission for that action"
                      ]
                    },
                    {
                      "name": "NoClaim",
                      "fields": [],
                      "index": "11",
                      "docs": [
                        "There is no event claim associated with the supplied claim_id"
                      ]
                    },
                    {
                      "name": "ClaimAlreadyChallenged",
                      "fields": [],
                      "index": "12",
                      "docs": [
                        "There is already a challenge for this claim"
                      ]
                    },
                    {
                      "name": "CantUnbondRelayer",
                      "fields": [],
                      "index": "13",
                      "docs": [
                        "The relayer is active and cant unbond the specified amount"
                      ]
                    },
                    {
                      "name": "CantBondRelayer",
                      "fields": [],
                      "index": "14",
                      "docs": [
                        "The relayer already has a bonded amount"
                      ]
                    },
                    {
                      "name": "NoBondPaid",
                      "fields": [],
                      "index": "15",
                      "docs": [
                        "The relayer hasn't paid the relayer bond so can't be set as the active relayer"
                      ]
                    },
                    {
                      "name": "MaxNewSignersExceeded",
                      "fields": [],
                      "index": "16",
                      "docs": [
                        "Someone tried to set a greater amount of validators than allowed"
                      ]
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "458",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "459"
                }
              },
              "docs": []
            }
          },
          {
            "id": "459",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "302",
                  "460",
                  "465"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "460",
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transaction_index",
                      "type": "4",
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": "88",
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": "461",
                      "typeName": "Option<H160>",
                      "docs": []
                    },
                    {
                      "name": "contract_address",
                      "type": "461",
                      "typeName": "Option<H160>",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": "462",
                      "typeName": "Vec<Log>",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": "463",
                      "typeName": "Bloom",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "461",
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "88"
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": "88",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "462",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "108"
                }
              },
              "docs": []
            }
          },
          {
            "id": "463",
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "464",
                      "typeName": "[u8; BLOOM_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "464",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Array": {
                  "len": "256",
                  "type": "2"
                }
              },
              "docs": []
            }
          },
          {
            "id": "465",
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": "466",
                          "typeName": "EIP658ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": "466",
                          "typeName": "EIP2930ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": "466",
                          "typeName": "EIP1559ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "466",
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": "2",
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "used_gas",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": "463",
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": "462",
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "467",
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "302"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": "468",
                      "typeName": "Header",
                      "docs": []
                    },
                    {
                      "name": "transactions",
                      "type": "470",
                      "typeName": "Vec<T>",
                      "docs": []
                    },
                    {
                      "name": "ommers",
                      "type": "471",
                      "typeName": "Vec<Header>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "468",
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "ommers_hash",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": "88",
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transactions_root",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "receipts_root",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": "463",
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "difficulty",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_used",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": "8",
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "extra_data",
                      "type": "11",
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "mix_hash",
                      "type": "9",
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": "469",
                      "typeName": "H64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "469",
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "41",
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "470",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "302"
                }
              },
              "docs": []
            }
          },
          {
            "id": "471",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "468"
                }
              },
              "docs": []
            }
          },
          {
            "id": "472",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "465"
                }
              },
              "docs": []
            }
          },
          {
            "id": "473",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "460"
                }
              },
              "docs": []
            }
          },
          {
            "id": "474",
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "fields": [],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "fields": [],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "Undefined",
                      "fields": [],
                      "index": "7",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "475",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "88",
                  "9"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "476",
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Gas limit is too low."
                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Gas limit is too high."
                      ]
                    },
                    {
                      "name": "Undefined",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Undefined error."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "477",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "11",
                  "2"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "478",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "6",
                  "4"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "479",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "types",
                "PendingPayment"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": "480",
                          "typeName": "Erc20DepositEvent",
                          "docs": []
                        }
                      ],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Withdrawal",
                      "fields": [
                        {
                          "name": null,
                          "type": "481",
                          "typeName": "WithdrawMessage",
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "480",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "types",
                "Erc20DepositEvent"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "token_address",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": "88",
                      "typeName": "H160",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "481",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "types",
                "WithdrawMessage"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "token_address",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": "88",
                      "typeName": "EthAddress",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "482",
            "type": {
              "path": [
                "pallet_erc20_peg",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CreateAssetFailed",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Could not create the bridged asset"
                      ]
                    },
                    {
                      "name": "InvalidAmount",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Deposit has bad amount"
                      ]
                    },
                    {
                      "name": "InvalidPalletId",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Could not convert pallet id to account"
                      ]
                    },
                    {
                      "name": "DepositsPaused",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Deposits are inactive"
                      ]
                    },
                    {
                      "name": "WithdrawalsPaused",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Withdrawals are inactive"
                      ]
                    },
                    {
                      "name": "UnsupportedAsset",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Withdrawals of this asset are not supported"
                      ]
                    },
                    {
                      "name": "EvmWithdrawalFailed",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Withdrawals over the set payment delay for EVM calls are disabled"
                      ]
                    },
                    {
                      "name": "InvalidAbiEncoding",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "The abi received does not match the encoding scheme"
                      ]
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "483",
            "type": {
              "path": [
                "pallet_nft_peg",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ExceedsMaxAddresses",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Send more addresses than are allowed"
                      ]
                    },
                    {
                      "name": "ExceedsMaxTokens",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Sent more tokens than are allowed"
                      ]
                    },
                    {
                      "name": "InvalidAbiEncoding",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The abi data passed in could not be decoded"
                      ]
                    },
                    {
                      "name": "InvalidAbiPrefix",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The prefix uint in the abi encoded data was invalid"
                      ]
                    },
                    {
                      "name": "NoCollectionFound",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "No collection info exists"
                      ]
                    },
                    {
                      "name": "NoMappedTokenExists",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "No mapped token was stored for bridging the token back to the bridged chain",
                        "chain(Should not happen)"
                      ]
                    },
                    {
                      "name": "NoPermissionToBridge",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Tried to bridge a token that originates from Root, which is not yet supported"
                      ]
                    },
                    {
                      "name": "StateSyncDisabled",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "The state sync decoding feature is not implemented"
                      ]
                    },
                    {
                      "name": "TokenListLengthMismatch",
                      "fields": [],
                      "index": "8",
                      "docs": [
                        "Multiple tokens were passed from contract, but amounts were unqeual per each array"
                      ]
                    },
                    {
                      "name": "ExceedsMaxVecLength",
                      "fields": [],
                      "index": "9",
                      "docs": [
                        "The length of the given vec exceeds the maximal allowed length limit"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "484",
            "type": {
              "path": [
                "pallet_fee_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NestedFeePreferenceCall",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "The inner call is a fee preference call"
                      ]
                    },
                    {
                      "name": "FeeTokenIsGasToken",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "The selected fee token is equal to the native gas token"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "485",
            "type": {
              "path": [
                "pallet_fee_control",
                "FeeConfig"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "evm_base_fee_per_gas",
                      "type": "304",
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "weight_multiplier",
                      "type": "47",
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "length_multiplier",
                      "type": "6",
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "486",
            "type": {
              "path": [
                "pallet_xls20",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotRelayer",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "The caller is not the relayer and does not have permission to perform this action"
                      ]
                    },
                    {
                      "name": "MappingAlreadyExists",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "There is already a Root native -> XLS-20 mapping for this token"
                      ]
                    },
                    {
                      "name": "Xls20MintFeeTooLow",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "The supplied fee for minting XLS-20 tokens is too low"
                      ]
                    },
                    {
                      "name": "NotXLS20Compatible",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "The collection is not compatible with XLS-20"
                      ]
                    },
                    {
                      "name": "NoToken",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "The NFT does not exist"
                      ]
                    },
                    {
                      "name": "NotCollectionOwner",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "No the owner of the collection"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "487",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "488",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "488",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "489"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "490",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "489",
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "ProxyType",
                  "type": "125"
                },
                {
                  "name": "BlockNumber",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": "125",
                      "typeName": "ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": "4",
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "490",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "489"
                }
              },
              "docs": []
            }
          },
          {
            "id": "491",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "492",
                  "6"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "492",
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": "493"
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "494",
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "493",
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": "0"
                },
                {
                  "name": "Hash",
                  "type": "9"
                },
                {
                  "name": "BlockNumber",
                  "type": "4"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": "0",
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": "9",
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": "4",
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "494",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Sequence": {
                  "type": "493"
                }
              },
              "docs": []
            }
          },
          {
            "id": "495",
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [],
                      "index": "7",
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "496",
            "type": {
              "path": [
                "pallet_futurepass",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "AccountAlreadyRegistered",
                      "fields": [],
                      "index": "0",
                      "docs": [
                        "Account is already futurepass holder"
                      ]
                    },
                    {
                      "name": "DelegateNotRegistered",
                      "fields": [],
                      "index": "1",
                      "docs": [
                        "Account is not futurepass delegate"
                      ]
                    },
                    {
                      "name": "DelegateAlreadyExists",
                      "fields": [],
                      "index": "2",
                      "docs": [
                        "Account already exists as a delegate"
                      ]
                    },
                    {
                      "name": "NotFuturepassOwner",
                      "fields": [],
                      "index": "3",
                      "docs": [
                        "Account is not futurepass owner"
                      ]
                    },
                    {
                      "name": "OwnerCannotUnregister",
                      "fields": [],
                      "index": "4",
                      "docs": [
                        "Futurepass owner cannot remove themselves"
                      ]
                    },
                    {
                      "name": "PermissionDenied",
                      "fields": [],
                      "index": "5",
                      "docs": [
                        "Account does not have permission to call this function"
                      ]
                    },
                    {
                      "name": "MigratorNotSet",
                      "fields": [],
                      "index": "6",
                      "docs": [
                        "Futurepass migrator admin account is not set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": "497",
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": "0"
                },
                {
                  "name": "Call",
                  "type": "176"
                },
                {
                  "name": "Signature",
                  "type": "498"
                },
                {
                  "name": "Extra",
                  "type": "499"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "509",
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "498",
            "type": {
              "path": [
                "seed_primitives",
                "signature",
                "EthereumSignature"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "299",
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "499",
            "type": {
              "path": [],
              "params": [],
              "def": {
                "Tuple": [
                  "500",
                  "501",
                  "502",
                  "503",
                  "504",
                  "506",
                  "507",
                  "508"
                ]
              },
              "docs": []
            }
          },
          {
            "id": "500",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "501",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "502",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "503",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "504",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "505",
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "505",
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": "0",
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "1",
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "2",
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "3",
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "4",
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "5",
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "6",
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "7",
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "8",
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "9",
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "10",
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "11",
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "12",
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "13",
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "14",
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "15",
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "16",
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "17",
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "18",
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "19",
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "20",
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "21",
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "22",
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "23",
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "24",
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "25",
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "26",
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "27",
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "28",
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "29",
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "30",
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "31",
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "32",
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "33",
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "34",
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "35",
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "36",
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "37",
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "38",
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "39",
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "40",
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "41",
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "42",
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "43",
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "44",
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "45",
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "46",
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "47",
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "48",
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "49",
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "50",
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "51",
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "52",
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "53",
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "54",
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "55",
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "56",
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "57",
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "58",
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "59",
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "60",
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "61",
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "62",
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "63",
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "64",
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "65",
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "66",
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "67",
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "68",
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "69",
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "70",
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "71",
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "72",
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "73",
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "74",
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "75",
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "76",
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "77",
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "78",
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "79",
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "80",
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "81",
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "82",
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "83",
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "84",
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "85",
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "86",
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "87",
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "88",
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "89",
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "90",
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "91",
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "92",
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "93",
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "94",
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "95",
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "96",
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "97",
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "98",
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "99",
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "100",
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "101",
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "102",
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "103",
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "104",
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "105",
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "106",
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "107",
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "108",
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "109",
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "110",
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "111",
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "112",
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "113",
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "114",
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "115",
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "116",
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "117",
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "118",
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "119",
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "120",
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "121",
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "122",
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "123",
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "124",
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "125",
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "126",
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "127",
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "128",
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "129",
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "130",
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "131",
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "132",
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "133",
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "134",
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "135",
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "136",
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "137",
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "138",
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "139",
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "140",
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "141",
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "142",
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "143",
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "144",
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "145",
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "146",
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "147",
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "148",
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "149",
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "150",
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "151",
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "152",
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "153",
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "154",
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "155",
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "156",
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "157",
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "158",
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "159",
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "160",
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "161",
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "162",
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "163",
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "164",
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "165",
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "166",
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "167",
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "168",
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "169",
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "170",
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "171",
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "172",
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "173",
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "174",
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "175",
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "176",
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "177",
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "178",
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "179",
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "180",
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "181",
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "182",
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "183",
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "184",
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "185",
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "186",
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "187",
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "188",
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "189",
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "190",
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "191",
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "192",
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "193",
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "194",
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "195",
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "196",
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "197",
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "198",
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "199",
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "200",
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "201",
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "202",
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "203",
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "204",
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "205",
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "206",
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "207",
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "208",
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "209",
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "210",
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "211",
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "212",
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "213",
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "214",
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "215",
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "216",
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "217",
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "218",
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "219",
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "220",
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "221",
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "222",
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "223",
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "224",
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "225",
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "226",
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "227",
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "228",
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "229",
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "230",
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "231",
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "232",
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "233",
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "234",
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "235",
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "236",
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "237",
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "238",
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "239",
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "240",
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "241",
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "242",
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "243",
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "244",
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "245",
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "246",
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "247",
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "248",
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "249",
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "250",
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "251",
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "252",
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "253",
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "254",
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": "2",
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": "255",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "506",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "131",
                      "typeName": "T::Index",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "507",
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": "508",
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "62",
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "509",
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": "0"
                },
                {
                  "name": "Call",
                  "type": "176"
                },
                {
                  "name": "Signature",
                  "type": "498"
                },
                {
                  "name": "Extra",
                  "type": "499"
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": "11",
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": "510",
            "type": {
              "path": [
                "seed_runtime",
                "Runtime"
              ],
              "params": [],
              "def": {
                "Composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "3"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "Plain": "7"
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "9"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "11"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "Plain": "9"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "Plain": "12"
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "Plain": "16"
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "9",
                    "value": "129"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "Plain": "130"
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "Plain": "128"
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": "132"
          },
          "events": {
            "type": "19"
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": "135",
              "value": "0xc0aadefa010000000088526a7400000090cd2405000000000170a45da64b0000000100e6bd4f5700000001000000000000000090cd240500000000017046f2c068000000010088526a740000000100a2941a1d00000090cd240500000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": "139",
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": "4",
              "value": "0xfa000000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": "141",
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": "142",
              "value": "0x10726f6f7410726f6f740100000023000000000000003cdf6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a801000000cbca25e39f14238702000000e65b00e46cedd0aa02000000d246ad053764b1ba0100000037e834f43398ba2d01000000582211f65bb14b8904000000ed99c5acb25eedf503000000e377ce9116bcb5f1010000000100000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": "126",
              "value": "0xc100",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": "146"
          },
          "index": "0"
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": "147"
                },
                "fallback": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "Plain": "151"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "Plain": "151"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "Plain": "10"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "Plain": "152"
                },
                "fallback": "0x00",
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "Plain": "10"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "Plain": "147"
                },
                "fallback": "0x00",
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "155"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "Plain": "157"
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "Plain": "162"
                },
                "fallback": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_finalize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "Plain": "29"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "Plain": "163"
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "Plain": "163"
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              }
            ]
          },
          "calls": {
            "type": "164"
          },
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": "8",
              "value": "0x100e000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": "8",
              "value": "0xa00f000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "type": "4",
              "value": "0x00100000",
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "errors": {
            "type": "169"
          },
          "index": "1"
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": "170"
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": "8",
              "value": "0xd007000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": "2"
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "172"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "11",
                    "value": "29"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "type": "177"
          },
          "events": {
            "type": "28"
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": "8",
              "value": "0x00a0db215d000000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": "4",
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": "330"
          },
          "index": "3"
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": "179"
          },
          "events": {
            "type": "34"
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": "4",
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": "331"
          },
          "index": "4"
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "332"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "334",
                    "value": "335"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "type": "185"
          },
          "events": {
            "type": "35"
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": "6",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "type": "6",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "type": "4",
              "value": "0x03000000",
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration.",
                "",
                " NOTE: The threshold programmed in this Pallet uses u16, so it does",
                " not really make sense to have a limit here greater than u16::MAX.",
                " But also, that is a lot more than you should probably set this value",
                " to anyway..."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "type": "6",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "errors": {
            "type": "336"
          },
          "index": "33"
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "5"
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "337"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "341"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": "344"
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": "187"
          },
          "events": {
            "type": "36"
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "6",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": "4",
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": "4",
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": "345"
          },
          "index": "5"
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "4",
                    "value": "346"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": "347",
                    "value": "348"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": "350",
                    "value": "351"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "4",
                    "value": "352"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "type": "188"
          },
          "events": {
            "type": "38"
          },
          "constants": [
            {
              "name": "AssetDeposit",
              "type": "6",
              "value": "0x40420f00000000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "type": "6",
              "value": "0x10000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": "6",
              "value": "0x44000000000000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "type": "6",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "type": "6",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "type": "4",
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "errors": {
            "type": "354"
          },
          "index": "6"
        },
        {
          "name": "AssetsExt",
          "storage": {
            "prefix": "AssetsExt",
            "items": [
              {
                "name": "Holds",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": "347",
                    "value": "355"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "NextAssetId",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total units issued in the system."
                ]
              }
            ]
          },
          "calls": {
            "type": "190"
          },
          "events": {
            "type": "40"
          },
          "constants": [
            {
              "name": "MaxHolds",
              "type": "4",
              "value": "0x10000000",
              "docs": [
                " The maximum * of holds per asset & account"
              ]
            },
            {
              "name": "NativeAssetId",
              "type": "4",
              "value": "0x01000000",
              "docs": [
                " The native token asset Id (managed by pallet-balances)"
              ]
            },
            {
              "name": "PalletId",
              "type": "358",
              "value": "assetext",
              "docs": [
                " This pallet's Id, used for deriving a sovereign account ID"
              ]
            }
          ],
          "errors": {
            "type": "359"
          },
          "index": "7"
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "Plain": "360"
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "Plain": "0"
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "type": "192"
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": "4",
              "value": "0x00000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": "363"
          },
          "index": "8"
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x54000000",
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "Plain": "186"
                },
                "fallback": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "MinCommission",
                "modifier": "Default",
                "type": {
                  "Plain": "47"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The minimum amount of commission that validators can set.",
                  "",
                  " If set to `0`, no limit exists."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "364"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "195"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "45"
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "368"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator stash key to their nomination preferences, namely the validators that",
                  " they wish to support.",
                  "",
                  " Note that the keys of this storage map might become non-decodable in case the",
                  " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
                  " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                  " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                  " nominators will effectively not-exist, until they re-submit their preferences such that it",
                  " is within the bounds of the newly set `Config::MaxNominations`.",
                  "",
                  " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                  " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                  " number of keys that exist.",
                  "",
                  " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                  " [`Call::chill_other`] dispatchable by anyone."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "Plain": "370"
                },
                "fallback": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "4"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "61"
                  }
                },
                "fallback": "0x000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "61"
                  }
                },
                "fallback": "0x000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "45"
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "6"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "371"
                  }
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "6"
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "Plain": "375"
                },
                "fallback": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "Plain": "47"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "376"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "Plain": "129"
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "378"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "6"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "379"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "374",
                    "value": "380"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "type": {
                  "Plain": "381"
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": "383"
                },
                "fallback": "0x09",
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v7.0.0 for new networks."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "Plain": "196"
                },
                "fallback": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": {
            "type": "194"
          },
          "events": {
            "type": "44"
          },
          "constants": [
            {
              "name": "MaxNominations",
              "type": "4",
              "value": "0x10000000",
              "docs": [
                " Maximum number of nominations per nominator."
              ]
            },
            {
              "name": "SessionsPerEra",
              "type": "4",
              "value": "0x06000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "type": "4",
              "value": "0x1c000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": "4",
              "value": "0x1b000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": "4",
              "value": "0x00010000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxUnlockingChunks",
              "type": "4",
              "value": "0x20000000",
              "docs": [
                " The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively",
                " determines how many unique eras a staker may be unbonding in."
              ]
            }
          ],
          "errors": {
            "type": "384"
          },
          "index": "9"
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "9",
                    "value": "385"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "386",
                    "value": "109"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "49",
                    "value": "11"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": "48"
          },
          "constants": [],
          "errors": null,
          "index": "10"
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Plain": "186"
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "Plain": "387"
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "Plain": "69"
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "202"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "389",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": "201"
          },
          "events": {
            "type": "50"
          },
          "constants": [],
          "errors": {
            "type": "391"
          },
          "index": "11"
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "Plain": "392"
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "Plain": "393"
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "Plain": "29"
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "4"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "type": "206"
          },
          "events": {
            "type": "51"
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": "4",
              "value": "0x00100000",
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "errors": {
            "type": "395"
          },
          "index": "12"
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "Plain": "396"
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "29",
                    "value": "398"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "347",
                    "value": "4"
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "type": "217"
          },
          "events": {
            "type": "56"
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": "8",
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": "403"
          },
          "index": "13"
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Optional",
                "type": {
                  "Plain": "0"
                },
                "fallback": "0x00",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": "225"
          },
          "events": {
            "type": "65"
          },
          "constants": [],
          "errors": {
            "type": "404"
          },
          "index": "14"
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "Plain": "405"
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": "406"
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": {
            "type": "67"
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": "2",
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "errors": null,
          "index": "15"
        },
        {
          "name": "Dex",
          "storage": {
            "prefix": "Dex",
            "items": [
              {
                "name": "TradingPairLPToken",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "70",
                    "value": "72"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "LiquidityPool",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "70",
                    "value": "407"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "TradingPairStatuses",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "70",
                    "value": "408"
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "226"
          },
          "events": {
            "type": "68"
          },
          "constants": [
            {
              "name": "GetExchangeFee",
              "type": "29",
              "value": "0x03000000e8030000",
              "docs": [
                " Trading fee rate",
                " The first item of the tuple is the numerator of the fee rate, second",
                " item is the denominator, fee_rate = numerator / denominator,",
                " use (u32, u32) over `Rate` type to minimize internal division",
                " operation."
              ]
            },
            {
              "name": "TradingPathLimit",
              "type": "4",
              "value": "0x03000000",
              "docs": [
                " The limit for length of trading path"
              ]
            },
            {
              "name": "DEXBurnPalletId",
              "type": "358",
              "value": "burn/dex",
              "docs": [
                " The DEX's burn id, to provide for a redundant, unredeemable minter/burner address."
              ]
            },
            {
              "name": "LPTokenDecimals",
              "type": "2",
              "value": "0x12",
              "docs": [
                " Liquidity pair default token decimals"
              ]
            }
          ],
          "errors": {
            "type": "409"
          },
          "index": "16"
        },
        {
          "name": "Nft",
          "storage": {
            "prefix": "Nft",
            "items": [
              {
                "name": "CollectionInfo",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "410"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from collection to its information"
                ]
              },
              {
                "name": "NextCollectionId",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next available incrementing collection id"
                ]
              },
              {
                "name": "TokenLocks",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "29",
                    "value": "414"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from a token to lock status if any"
                ]
              },
              {
                "name": "NextMarketplaceId",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next available marketplace id"
                ]
              },
              {
                "name": "RegisteredMarketplaces",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "415"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from marketplace account_id to royalties schedule"
                ]
              },
              {
                "name": "Listings",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "6",
                    "value": "416"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " NFT sale/auction listings keyed by listing id"
                ]
              },
              {
                "name": "NextListingId",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The next available listing Id"
                ]
              },
              {
                "name": "OpenCollectionListings",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "419",
                    "value": "39"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from collection to any open listings"
                ]
              },
              {
                "name": "ListingWinningBid",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "6",
                    "value": "43"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Winning bids on open listings."
                ]
              },
              {
                "name": "ListingEndSchedule",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "419",
                    "value": "39"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Block numbers where listings will close. Value is `true` if at block number `listing_id` is",
                  " scheduled to close."
                ]
              },
              {
                "name": "Offers",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "420"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from offer_id to the information related to the offer"
                ]
              },
              {
                "name": "TokenOffers",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "29",
                    "value": "422"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps from token_id to a vector of offer_ids on that token"
                ]
              },
              {
                "name": "NextOfferId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The next available offer_id"
                ]
              }
            ]
          },
          "calls": {
            "type": "227"
          },
          "events": {
            "type": "71"
          },
          "constants": [
            {
              "name": "DefaultListingDuration",
              "type": "4",
              "value": "0x20fd0000",
              "docs": [
                " Default auction / sale length in blocks"
              ]
            },
            {
              "name": "PalletId",
              "type": "358",
              "value": "nftokens",
              "docs": [
                " This pallet's Id, used for deriving a sovereign account ID"
              ]
            }
          ],
          "errors": {
            "type": "424"
          },
          "index": "17"
        },
        {
          "name": "XRPLBridge",
          "storage": {
            "prefix": "XRPLBridge",
            "items": [
              {
                "name": "Relayer",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "0",
                    "value": "39"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " List of all XRP transaction relayers"
                ]
              },
              {
                "name": "ProcessXRPTransaction",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "425"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary storage to set the transactions ready to be processed at specified block number"
                ]
              },
              {
                "name": "ProcessXRPTransactionDetails",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": "86",
                    "value": "427"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores submitted transactions from XRPL waiting to be processed",
                  " Transactions will be cleared `ClearTxPeriod` blocks after processing"
                ]
              },
              {
                "name": "SettledXRPTransactionDetails",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "425"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Settled xrp transactions stored as history for a specific period"
                ]
              },
              {
                "name": "ChallengeXRPTransactionList",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": "86",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Challenge received for a transaction mapped by hash, will be cleared when validator",
                  " validates"
                ]
              },
              {
                "name": "DoorTicketSequence",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current ticket sequence of the XRPL door account"
                ]
              },
              {
                "name": "DoorTicketSequenceParams",
                "modifier": "Default",
                "type": {
                  "Plain": "429"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The Ticket sequence params of the XRPL door account for the current allocation"
                ]
              },
              {
                "name": "DoorTicketSequenceParamsNext",
                "modifier": "Default",
                "type": {
                  "Plain": "429"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The Ticket sequence params of the XRPL door account for the next allocation"
                ]
              },
              {
                "name": "TicketSequenceThresholdReachedEmitted",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track whether the TicketSequenceThresholdReached event is emitted"
                ]
              },
              {
                "name": "DoorTxFee",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x40420f0000000000",
                "docs": [
                  " The flat fee for XRPL door txs"
                ]
              },
              {
                "name": "DoorAddress",
                "modifier": "Optional",
                "type": {
                  "Plain": "88"
                },
                "fallback": "0x00",
                "docs": [
                  " The door address on XRPL"
                ]
              }
            ]
          },
          "calls": {
            "type": "228"
          },
          "events": {
            "type": "85"
          },
          "constants": [
            {
              "name": "XrpAssetId",
              "type": "4",
              "value": "0x02000000",
              "docs": [
                " XRP Asset Id set at runtime"
              ]
            },
            {
              "name": "ChallengePeriod",
              "type": "4",
              "value": "0x96000000",
              "docs": [
                " Challenge Period to wait for a challenge before processing the transaction"
              ]
            },
            {
              "name": "ClearTxPeriod",
              "type": "4",
              "value": "0xc04b0300",
              "docs": [
                " Clear Period to wait for a transaction to be cleared from settled storages"
              ]
            }
          ],
          "errors": {
            "type": "430"
          },
          "index": "18"
        },
        {
          "name": "TokenApprovals",
          "storage": {
            "prefix": "TokenApprovals",
            "items": [
              {
                "name": "ERC721Approvals",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "29",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ERC721ApprovalsForAll",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "431",
                    "value": "39"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ERC20Approvals",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "432",
                    "value": "6"
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "230"
          },
          "events": null,
          "constants": [],
          "errors": {
            "type": "433"
          },
          "index": "19"
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": "20"
        },
        {
          "name": "Echo",
          "storage": {
            "prefix": "Echo",
            "items": [
              {
                "name": "NextSessionId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The next available offer_id"
                ]
              }
            ]
          },
          "calls": {
            "type": "231"
          },
          "events": {
            "type": "89"
          },
          "constants": [
            {
              "name": "PalletId",
              "type": "358",
              "value": "pingpong",
              "docs": [
                " This pallet's Id, used for deriving a sovereign account ID"
              ]
            }
          ],
          "errors": {
            "type": "434"
          },
          "index": "21"
        },
        {
          "name": "Marketplace",
          "storage": null,
          "calls": {
            "type": "232"
          },
          "events": null,
          "constants": [],
          "errors": null,
          "index": "44"
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "Plain": "435"
                },
                "fallback": "0x00",
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "Plain": "437"
                },
                "fallback": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "Plain": "438"
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "Plain": "287"
                },
                "fallback": "0x00",
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "Plain": "441"
                },
                "fallback": "0x00",
                "docs": [
                  " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
                  " `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "445"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "Plain": "286"
                },
                "fallback": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "type": "233"
          },
          "events": {
            "type": "90"
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": "4",
              "value": "0x84030000",
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "type": "4",
              "value": "0x84030000",
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "BetterSignedThreshold",
              "type": "47",
              "value": "0x00000000",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Signed phase."
              ]
            },
            {
              "name": "BetterUnsignedThreshold",
              "type": "47",
              "value": "0x20a10700",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Unsigned phase."
              ]
            },
            {
              "name": "OffchainRepeat",
              "type": "4",
              "value": "0x1c000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "type": "8",
              "value": "0x65666666666666e6",
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "type": "4",
              "value": "0x10000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "type": "8",
              "value": "0xb0f97eab49000000",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                " this value."
              ]
            },
            {
              "name": "SignedMaxRefunds",
              "type": "4",
              "value": "0x04000000",
              "docs": [
                " The maximum amount of unchecked solutions to refund the call fee for."
              ]
            },
            {
              "name": "SignedRewardBase",
              "type": "6",
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "type": "6",
              "value": "0x005a6202000000000000000000000000",
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "type": "6",
              "value": "0xd0030000000000000000000000000000",
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "type": "6",
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "MaxElectingVoters",
              "type": "4",
              "value": "0xe4570000",
              "docs": [
                " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
                " are only over a single block, but once multi-block elections are introduced they will",
                " take place over multiple blocks."
              ]
            },
            {
              "name": "MaxElectableTargets",
              "type": "126",
              "value": "0xffff",
              "docs": [
                " The maximum number of electable targets to put in the snapshot."
              ]
            }
          ],
          "errors": {
            "type": "446"
          },
          "index": "22"
        },
        {
          "name": "VoterList",
          "storage": {
            "prefix": "VoterList",
            "items": [
              {
                "name": "ListNodes",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "447"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "CounterForListNodes",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ListBags",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "448"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": {
            "type": "292"
          },
          "events": {
            "type": "93"
          },
          "constants": [
            {
              "name": "BagThresholds",
              "type": "423",
              "value": "0x210300e40b5402000000f39e809702000000a8b197e20200000094492e3603000000279c3a930300000003bccefa0300000042c01b6e040000001b4775ee04000000385e557d0500000046dc601c0600000089386ccd06000000b6ee809207000000fe7ee36d08000000e81b1a6209000000b019f4710a000000103592a00b000000cfc96ff10c00000041146d680e000000e79bda0910000000cee885da1100000028a9c7df13000000bb70931f160000008e4089a018000000810a096a1b000000366a48841e0000005bd36af821000000807c9cd025000000c95530182a000000bd63c1db2e00000071e0572934000000689092103a000000edc4d4a240000000699379f3470000008fd80c18500000004baf8a28590000006a16a63f630000000995177b6e00000078c5f4fb7a00000062c811e78800000051bf6d6598000000048eaba4a9000000544698d7bc00000091cac036d2000000175f1801ea000000bd15b27c0401000043358ff721010000b8fc84c84201000099673c506701000007e44efa8f010000b341833ebd010000027f2ea2ef0100009883bcb927020000164d652a66020000b49513acab0200002d8e820bf9020000a1e6982c4f030000a616080daf030000cc9d37c719040000a0d584959004000042e7e0d514050000028cd70da80500000f750aef4b060000ea8d2e5c02070000c3cb996ecd070000b1e5717caf080000aa2b8e1fab090000b5c1203dc30a000026d03d0efb0b000070c75929560d0000ebadda8cd80e0000f797dbaa86100000cff04476651200001f2660717a14000009a611becb1600001dfbe82f60190000943a3c603f1c00008afe89c4711f0000ced963c70023000003a92ae4f6260000fe72eec55f2b000036c9cc6948300000dae33245bf350000062a7470d43b00007c9732d69942000084a32468234a0000571ad45987520000e7f10262de5b00000db8760344660000ae0401ded67100007d9eb308b97e00001e044a76108d00003a1df064079d0000e04fafdaccae00005679f02f95c2000095c3aaa99ad80000967c05251ef10000177a66d6670c010028cb1f1ec82a0100fa282f75984c0100d57dc8743c7201007dc4b3fb229c0100365cde74c7ca01009eb8e142b3fe01000c31ae547f3802005fe101e8d57802006373da7e74c0020051d1a60d2e100300c7e9a468ed68030061c091f7b7cb0300bf27a1b7b03904007b1499941bb404008523ed22613c050069a5d4c512d40500ec8c934def7c0600f5aa901be83807008cbe5ddb260a080002978ce113f30800fae314435df60900ddf12dbafe160b002ebadc6f4a580c000c5518c4f2bd0d00f0bb5431154c0f00498e866b46071100b2c153de9ff41200278a2fb2ce191500b2399f84247d1700e199e704aa251a00ba13f5ab331b1d00264785cc7866200088bf803f2d1124001c9823f81d262800ccc422d450b12c00f088820528c03100367c6d7e896137006e9329d30aa63d008cbc6c1322a044000070f32a5c644c00b43b84699909550080b4abe450a95e00a0cda979db5f69004cc27f4cc74c7500d0ac0eba34938200483e0ccf3d5a910068c68e7469cda100281e6fa52b1db40098a92326747fc800f09a74634d30df0080cdfc4b8d72f8009014602d9a901401f0b413d945dd330120973596c1b4560150dcfbaead7d7d01e01198b947aaa80130c7ee16bbb9d801206e488697390e02a0fa4b1d72c74902c0117170b5128c02808a1643a6ded502c0f823b1a204280380af5970a2768303c06f2d87ff41e90340937fac8f925a040091097117b6d804400fdf5b212065050049c149446e0106008ebca6e56caf0600595686851c71078068aa34a4b7480880a1e29e52b9380900bdabe880e4430a002a72b4204c6d0b80f1c013335cb80c00a03ccbdce3280e80b8629a9e20c30f00de5693d2ca8b11005d7f4c93238813001a87df3504be1500a7ce4b84ef3318000110fbea24f11a00802ae5d1b5fd1d0022a134609d62210044216bf0da2925000261f1828f5e29006620cf851e0d2e008410195252433300a0c18fca8410390026ad1493cc853f00d0cd24662fb646009ce19a1cdab64e0058ccc20c5f9f5700200a7578fb89610030bbbbd6e4936c0060cba7dc9edd7800b83bc0425b8b8600b886236164c59500f8f15fdc93b8a600206a91c0d696b900d8efe28fc097ce0068299bf52ef9e5ffffffffffffffff",
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their score. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                " score, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                " lists will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "errors": {
            "type": "449"
          },
          "index": "23"
        },
        {
          "name": "TxFeePot",
          "storage": {
            "prefix": "TxFeePot",
            "items": [
              {
                "name": "EraTxFees",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Accrued transaction fees in the current staking Era"
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TxFeePotId",
              "type": "358",
              "value": "txfeepot",
              "docs": []
            }
          ],
          "errors": null,
          "index": "24"
        },
        {
          "name": "EthBridge",
          "storage": {
            "prefix": "EthBridge",
            "items": [
              {
                "name": "AuthoritiesChangedThisEra",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Flag to indicate whether authorities have been changed during the current era"
                ]
              },
              {
                "name": "BridgePaused",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Whether the bridge is paused (e.g. during validator transitions or by governance)"
                ]
              },
              {
                "name": "ChallengerAccount",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "43"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps from event claim id to challenger and bond amount paid"
                ]
              },
              {
                "name": "ChallengePeriod",
                "modifier": "Default",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x96000000",
                "docs": [
                  " The (optimistic) challenge period after which a submitted event is considered valid"
                ]
              },
              {
                "name": "ContractAddress",
                "modifier": "Default",
                "type": {
                  "Plain": "88"
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " The bridge contract address on Ethereum"
                ]
              },
              {
                "name": "EventBlockConfirmations",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0300000000000000",
                "docs": [
                  " The minimum number of block confirmations needed to notarize an Ethereum event"
                ]
              },
              {
                "name": "EventNotarizations",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "451",
                    "value": "297"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Notarizations for queued events",
                  " Either: None = no notarization exists OR Some(yay/nay)"
                ]
              },
              {
                "name": "DelayedEventProofsPerBlock",
                "modifier": "Default",
                "type": {
                  "Plain": "2"
                },
                "fallback": "0x05",
                "docs": [
                  " The maximum number of delayed events that can be processed in on_initialize()"
                ]
              },
              {
                "name": "NextEventProofId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Id of the next event proof"
                ]
              },
              {
                "name": "NextNotaryKeys",
                "modifier": "Default",
                "type": {
                  "Plain": "294"
                },
                "fallback": "0x00",
                "docs": [
                  " Scheduled notary (validator) public keys for the next session"
                ]
              },
              {
                "name": "NotaryKeys",
                "modifier": "Default",
                "type": {
                  "Plain": "294"
                },
                "fallback": "0x00",
                "docs": [
                  " Active notary (validator) public keys"
                ]
              },
              {
                "name": "NotaryXrplKeys",
                "modifier": "Default",
                "type": {
                  "Plain": "294"
                },
                "fallback": "0x00",
                "docs": [
                  " Active xrpl notary (validator) public keys"
                ]
              },
              {
                "name": "XrplDoorSigners",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "203",
                    "value": "39"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Door Signers set by sudo (white list)"
                ]
              },
              {
                "name": "NotarySetId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current validator set id"
                ]
              },
              {
                "name": "NotarySetProofId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The event proof Id generated by the previous validator set to notarize the current set.",
                  " Useful for syncing the latest proof to Ethereum"
                ]
              },
              {
                "name": "XrplNotarySetProofId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The event proof Id generated by the previous validator set to notarize the current set.",
                  " Useful for syncing the latest proof to Xrpl"
                ]
              },
              {
                "name": "PendingEventClaims",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "98"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Queued event claims, can be challenged within challenge period"
                ]
              },
              {
                "name": "PendingEventProofs",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "96"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Queued event proofs to be processed once bridge has been re-enabled"
                ]
              },
              {
                "name": "PendingClaimChallenges",
                "modifier": "Default",
                "type": {
                  "Plain": "423"
                },
                "fallback": "0x00",
                "docs": [
                  " List of all event ids that are currently being challenged"
                ]
              },
              {
                "name": "PendingClaimStatus",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "452"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Status of pending event claims"
                ]
              },
              {
                "name": "ProcessedMessageIds",
                "modifier": "Default",
                "type": {
                  "Plain": "423"
                },
                "fallback": "0x00",
                "docs": [
                  " Tracks processed message Ids (prevent replay)"
                ]
              },
              {
                "name": "NextAuthorityChange",
                "modifier": "Optional",
                "type": {
                  "Plain": "4"
                },
                "fallback": "0x00",
                "docs": [
                  " The block in which we process the next authority change"
                ]
              },
              {
                "name": "MessagesValidAt",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "423"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from block number to list of EventClaims that will be considered valid and should be forwarded to handlers (i.e after the optimistic challenge period has passed without issue)"
                ]
              },
              {
                "name": "NextEthCallId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Subscription Id for EthCall requests"
                ]
              },
              {
                "name": "Relayer",
                "modifier": "Optional",
                "type": {
                  "Plain": "0"
                },
                "fallback": "0x00",
                "docs": [
                  " The permissioned relayer"
                ]
              },
              {
                "name": "RelayerPaidBond",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "6"
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Maps from relayer account to their paid bond amount"
                ]
              },
              {
                "name": "EthCallRequests",
                "modifier": "Default",
                "type": {
                  "Plain": "423"
                },
                "fallback": "0x00",
                "docs": [
                  " Queue of pending EthCallOracle requests"
                ]
              },
              {
                "name": "EthCallNotarizations",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "451",
                    "value": "296"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " EthCallOracle notarizations keyed by (Id, Notary)"
                ]
              },
              {
                "name": "EthCallNotarizationsAggregated",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "453"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " map from EthCallOracle notarizations to an aggregated count"
                ]
              },
              {
                "name": "EthCallRequestInfo",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "456"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " EthCallOracle request info"
                ]
              }
            ]
          },
          "calls": {
            "type": "293"
          },
          "events": {
            "type": "94"
          },
          "constants": [],
          "errors": {
            "type": "457"
          },
          "index": "25"
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "Plain": "458"
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "Plain": "467"
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "Plain": "472"
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "Plain": "473"
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "304",
                    "value": "9"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "301"
          },
          "events": {
            "type": "99"
          },
          "constants": [],
          "errors": {
            "type": "474"
          },
          "index": "26"
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": "88",
                    "value": "11"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": "475",
                    "value": "9"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "313"
          },
          "events": {
            "type": "107"
          },
          "constants": [],
          "errors": {
            "type": "476"
          },
          "index": "27"
        },
        {
          "name": "EVMChainId",
          "storage": {
            "prefix": "EVMChainId",
            "items": [
              {
                "name": "ChainId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0xf81d000000000000",
                "docs": [
                  " The EVM chain ID."
                ]
              }
            ]
          },
          "calls": {
            "type": "317"
          },
          "events": {
            "type": "110"
          },
          "constants": [],
          "errors": null,
          "index": "41"
        },
        {
          "name": "Erc20Peg",
          "storage": {
            "prefix": "Erc20Peg",
            "items": [
              {
                "name": "DepositsActive",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Whether deposit are active"
                ]
              },
              {
                "name": "WithdrawalsActive",
                "modifier": "Default",
                "type": {
                  "Plain": "39"
                },
                "fallback": "0x00",
                "docs": [
                  " Whether withdrawals are active"
                ]
              },
              {
                "name": "Erc20ToAssetId",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "88",
                    "value": "4"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map ERC20 address to GA asset Id"
                ]
              },
              {
                "name": "AssetIdToErc20",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "88"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map GA asset Id to ERC20 address"
                ]
              },
              {
                "name": "Erc20Meta",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "88",
                    "value": "477"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Metadata for well-known erc20 tokens (symbol, decimals)"
                ]
              },
              {
                "name": "PaymentDelay",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "478"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from asset_id to minimum amount and delay"
                ]
              },
              {
                "name": "DelayedPayments",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "8",
                    "value": "479"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from DelayedPaymentId to PendingPayment"
                ]
              },
              {
                "name": "DelayedPaymentSchedule",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "423"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from block number to DelayedPaymentIds scheduled for that block"
                ]
              },
              {
                "name": "ReadyBlocks",
                "modifier": "Default",
                "type": {
                  "Plain": "69"
                },
                "fallback": "0x00",
                "docs": [
                  " The blocks with payments that are ready to be processed"
                ]
              },
              {
                "name": "NextDelayedPaymentId",
                "modifier": "Default",
                "type": {
                  "Plain": "8"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The next available payment id for withdrawals and deposits"
                ]
              },
              {
                "name": "ContractAddress",
                "modifier": "Default",
                "type": {
                  "Plain": "88"
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " The peg contract address on Ethereum"
                ]
              }
            ]
          },
          "calls": {
            "type": "318"
          },
          "events": {
            "type": "111"
          },
          "constants": [],
          "errors": {
            "type": "482"
          },
          "index": "29"
        },
        {
          "name": "NftPeg",
          "storage": {
            "prefix": "NftPeg",
            "items": [
              {
                "name": "ContractAddress",
                "modifier": "Default",
                "type": {
                  "Plain": "88"
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "EthToRootNft",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "88",
                    "value": "4"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "RootNftToErc721",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "4",
                    "value": "88"
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "321"
          },
          "events": {
            "type": "112"
          },
          "constants": [
            {
              "name": "DelayLength",
              "type": "4",
              "value": "0x05000000",
              "docs": []
            }
          ],
          "errors": {
            "type": "483"
          },
          "index": "30"
        },
        {
          "name": "FeeProxy",
          "storage": null,
          "calls": {
            "type": "322"
          },
          "events": {
            "type": "118"
          },
          "constants": [
            {
              "name": "FeeAssetId",
              "type": "4",
              "value": "0x02000000",
              "docs": [
                " The native token asset Id (managed by pallet-balances)"
              ]
            }
          ],
          "errors": {
            "type": "484"
          },
          "index": "31"
        },
        {
          "name": "FeeControl",
          "storage": {
            "prefix": "FeeControl",
            "items": [
              {
                "name": "Data",
                "modifier": "Default",
                "type": {
                  "Plain": "485"
                },
                "fallback": "0x00f0ab75a40d00000000000000000000000000000000000000000000000000007d000000c4090000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": "323"
          },
          "events": {
            "type": "119"
          },
          "constants": [],
          "errors": null,
          "index": "40"
        },
        {
          "name": "Xls20",
          "storage": {
            "prefix": "Xls20",
            "items": [
              {
                "name": "Relayer",
                "modifier": "Optional",
                "type": {
                  "Plain": "0"
                },
                "fallback": "0x00",
                "docs": [
                  " The permissioned relayer"
                ]
              },
              {
                "name": "Xls20MintFee",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The extra cost of minting an XLS-20 compatible NFT"
                ]
              },
              {
                "name": "Xls20TokenMap",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": "29",
                    "value": "87"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps from TRN native token_id to XLS-20 TokenId"
                ]
              }
            ]
          },
          "calls": {
            "type": "324"
          },
          "events": {
            "type": "120"
          },
          "constants": [],
          "errors": {
            "type": "486"
          },
          "index": "42"
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "487"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "491"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": "327"
          },
          "events": {
            "type": "124"
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": "6",
              "value": "0x94000000000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": "6",
              "value": "0x7e000000000000000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": "4",
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": "4",
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": "6",
              "value": "0x94000000000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": "6",
              "value": "0x50010000000000000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": "495"
          },
          "index": "32"
        },
        {
          "name": "Futurepass",
          "storage": {
            "prefix": "Futurepass",
            "items": [
              {
                "name": "NextFuturepassId",
                "modifier": "Default",
                "type": {
                  "Plain": "6"
                },
                "fallback": "0x01000000000000000000000000000000",
                "docs": [
                  " The next available incrementing futurepass id"
                ]
              },
              {
                "name": "Holders",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Futurepass holders (account -> futurepass)"
                ]
              },
              {
                "name": "DefaultProxy",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": "0",
                    "value": "0"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Accounts which have set futurepass as default proxied on-chain account (delegate ->",
                  " futurepass)"
                ]
              },
              {
                "name": "MigrationAdmin",
                "modifier": "Optional",
                "type": {
                  "Plain": "0"
                },
                "fallback": "0x00",
                "docs": [
                  " Migration data for user (root) and collections they can migrate"
                ]
              }
            ]
          },
          "calls": {
            "type": "329"
          },
          "events": {
            "type": "127"
          },
          "constants": [],
          "errors": {
            "type": "496"
          },
          "index": "34"
        }
      ],
      "extrinsic": {
        "type": "497",
        "version": "4",
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": "500",
            "additionalSigned": "32"
          },
          {
            "identifier": "CheckSpecVersion",
            "type": "501",
            "additionalSigned": "4"
          },
          {
            "identifier": "CheckTxVersion",
            "type": "502",
            "additionalSigned": "4"
          },
          {
            "identifier": "CheckGenesis",
            "type": "503",
            "additionalSigned": "9"
          },
          {
            "identifier": "CheckMortality",
            "type": "504",
            "additionalSigned": "9"
          },
          {
            "identifier": "CheckNonce",
            "type": "506",
            "additionalSigned": "32"
          },
          {
            "identifier": "CheckWeight",
            "type": "507",
            "additionalSigned": "32"
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": "508",
            "additionalSigned": "32"
          }
        ]
      },
      "type": "510"
    }
  }
}
