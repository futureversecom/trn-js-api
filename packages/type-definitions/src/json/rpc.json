{
    "oracle": {
        "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
                {
                    "name": "providerId",
                    "type": "RpcDataProviderId"
                },
                {
                    "name": "key",
                    "type": "OracleKey"
                },
                {
                    "name": "at",
                    "type": "BlockHash",
                    "isHistoric": true,
                    "isOptional": true
                }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
        },
        "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
                {
                    "name": "providerId",
                    "type": "RpcDataProviderId"
                },
                {
                    "name": "at",
                    "type": "BlockHash",
                    "isHistoric": true,
                    "isOptional": true
                }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
        }
    },
    "tokens": {
        "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
                {
                    "name": "currencyId",
                    "type": "CurrencyId"
                },
                {
                    "name": "at",
                    "type": "BlockHash",
                    "isHistoric": true,
                    "isOptional": true
                }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
        }
    },
    "dex": {
        "quote": {
            "description": "Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset",
            "params": [
                {
                    "name": "amountA",
                    "type": "u128"
                },
                {
                    "name": "reserveA",
                    "type": "u128"
                },
                {
                    "name": "reserveB",
                    "type": "u128"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "dex_quote",
            "method": "quote",
            "section": "dex"
        },
        "getAmountsOut": {
            "description": "Given an array of AssetIds, return amounts out for an amount in",
            "params": [
                {
                    "name": "amountIn",
                    "type": "Balance"
                },
                {
                    "name": "path",
                    "type": "Vec<AssetId>"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "dex_getAmountsOut",
            "method": "getAmountsOut",
            "section": "dex"
        },
        "getAmountsIn": {
            "description": "Given an array of AssetIds, return amounts in for an amount out",
            "params": [
                {
                    "name": "amountOut",
                    "type": "Balance"
                },
                {
                    "name": "path",
                    "type": "Vec<AssetId>"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "dex_getAmountsIn",
            "method": "getAmountsIn",
            "section": "dex"
        },
        "getLPTokenID": {
            "description": "Given two AssetIds, return liquidity token created for the pair",
            "params": [
                {
                    "name": "assetA",
                    "type": "AssetId"
                },
                {
                    "name": "assetB",
                    "type": "AssetId"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "dex_getLPTokenID",
            "method": "getLPTokenID",
            "section": "dex"
        },
        "getLiquidity": {
            "description": "Given two AssetIds, return liquidity",
            "params": [
                {
                    "name": "assetA",
                    "type": "AssetId"
                },
                {
                    "name": "assetB",
                    "type": "AssetId"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "dex_getLiquidity",
            "method": "getLiquidity",
            "section": "dex"
        },
        "getTradingPairStatus": {
            "description": "Given two AssetIds, return whether trading pair is enabled or disabled",
            "params": [
                {
                    "name": "assetA",
                    "type": "AssetId"
                },
                {
                    "name": "assetB",
                    "type": "AssetId"
                }
            ],
            "type": "hex",
            "isSubscription": false,
            "jsonrpc": "dex_getTradingPairStatus",
            "method": "getTradingPairStatus",
            "section": "dex"
        }
    },
    "ethy": {
        "getEventProof": {
            "description": "Get ETH event proof for event Id",
            "params": [
                {
                    "name": "eventId",
                    "type": "EventProofId"
                }
            ],
            "type": "Option<EthEventProofResponse>",
            "isSubscription": false,
            "jsonrpc": "ethy_getEventProof",
            "method": "getEventProof",
            "section": "ethy"
        },
        "getXrplTxProof": {
            "description": "Get XRPL event proof for event Id",
            "params": [
                {
                    "name": "eventId",
                    "type": "EventProofId"
                }
            ],
            "type": "Option<XrplEventProofResponse>",
            "isSubscription": false,
            "jsonrpc": "ethy_getXrplTxProof",
            "method": "getXrplTxProof",
            "section": "ethy"
        }
    },
    "nft": {
        "ownedTokens": {
            "description": "Get all NFTs owned by an account",
            "params": [
                {
                    "name": "collectionId",
                    "type": "CollectionUuid"
                },
                {
                    "name": "who",
                    "type": "AccountId"
                },
                {
                    "name": "cursor",
                    "type": "SerialNumber"
                },
                {
                    "name": "limit",
                    "type": "u16"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "nft_ownedTokens",
            "method": "ownedTokens",
            "section": "nft"
        },
        "tokenUri": {
            "description": "Get the URI of a token",
            "params": [
                {
                    "name": "tokenId",
                    "type": "TokenId"
                }
            ],
            "type": "Json",
            "isSubscription": false,
            "jsonrpc": "nft_tokenUri",
            "method": "tokenUri",
            "section": "nft"
        }
    }
}